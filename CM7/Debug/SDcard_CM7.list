
SDcard_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08009958  08009958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a8c  08009a8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009a8c  08009a8c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a8c  08009a8c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  24000010  08009aa4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24000550  08009aa4  00020550  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3c8  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003849  00000000  00000000  0003e406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00041c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00042b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fd39  00000000  00000000  000438c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e13  00000000  00000000  00083601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001929c4  00000000  00000000  00097414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00229dd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b90  00000000  00000000  00229e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009940 	.word	0x08009940

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009940 	.word	0x08009940

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002ec:	4b3f      	ldr	r3, [pc, #252]	; (80003ec <SystemInit+0x104>)
 80002ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f2:	4a3e      	ldr	r2, [pc, #248]	; (80003ec <SystemInit+0x104>)
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002fc:	4b3b      	ldr	r3, [pc, #236]	; (80003ec <SystemInit+0x104>)
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	4a3a      	ldr	r2, [pc, #232]	; (80003ec <SystemInit+0x104>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000308:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <SystemInit+0x108>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f003 030f 	and.w	r3, r3, #15
 8000310:	2b06      	cmp	r3, #6
 8000312:	d807      	bhi.n	8000324 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000314:	4b36      	ldr	r3, [pc, #216]	; (80003f0 <SystemInit+0x108>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f023 030f 	bic.w	r3, r3, #15
 800031c:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <SystemInit+0x108>)
 800031e:	f043 0307 	orr.w	r3, r3, #7
 8000322:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000324:	4b33      	ldr	r3, [pc, #204]	; (80003f4 <SystemInit+0x10c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a32      	ldr	r2, [pc, #200]	; (80003f4 <SystemInit+0x10c>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000330:	4b30      	ldr	r3, [pc, #192]	; (80003f4 <SystemInit+0x10c>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000336:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <SystemInit+0x10c>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	492e      	ldr	r1, [pc, #184]	; (80003f4 <SystemInit+0x10c>)
 800033c:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <SystemInit+0x110>)
 800033e:	4013      	ands	r3, r2
 8000340:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000342:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <SystemInit+0x108>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f003 0308 	and.w	r3, r3, #8
 800034a:	2b00      	cmp	r3, #0
 800034c:	d007      	beq.n	800035e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800034e:	4b28      	ldr	r3, [pc, #160]	; (80003f0 <SystemInit+0x108>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f023 030f 	bic.w	r3, r3, #15
 8000356:	4a26      	ldr	r2, [pc, #152]	; (80003f0 <SystemInit+0x108>)
 8000358:	f043 0307 	orr.w	r3, r3, #7
 800035c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800035e:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <SystemInit+0x10c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000364:	4b23      	ldr	r3, [pc, #140]	; (80003f4 <SystemInit+0x10c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800036a:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <SystemInit+0x10c>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <SystemInit+0x10c>)
 8000372:	4a22      	ldr	r2, [pc, #136]	; (80003fc <SystemInit+0x114>)
 8000374:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000376:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <SystemInit+0x10c>)
 8000378:	4a21      	ldr	r2, [pc, #132]	; (8000400 <SystemInit+0x118>)
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800037c:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <SystemInit+0x10c>)
 800037e:	4a21      	ldr	r2, [pc, #132]	; (8000404 <SystemInit+0x11c>)
 8000380:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <SystemInit+0x10c>)
 8000384:	2200      	movs	r2, #0
 8000386:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <SystemInit+0x10c>)
 800038a:	4a1e      	ldr	r2, [pc, #120]	; (8000404 <SystemInit+0x11c>)
 800038c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <SystemInit+0x10c>)
 8000390:	2200      	movs	r2, #0
 8000392:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <SystemInit+0x10c>)
 8000396:	4a1b      	ldr	r2, [pc, #108]	; (8000404 <SystemInit+0x11c>)
 8000398:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <SystemInit+0x10c>)
 800039c:	2200      	movs	r2, #0
 800039e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <SystemInit+0x10c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <SystemInit+0x10c>)
 80003a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x10c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <SystemInit+0x120>)
 80003b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b6:	4a14      	ldr	r2, [pc, #80]	; (8000408 <SystemInit+0x120>)
 80003b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003bc:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <SystemInit+0x124>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <SystemInit+0x128>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ca:	d202      	bcs.n	80003d2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <SystemInit+0x12c>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <SystemInit+0x130>)
 80003d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003da:	4b04      	ldr	r3, [pc, #16]	; (80003ec <SystemInit+0x104>)
 80003dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003e0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	e000ed00 	.word	0xe000ed00
 80003f0:	52002000 	.word	0x52002000
 80003f4:	58024400 	.word	0x58024400
 80003f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003fc:	02020200 	.word	0x02020200
 8000400:	01ff0000 	.word	0x01ff0000
 8000404:	01010280 	.word	0x01010280
 8000408:	580000c0 	.word	0x580000c0
 800040c:	5c001000 	.word	0x5c001000
 8000410:	ffff0000 	.word	0xffff0000
 8000414:	51008108 	.word	0x51008108
 8000418:	52004000 	.word	0x52004000

0800041c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800041c:	b5b0      	push	{r4, r5, r7, lr}
 800041e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000422:	af02      	add	r7, sp, #8



	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "MicroSD Card is working....."; /* File write buffer */
 8000424:	4b52      	ldr	r3, [pc, #328]	; (8000570 <main+0x154>)
 8000426:	f507 7401 	add.w	r4, r7, #516	; 0x204
 800042a:	461d      	mov	r5, r3
 800042c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800042e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000430:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000434:	c407      	stmia	r4!, {r0, r1, r2}
 8000436:	7023      	strb	r3, [r4, #0]
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800043c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000440:	bf00      	nop
 8000442:	4b4c      	ldr	r3, [pc, #304]	; (8000574 <main+0x158>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800044a:	2b00      	cmp	r3, #0
 800044c:	d006      	beq.n	800045c <main+0x40>
 800044e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000452:	1e5a      	subs	r2, r3, #1
 8000454:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8000458:	2b00      	cmp	r3, #0
 800045a:	dcf2      	bgt.n	8000442 <main+0x26>
  if ( timeout < 0 )
 800045c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000460:	2b00      	cmp	r3, #0
 8000462:	da01      	bge.n	8000468 <main+0x4c>
  {
  Error_Handler();
 8000464:	f000 f990 	bl	8000788 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f000 faa0 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046c:	f000 f88c 	bl	8000588 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000470:	4b40      	ldr	r3, [pc, #256]	; (8000574 <main+0x158>)
 8000472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000476:	4a3f      	ldr	r2, [pc, #252]	; (8000574 <main+0x158>)
 8000478:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000480:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <main+0x158>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000486:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800048a:	463b      	mov	r3, r7
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	463b      	mov	r3, r7
 8000490:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000492:	2000      	movs	r0, #0
 8000494:	f000 fe3e 	bl	8001114 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000498:	2100      	movs	r1, #0
 800049a:	2000      	movs	r0, #0
 800049c:	f000 fe54 	bl	8001148 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004a8:	bf00      	nop
 80004aa:	4b32      	ldr	r3, [pc, #200]	; (8000574 <main+0x158>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d106      	bne.n	80004c4 <main+0xa8>
 80004b6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80004ba:	1e5a      	subs	r2, r3, #1
 80004bc:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	dcf2      	bgt.n	80004aa <main+0x8e>
if ( timeout < 0 )
 80004c4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	da01      	bge.n	80004d0 <main+0xb4>
{
Error_Handler();
 80004cc:	f000 f95c 	bl	8000788 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8f8 	bl	80006c4 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80004d4:	f000 f8d2 	bl	800067c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80004d8:	f006 f9ce 	bl	8006878 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */



  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80004dc:	2200      	movs	r2, #0
 80004de:	4926      	ldr	r1, [pc, #152]	; (8000578 <main+0x15c>)
 80004e0:	4826      	ldr	r0, [pc, #152]	; (800057c <main+0x160>)
 80004e2:	f008 f957 	bl	8008794 <f_mount>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <main+0xd6>
     {
         Error_Handler();
 80004ec:	f000 f94c 	bl	8000788 <Error_Handler>
 80004f0:	e037      	b.n	8000562 <main+0x146>
     }
     else
     {
         if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	2200      	movs	r2, #0
 80004fc:	2107      	movs	r1, #7
 80004fe:	481e      	ldr	r0, [pc, #120]	; (8000578 <main+0x15c>)
 8000500:	f008 fd6a 	bl	8008fd8 <f_mkfs>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d002      	beq.n	8000510 <main+0xf4>
         {
             Error_Handler();
 800050a:	f000 f93d 	bl	8000788 <Error_Handler>
 800050e:	e028      	b.n	8000562 <main+0x146>
         }
         else
         {
             //Open file for writing (Create)
             if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000510:	220a      	movs	r2, #10
 8000512:	491b      	ldr	r1, [pc, #108]	; (8000580 <main+0x164>)
 8000514:	481b      	ldr	r0, [pc, #108]	; (8000584 <main+0x168>)
 8000516:	f008 f983 	bl	8008820 <f_open>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <main+0x10a>
             {
                 Error_Handler();
 8000520:	f000 f932 	bl	8000788 <Error_Handler>
 8000524:	e01d      	b.n	8000562 <main+0x146>
             {



                 //Write to the text file
                 res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8000526:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fed4 	bl	80002d8 <strlen>
 8000530:	4602      	mov	r2, r0
 8000532:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8000536:	f507 7101 	add.w	r1, r7, #516	; 0x204
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <main+0x168>)
 800053c:	f008 fb2e 	bl	8008b9c <f_write>
 8000540:	4603      	mov	r3, r0
 8000542:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
                 if((byteswritten == 0) || (res != FR_OK))
 8000546:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800054a:	2b00      	cmp	r3, #0
 800054c:	d003      	beq.n	8000556 <main+0x13a>
 800054e:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <main+0x140>
                 {
                     Error_Handler();
 8000556:	f000 f917 	bl	8000788 <Error_Handler>
 800055a:	e002      	b.n	8000562 <main+0x146>
                 else
                 {



                     f_close(&SDFile);
 800055c:	4809      	ldr	r0, [pc, #36]	; (8000584 <main+0x168>)
 800055e:	f008 fd10 	bl	8008f82 <f_close>
                 }
             }
         }
     }
     f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <main+0x160>)
 8000568:	f008 f914 	bl	8008794 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x150>
 800056e:	bf00      	nop
 8000570:	08009964 	.word	0x08009964
 8000574:	58024400 	.word	0x58024400
 8000578:	240000ec 	.word	0x240000ec
 800057c:	24000320 	.word	0x24000320
 8000580:	08009958 	.word	0x08009958
 8000584:	240000f0 	.word	0x240000f0

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b09c      	sub	sp, #112	; 0x70
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000592:	224c      	movs	r2, #76	; 0x4c
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f009 f9ca 	bl	8009930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2220      	movs	r2, #32
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f009 f9c4 	bl	8009930 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005a8:	2004      	movs	r0, #4
 80005aa:	f000 fde1 	bl	8001170 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ae:	2300      	movs	r3, #0
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	4b30      	ldr	r3, [pc, #192]	; (8000674 <SystemClock_Config+0xec>)
 80005b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b6:	4a2f      	ldr	r2, [pc, #188]	; (8000674 <SystemClock_Config+0xec>)
 80005b8:	f023 0301 	bic.w	r3, r3, #1
 80005bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <SystemClock_Config+0xec>)
 80005c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <SystemClock_Config+0xf0>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a2a      	ldr	r2, [pc, #168]	; (8000678 <SystemClock_Config+0xf0>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xf0>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005e0:	bf00      	nop
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SystemClock_Config+0xf0>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005ee:	d1f8      	bne.n	80005e2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000604:	2320      	movs	r3, #32
 8000606:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000608:	2381      	movs	r3, #129	; 0x81
 800060a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000618:	2304      	movs	r3, #4
 800061a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800061c:	2300      	movs	r3, #0
 800061e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fdfb 	bl	8001224 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000634:	f000 f8a8 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	233f      	movs	r3, #63	; 0x3f
 800063a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f9f1 	bl	8001a44 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000668:	f000 f88e 	bl	8000788 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3770      	adds	r7, #112	; 0x70
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	58000400 	.word	0x58000400
 8000678:	58024800 	.word	0x58024800

0800067c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_SDMMC1_SD_Init+0x40>)
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <MX_SDMMC1_SD_Init+0x44>)
 8000684:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_SDMMC1_SD_Init+0x40>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_SDMMC1_SD_Init+0x40>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_SDMMC1_SD_Init+0x40>)
 8000694:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000698:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_SDMMC1_SD_Init+0x40>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_SDMMC1_SD_Init+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_SDMMC1_SD_Init+0x40>)
 80006a8:	f003 fee2 	bl	8004470 <HAL_SD_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80006b2:	f000 f869 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	24000068 	.word	0x24000068
 80006c0:	52007000 	.word	0x52007000

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_GPIO_Init+0xbc>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	4a27      	ldr	r2, [pc, #156]	; (8000780 <MX_GPIO_Init+0xbc>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <MX_GPIO_Init+0xbc>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_GPIO_Init+0xbc>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fe:	4a20      	ldr	r2, [pc, #128]	; (8000780 <MX_GPIO_Init+0xbc>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_GPIO_Init+0xbc>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_GPIO_Init+0xbc>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	4a18      	ldr	r2, [pc, #96]	; (8000780 <MX_GPIO_Init+0xbc>)
 800071e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_GPIO_Init+0xbc>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073a:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_GPIO_Init+0xc0>)
 800073c:	f000 fcd0 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <MX_GPIO_Init+0xc0>)
 8000756:	f000 fafb 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xc0>)
 8000774:	f000 faec 	bl	8000d50 <HAL_GPIO_Init>

}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	58024400 	.word	0x58024400
 8000784:	58022000 	.word	0x58022000

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_MspInit+0x30>)
 800079c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x30>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x30>)
 80007ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58024400 	.word	0x58024400

080007c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b0ba      	sub	sp, #232	; 0xe8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	22c0      	movs	r2, #192	; 0xc0
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f009 f8a1 	bl	8009930 <memset>
  if(hsd->Instance==SDMMC1)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a3b      	ldr	r2, [pc, #236]	; (80008e0 <HAL_SD_MspInit+0x118>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d16e      	bne.n	80008d6 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80007fe:	2300      	movs	r3, #0
 8000800:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fc7c 	bl	8002104 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000812:	f7ff ffb9 	bl	8000788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000816:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <HAL_SD_MspInit+0x11c>)
 8000818:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800081c:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <HAL_SD_MspInit+0x11c>)
 800081e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000822:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <HAL_SD_MspInit+0x11c>)
 8000828:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800082c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <HAL_SD_MspInit+0x11c>)
 8000836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083a:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <HAL_SD_MspInit+0x11c>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000844:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <HAL_SD_MspInit+0x11c>)
 8000846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <HAL_SD_MspInit+0x11c>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <HAL_SD_MspInit+0x11c>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <HAL_SD_MspInit+0x11c>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8000870:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000874:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800088a:	230c      	movs	r3, #12
 800088c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000890:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000894:	4619      	mov	r1, r3
 8000896:	4814      	ldr	r0, [pc, #80]	; (80008e8 <HAL_SD_MspInit+0x120>)
 8000898:	f000 fa5a 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089c:	2304      	movs	r3, #4
 800089e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80008b4:	230c      	movs	r3, #12
 80008b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008be:	4619      	mov	r1, r3
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <HAL_SD_MspInit+0x124>)
 80008c2:	f000 fa45 	bl	8000d50 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2031      	movs	r0, #49	; 0x31
 80008cc:	f000 fa0b 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008d0:	2031      	movs	r0, #49	; 0x31
 80008d2:	f000 fa22 	bl	8000d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	37e8      	adds	r7, #232	; 0xe8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	52007000 	.word	0x52007000
 80008e4:	58024400 	.word	0x58024400
 80008e8:	58020800 	.word	0x58020800
 80008ec:	58020c00 	.word	0x58020c00

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f8a8 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <SDMMC1_IRQHandler+0x10>)
 800094a:	f003 fff9 	bl	8004940 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	24000068 	.word	0x24000068

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800095c:	f7ff fcc4 	bl	80002e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	; (8000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	; (80009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f008 ffaf 	bl	80098e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fd47 	bl	800041c <main>
  bx  lr
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000994:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000998:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800099c:	08009a94 	.word	0x08009a94
  ldr r2, =_sbss
 80009a0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80009a4:	24000550 	.word	0x24000550

080009a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC3_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b2:	2003      	movs	r0, #3
 80009b4:	f000 f98c 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009b8:	f001 f9fa 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 80009bc:	4602      	mov	r2, r0
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_Init+0x68>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	f003 030f 	and.w	r3, r3, #15
 80009c8:	4913      	ldr	r1, [pc, #76]	; (8000a18 <HAL_Init+0x6c>)
 80009ca:	5ccb      	ldrb	r3, [r1, r3]
 80009cc:	f003 031f 	and.w	r3, r3, #31
 80009d0:	fa22 f303 	lsr.w	r3, r2, r3
 80009d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_Init+0x68>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_Init+0x6c>)
 80009e0:	5cd3      	ldrb	r3, [r2, r3]
 80009e2:	f003 031f 	and.w	r3, r3, #31
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	fa22 f303 	lsr.w	r3, r2, r3
 80009ec:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <HAL_Init+0x70>)
 80009ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009f0:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <HAL_Init+0x74>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f814 	bl	8000a24 <HAL_InitTick>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e002      	b.n	8000a0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a06:	f7ff fec5 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	58024400 	.word	0x58024400
 8000a18:	080099c8 	.word	0x080099c8
 8000a1c:	24000004 	.word	0x24000004
 8000a20:	24000000 	.word	0x24000000

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_InitTick+0x60>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e021      	b.n	8000a7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_InitTick+0x64>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_InitTick+0x60>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f971 	bl	8000d36 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f93b 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x68>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2400000c 	.word	0x2400000c
 8000a88:	24000000 	.word	0x24000000
 8000a8c:	24000008 	.word	0x24000008

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	2400000c 	.word	0x2400000c
 8000ab4:	240000e4 	.word	0x240000e4

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	240000e4 	.word	0x240000e4

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2400000c 	.word	0x2400000c

08000b18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetREVID+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	0c1b      	lsrs	r3, r3, #16
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	5c001000 	.word	0x5c001000

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <__NVIC_SetPriorityGrouping+0x40>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x40>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	05fa0000 	.word	0x05fa0000

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff29 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff40 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff90 	bl	8000c24 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5f 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff33 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa4 	bl	8000c8c <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d5e:	4b89      	ldr	r3, [pc, #548]	; (8000f84 <HAL_GPIO_Init+0x234>)
 8000d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d62:	e194      	b.n	800108e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	2101      	movs	r1, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8186 	beq.w	8001088 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d00b      	beq.n	8000d9c <HAL_GPIO_Init+0x4c>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d007      	beq.n	8000d9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d90:	2b11      	cmp	r3, #17
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b12      	cmp	r3, #18
 8000d9a:	d130      	bne.n	8000dfe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	f003 0201 	and.w	r2, r3, #1
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0xee>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d123      	bne.n	8000e86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	69b9      	ldr	r1, [r7, #24]
 8000e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0203 	and.w	r2, r3, #3
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 80e0 	beq.w	8001088 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_GPIO_Init+0x238>)
 8000eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ece:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <HAL_GPIO_Init+0x238>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <HAL_GPIO_Init+0x238>)
 8000eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee6:	4a29      	ldr	r2, [pc, #164]	; (8000f8c <HAL_GPIO_Init+0x23c>)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <HAL_GPIO_Init+0x240>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d052      	beq.n	8000fb8 <HAL_GPIO_Init+0x268>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_GPIO_Init+0x244>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d031      	beq.n	8000f7e <HAL_GPIO_Init+0x22e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <HAL_GPIO_Init+0x248>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d02b      	beq.n	8000f7a <HAL_GPIO_Init+0x22a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <HAL_GPIO_Init+0x24c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d025      	beq.n	8000f76 <HAL_GPIO_Init+0x226>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_GPIO_Init+0x250>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01f      	beq.n	8000f72 <HAL_GPIO_Init+0x222>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <HAL_GPIO_Init+0x254>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x21e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a1a      	ldr	r2, [pc, #104]	; (8000fa8 <HAL_GPIO_Init+0x258>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x21a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_GPIO_Init+0x25c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x216>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <HAL_GPIO_Init+0x260>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x212>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_GPIO_Init+0x264>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x20e>
 8000f5a:	2309      	movs	r3, #9
 8000f5c:	e02d      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f5e:	230a      	movs	r3, #10
 8000f60:	e02b      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f62:	2308      	movs	r3, #8
 8000f64:	e029      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e027      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	e025      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e023      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e021      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e01f      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e01d      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e01b      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f82:	bf00      	nop
 8000f84:	58000080 	.word	0x58000080
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58000400 	.word	0x58000400
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58020400 	.word	0x58020400
 8000f98:	58020800 	.word	0x58020800
 8000f9c:	58020c00 	.word	0x58020c00
 8000fa0:	58021000 	.word	0x58021000
 8000fa4:	58021400 	.word	0x58021400
 8000fa8:	58021800 	.word	0x58021800
 8000fac:	58021c00 	.word	0x58021c00
 8000fb0:	58022000 	.word	0x58022000
 8000fb4:	58022400 	.word	0x58022400
 8000fb8:	2300      	movs	r3, #0
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fca:	4938      	ldr	r1, [pc, #224]	; (80010ac <HAL_GPIO_Init+0x35c>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800105a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	3301      	adds	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	f47f ae63 	bne.w	8000d64 <HAL_GPIO_Init+0x14>
  }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3724      	adds	r7, #36	; 0x24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	58000400 	.word	0x58000400

080010b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e001      	b.n	80010d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_HSEM_FastTake+0x2c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3320      	adds	r3, #32
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_HSEM_FastTake+0x30>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d101      	bne.n	8001130 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	e000      	b.n	8001132 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	58026400 	.word	0x58026400
 8001144:	80000300 	.word	0x80000300

08001148 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001152:	4906      	ldr	r1, [pc, #24]	; (800116c <HAL_HSEM_Release+0x24>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	58026400 	.word	0x58026400

08001170 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <HAL_PWREx_ConfigSupply+0xb0>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	2b06      	cmp	r3, #6
 8001182:	d00a      	beq.n	800119a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <HAL_PWREx_ConfigSupply+0xb0>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	d001      	beq.n	8001196 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e040      	b.n	8001218 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e03e      	b.n	8001218 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_PWREx_ConfigSupply+0xb0>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80011a2:	491f      	ldr	r1, [pc, #124]	; (8001220 <HAL_PWREx_ConfigSupply+0xb0>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011aa:	f7ff fc85 	bl	8000ab8 <HAL_GetTick>
 80011ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011b0:	e009      	b.n	80011c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011b2:	f7ff fc81 	bl	8000ab8 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c0:	d901      	bls.n	80011c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e028      	b.n	8001218 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_PWREx_ConfigSupply+0xb0>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d2:	d1ee      	bne.n	80011b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b1e      	cmp	r3, #30
 80011d8:	d008      	beq.n	80011ec <HAL_PWREx_ConfigSupply+0x7c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b2e      	cmp	r3, #46	; 0x2e
 80011de:	d005      	beq.n	80011ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b1d      	cmp	r3, #29
 80011e4:	d002      	beq.n	80011ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b2d      	cmp	r3, #45	; 0x2d
 80011ea:	d114      	bne.n	8001216 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80011ec:	f7ff fc64 	bl	8000ab8 <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80011f2:	e009      	b.n	8001208 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011f4:	f7ff fc60 	bl	8000ab8 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001202:	d901      	bls.n	8001208 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e007      	b.n	8001218 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_PWREx_ConfigSupply+0xb0>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d1ee      	bne.n	80011f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	58024800 	.word	0x58024800

08001224 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e3ff      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 8087 	beq.w	8001352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001244:	4b99      	ldr	r3, [pc, #612]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800124e:	4b97      	ldr	r3, [pc, #604]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	2b10      	cmp	r3, #16
 8001258:	d007      	beq.n	800126a <HAL_RCC_OscConfig+0x46>
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	2b18      	cmp	r3, #24
 800125e:	d110      	bne.n	8001282 <HAL_RCC_OscConfig+0x5e>
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d10b      	bne.n	8001282 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126a:	4b90      	ldr	r3, [pc, #576]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d06c      	beq.n	8001350 <HAL_RCC_OscConfig+0x12c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d168      	bne.n	8001350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e3d9      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128a:	d106      	bne.n	800129a <HAL_RCC_OscConfig+0x76>
 800128c:	4b87      	ldr	r3, [pc, #540]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a86      	ldr	r2, [pc, #536]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e02e      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x98>
 80012a2:	4b82      	ldr	r3, [pc, #520]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a81      	ldr	r2, [pc, #516]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b7f      	ldr	r3, [pc, #508]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a7e      	ldr	r2, [pc, #504]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e01d      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0xbc>
 80012c6:	4b79      	ldr	r3, [pc, #484]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a78      	ldr	r2, [pc, #480]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b76      	ldr	r3, [pc, #472]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a75      	ldr	r2, [pc, #468]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 80012e0:	4b72      	ldr	r3, [pc, #456]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a71      	ldr	r2, [pc, #452]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b6f      	ldr	r3, [pc, #444]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a6e      	ldr	r2, [pc, #440]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fbda 	bl	8000ab8 <HAL_GetTick>
 8001304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fbd6 	bl	8000ab8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e38d      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800131a:	4b64      	ldr	r3, [pc, #400]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0xe4>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fbc6 	bl	8000ab8 <HAL_GetTick>
 800132c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fbc2 	bl	8000ab8 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e379      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001342:	4b5a      	ldr	r3, [pc, #360]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x10c>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80ae 	beq.w	80014bc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001360:	4b52      	ldr	r3, [pc, #328]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001368:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800136a:	4b50      	ldr	r3, [pc, #320]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <HAL_RCC_OscConfig+0x162>
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2b18      	cmp	r3, #24
 800137a:	d13a      	bne.n	80013f2 <HAL_RCC_OscConfig+0x1ce>
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d135      	bne.n	80013f2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x17a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e34b      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	f7ff fbbb 	bl	8000b18 <HAL_GetREVID>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d817      	bhi.n	80013dc <HAL_RCC_OscConfig+0x1b8>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	2b40      	cmp	r3, #64	; 0x40
 80013b2:	d108      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1a2>
 80013b4:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013bc:	4a3b      	ldr	r2, [pc, #236]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80013be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c4:	e07a      	b.n	80014bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	031b      	lsls	r3, r3, #12
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013da:	e06f      	b.n	80014bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b33      	ldr	r3, [pc, #204]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	061b      	lsls	r3, r3, #24
 80013ea:	4930      	ldr	r1, [pc, #192]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f0:	e064      	b.n	80014bc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d045      	beq.n	8001486 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013fa:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 0219 	bic.w	r2, r3, #25
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	4929      	ldr	r1, [pc, #164]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fb54 	bl	8000ab8 <HAL_GetTick>
 8001410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fb50 	bl	8000ab8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e307      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	f7ff fb71 	bl	8000b18 <HAL_GetREVID>
 8001436:	4603      	mov	r3, r0
 8001438:	f241 0203 	movw	r2, #4099	; 0x1003
 800143c:	4293      	cmp	r3, r2
 800143e:	d817      	bhi.n	8001470 <HAL_RCC_OscConfig+0x24c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b40      	cmp	r3, #64	; 0x40
 8001446:	d108      	bne.n	800145a <HAL_RCC_OscConfig+0x236>
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001450:	4a16      	ldr	r2, [pc, #88]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001456:	6053      	str	r3, [r2, #4]
 8001458:	e030      	b.n	80014bc <HAL_RCC_OscConfig+0x298>
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	031b      	lsls	r3, r3, #12
 8001468:	4910      	ldr	r1, [pc, #64]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
 800146e:	e025      	b.n	80014bc <HAL_RCC_OscConfig+0x298>
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	061b      	lsls	r3, r3, #24
 800147e:	490b      	ldr	r1, [pc, #44]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
 8001484:	e01a      	b.n	80014bc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_RCC_OscConfig+0x288>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fb11 	bl	8000ab8 <HAL_GetTick>
 8001496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fb0d 	bl	8000ab8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d903      	bls.n	80014b0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e2c4      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
 80014ac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014b0:	4ba4      	ldr	r3, [pc, #656]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1ee      	bne.n	800149a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80a9 	beq.w	800161c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ca:	4b9e      	ldr	r3, [pc, #632]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014d4:	4b9b      	ldr	r3, [pc, #620]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d007      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2cc>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b18      	cmp	r3, #24
 80014e4:	d13a      	bne.n	800155c <HAL_RCC_OscConfig+0x338>
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d135      	bne.n	800155c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014f0:	4b94      	ldr	r3, [pc, #592]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_OscConfig+0x2e4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	2b80      	cmp	r3, #128	; 0x80
 8001502:	d001      	beq.n	8001508 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e296      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001508:	f7ff fb06 	bl	8000b18 <HAL_GetREVID>
 800150c:	4603      	mov	r3, r0
 800150e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001512:	4293      	cmp	r3, r2
 8001514:	d817      	bhi.n	8001546 <HAL_RCC_OscConfig+0x322>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	2b20      	cmp	r3, #32
 800151c:	d108      	bne.n	8001530 <HAL_RCC_OscConfig+0x30c>
 800151e:	4b89      	ldr	r3, [pc, #548]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001526:	4a87      	ldr	r2, [pc, #540]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800152c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800152e:	e075      	b.n	800161c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001530:	4b84      	ldr	r3, [pc, #528]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	069b      	lsls	r3, r3, #26
 800153e:	4981      	ldr	r1, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001544:	e06a      	b.n	800161c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001546:	4b7f      	ldr	r3, [pc, #508]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	061b      	lsls	r3, r3, #24
 8001554:	497b      	ldr	r1, [pc, #492]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001556:	4313      	orrs	r3, r2
 8001558:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800155a:	e05f      	b.n	800161c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d042      	beq.n	80015ea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001564:	4b77      	ldr	r3, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a76      	ldr	r2, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 800156a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff faa2 	bl	8000ab8 <HAL_GetTick>
 8001574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001578:	f7ff fa9e 	bl	8000ab8 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e255      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800158a:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001596:	f7ff fabf 	bl	8000b18 <HAL_GetREVID>
 800159a:	4603      	mov	r3, r0
 800159c:	f241 0203 	movw	r2, #4099	; 0x1003
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d817      	bhi.n	80015d4 <HAL_RCC_OscConfig+0x3b0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d108      	bne.n	80015be <HAL_RCC_OscConfig+0x39a>
 80015ac:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80015b4:	4a63      	ldr	r2, [pc, #396]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80015b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015ba:	6053      	str	r3, [r2, #4]
 80015bc:	e02e      	b.n	800161c <HAL_RCC_OscConfig+0x3f8>
 80015be:	4b61      	ldr	r3, [pc, #388]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	069b      	lsls	r3, r3, #26
 80015cc:	495d      	ldr	r1, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
 80015d2:	e023      	b.n	800161c <HAL_RCC_OscConfig+0x3f8>
 80015d4:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	4958      	ldr	r1, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
 80015e8:	e018      	b.n	800161c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015ea:	4b56      	ldr	r3, [pc, #344]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a55      	ldr	r2, [pc, #340]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80015f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fa5f 	bl	8000ab8 <HAL_GetTick>
 80015fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015fe:	f7ff fa5b 	bl	8000ab8 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e212      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d036      	beq.n	8001696 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d019      	beq.n	8001664 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001630:	4b44      	ldr	r3, [pc, #272]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001634:	4a43      	ldr	r2, [pc, #268]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fa3c 	bl	8000ab8 <HAL_GetTick>
 8001640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fa38 	bl	8000ab8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1ef      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x420>
 8001662:	e018      	b.n	8001696 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001668:	4a36      	ldr	r2, [pc, #216]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fa22 	bl	8000ab8 <HAL_GetTick>
 8001674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff fa1e 	bl	8000ab8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1d5      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 800168c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d036      	beq.n	8001710 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d019      	beq.n	80016de <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a25      	ldr	r2, [pc, #148]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80016b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016b6:	f7ff f9ff 	bl	8000ab8 <HAL_GetTick>
 80016ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016be:	f7ff f9fb 	bl	8000ab8 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1b2      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x49a>
 80016dc:	e018      	b.n	8001710 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 80016e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f9e5 	bl	8000ab8 <HAL_GetTick>
 80016ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016f2:	f7ff f9e1 	bl	8000ab8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e198      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_RCC_OscConfig+0x520>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8085 	beq.w	8001828 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_RCC_OscConfig+0x524>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <HAL_RCC_OscConfig+0x524>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800172a:	f7ff f9c5 	bl	8000ab8 <HAL_GetTick>
 800172e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001730:	e00c      	b.n	800174c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff f9c1 	bl	8000ab8 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d905      	bls.n	800174c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e178      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
 8001744:	58024400 	.word	0x58024400
 8001748:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800174c:	4b96      	ldr	r3, [pc, #600]	; (80019a8 <HAL_RCC_OscConfig+0x784>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ec      	beq.n	8001732 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x54a>
 8001760:	4b92      	ldr	r3, [pc, #584]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	4a91      	ldr	r2, [pc, #580]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6713      	str	r3, [r2, #112]	; 0x70
 800176c:	e02d      	b.n	80017ca <HAL_RCC_OscConfig+0x5a6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x56c>
 8001776:	4b8d      	ldr	r3, [pc, #564]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a8c      	ldr	r2, [pc, #560]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	4b8a      	ldr	r3, [pc, #552]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	4a89      	ldr	r2, [pc, #548]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	6713      	str	r3, [r2, #112]	; 0x70
 800178e:	e01c      	b.n	80017ca <HAL_RCC_OscConfig+0x5a6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d10c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x58e>
 8001798:	4b84      	ldr	r3, [pc, #528]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a83      	ldr	r2, [pc, #524]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
 80017a4:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	4a80      	ldr	r2, [pc, #512]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6713      	str	r3, [r2, #112]	; 0x70
 80017b0:	e00b      	b.n	80017ca <HAL_RCC_OscConfig+0x5a6>
 80017b2:	4b7e      	ldr	r3, [pc, #504]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a7d      	ldr	r2, [pc, #500]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	4b7b      	ldr	r3, [pc, #492]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	4a7a      	ldr	r2, [pc, #488]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d015      	beq.n	80017fe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff f971 	bl	8000ab8 <HAL_GetTick>
 80017d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff f96d 	bl	8000ab8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e122      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f0:	4b6e      	ldr	r3, [pc, #440]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ee      	beq.n	80017da <HAL_RCC_OscConfig+0x5b6>
 80017fc:	e014      	b.n	8001828 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff f95b 	bl	8000ab8 <HAL_GetTick>
 8001802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff f957 	bl	8000ab8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e10c      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800181c:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ee      	bne.n	8001806 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8101 	beq.w	8001a34 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001832:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800183a:	2b18      	cmp	r3, #24
 800183c:	f000 80bc 	beq.w	80019b8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2b02      	cmp	r3, #2
 8001846:	f040 8095 	bne.w	8001974 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b58      	ldr	r3, [pc, #352]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a57      	ldr	r2, [pc, #348]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff f92f 	bl	8000ab8 <HAL_GetTick>
 800185a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff f92b 	bl	8000ab8 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0e2      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001870:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800187e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001880:	4b4b      	ldr	r3, [pc, #300]	; (80019b0 <HAL_RCC_OscConfig+0x78c>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	430a      	orrs	r2, r1
 8001890:	4946      	ldr	r1, [pc, #280]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001892:	4313      	orrs	r3, r2
 8001894:	628b      	str	r3, [r1, #40]	; 0x28
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	3b01      	subs	r3, #1
 800189c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a4:	3b01      	subs	r3, #1
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b0:	3b01      	subs	r3, #1
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018be:	3b01      	subs	r3, #1
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80018c6:	4939      	ldr	r1, [pc, #228]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80018cc:	4b37      	ldr	r3, [pc, #220]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	4a36      	ldr	r2, [pc, #216]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80018da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HAL_RCC_OscConfig+0x790>)
 80018de:	4013      	ands	r3, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018e4:	00d2      	lsls	r2, r2, #3
 80018e6:	4931      	ldr	r1, [pc, #196]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	f023 020c 	bic.w	r2, r3, #12
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	492c      	ldr	r1, [pc, #176]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018fe:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	f023 0202 	bic.w	r2, r3, #2
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4928      	ldr	r1, [pc, #160]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800190c:	4313      	orrs	r3, r2
 800190e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	4a25      	ldr	r2, [pc, #148]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	4a22      	ldr	r2, [pc, #136]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800192e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f8b4 	bl	8000ab8 <HAL_GetTick>
 8001950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f8b0 	bl	8000ab8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e067      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x730>
 8001972:	e05f      	b.n	8001a34 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800197a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800197e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f89a 	bl	8000ab8 <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f896 	bl	8000ab8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e04d      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_RCC_OscConfig+0x788>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x764>
 80019a6:	e045      	b.n	8001a34 <HAL_RCC_OscConfig+0x810>
 80019a8:	58024800 	.word	0x58024800
 80019ac:	58024400 	.word	0x58024400
 80019b0:	fffffc0c 	.word	0xfffffc0c
 80019b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_RCC_OscConfig+0x81c>)
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_OscConfig+0x81c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d031      	beq.n	8001a30 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f003 0203 	and.w	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d12a      	bne.n	8001a30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d122      	bne.n	8001a30 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d11a      	bne.n	8001a30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0a5b      	lsrs	r3, r3, #9
 80019fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d111      	bne.n	8001a30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d108      	bne.n	8001a30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	0e1b      	lsrs	r3, r3, #24
 8001a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3730      	adds	r7, #48	; 0x30
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	58024400 	.word	0x58024400

08001a44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e19c      	b.n	8001d92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b8a      	ldr	r3, [pc, #552]	; (8001c84 <HAL_RCC_ClockConfig+0x240>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d910      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b87      	ldr	r3, [pc, #540]	; (8001c84 <HAL_RCC_ClockConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 020f 	bic.w	r2, r3, #15
 8001a6e:	4985      	ldr	r1, [pc, #532]	; (8001c84 <HAL_RCC_ClockConfig+0x240>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b83      	ldr	r3, [pc, #524]	; (8001c84 <HAL_RCC_ClockConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e184      	b.n	8001d92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d010      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	4b7b      	ldr	r3, [pc, #492]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d908      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4975      	ldr	r1, [pc, #468]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d010      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	4b70      	ldr	r3, [pc, #448]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d908      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ad2:	4b6d      	ldr	r3, [pc, #436]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	496a      	ldr	r1, [pc, #424]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	4b64      	ldr	r3, [pc, #400]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d908      	bls.n	8001b12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b00:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	495e      	ldr	r1, [pc, #376]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d010      	beq.n	8001b40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d908      	bls.n	8001b40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b2e:	4b56      	ldr	r3, [pc, #344]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4953      	ldr	r1, [pc, #332]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d908      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f023 020f 	bic.w	r2, r3, #15
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4947      	ldr	r1, [pc, #284]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d055      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b7a:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4940      	ldr	r1, [pc, #256]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b94:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d121      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0f6      	b.n	8001d92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bac:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d115      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0ea      	b.n	8001d92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0de      	b.n	8001d92 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0d6      	b.n	8001d92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f023 0207 	bic.w	r2, r3, #7
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4925      	ldr	r1, [pc, #148]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf6:	f7fe ff5f 	bl	8000ab8 <HAL_GetTick>
 8001bfa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfe:	f7fe ff5b 	bl	8000ab8 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0be      	b.n	8001d92 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d1eb      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d010      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d208      	bcs.n	8001c54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f023 020f 	bic.w	r2, r3, #15
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	490e      	ldr	r1, [pc, #56]	; (8001c88 <HAL_RCC_ClockConfig+0x244>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x240>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d214      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_RCC_ClockConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 020f 	bic.w	r2, r3, #15
 8001c6a:	4906      	ldr	r1, [pc, #24]	; (8001c84 <HAL_RCC_ClockConfig+0x240>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <HAL_RCC_ClockConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e086      	b.n	8001d92 <HAL_RCC_ClockConfig+0x34e>
 8001c84:	52002000 	.word	0x52002000
 8001c88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d010      	beq.n	8001cba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d208      	bcs.n	8001cba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ca8:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	4939      	ldr	r1, [pc, #228]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d208      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	492e      	ldr	r1, [pc, #184]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d208      	bcs.n	8001d16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4922      	ldr	r1, [pc, #136]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d208      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4917      	ldr	r1, [pc, #92]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d44:	f000 f834 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	4912      	ldr	r1, [pc, #72]	; (8001da0 <HAL_RCC_ClockConfig+0x35c>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_RCC_ClockConfig+0x358>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_RCC_ClockConfig+0x35c>)
 8001d6c:	5cd3      	ldrb	r3, [r2, r3]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_RCC_ClockConfig+0x360>)
 8001d7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_RCC_ClockConfig+0x364>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x368>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fe4c 	bl	8000a24 <HAL_InitTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	080099c8 	.word	0x080099c8
 8001da4:	24000004 	.word	0x24000004
 8001da8:	24000000 	.word	0x24000000
 8001dac:	24000008 	.word	0x24000008

08001db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001db6:	4bb3      	ldr	r3, [pc, #716]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dbe:	2b18      	cmp	r3, #24
 8001dc0:	f200 8155 	bhi.w	800206e <HAL_RCC_GetSysClockFreq+0x2be>
 8001dc4:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <HAL_RCC_GetSysClockFreq+0x1c>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001e31 	.word	0x08001e31
 8001dd0:	0800206f 	.word	0x0800206f
 8001dd4:	0800206f 	.word	0x0800206f
 8001dd8:	0800206f 	.word	0x0800206f
 8001ddc:	0800206f 	.word	0x0800206f
 8001de0:	0800206f 	.word	0x0800206f
 8001de4:	0800206f 	.word	0x0800206f
 8001de8:	0800206f 	.word	0x0800206f
 8001dec:	08001e57 	.word	0x08001e57
 8001df0:	0800206f 	.word	0x0800206f
 8001df4:	0800206f 	.word	0x0800206f
 8001df8:	0800206f 	.word	0x0800206f
 8001dfc:	0800206f 	.word	0x0800206f
 8001e00:	0800206f 	.word	0x0800206f
 8001e04:	0800206f 	.word	0x0800206f
 8001e08:	0800206f 	.word	0x0800206f
 8001e0c:	08001e5d 	.word	0x08001e5d
 8001e10:	0800206f 	.word	0x0800206f
 8001e14:	0800206f 	.word	0x0800206f
 8001e18:	0800206f 	.word	0x0800206f
 8001e1c:	0800206f 	.word	0x0800206f
 8001e20:	0800206f 	.word	0x0800206f
 8001e24:	0800206f 	.word	0x0800206f
 8001e28:	0800206f 	.word	0x0800206f
 8001e2c:	08001e63 	.word	0x08001e63
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e30:	4b94      	ldr	r3, [pc, #592]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e3c:	4b91      	ldr	r3, [pc, #580]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	4a90      	ldr	r2, [pc, #576]	; (8002088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001e4e:	e111      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e50:	4b8d      	ldr	r3, [pc, #564]	; (8002088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e52:	61bb      	str	r3, [r7, #24]
    break;
 8001e54:	e10e      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001e56:	4b8d      	ldr	r3, [pc, #564]	; (800208c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e58:	61bb      	str	r3, [r7, #24]
    break;
 8001e5a:	e10b      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001e5c:	4b8c      	ldr	r3, [pc, #560]	; (8002090 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e5e:	61bb      	str	r3, [r7, #24]
    break;
 8001e60:	e108      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e62:	4b88      	ldr	r3, [pc, #544]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e6c:	4b85      	ldr	r3, [pc, #532]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e78:	4b82      	ldr	r3, [pc, #520]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e82:	4b80      	ldr	r3, [pc, #512]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80e1 	beq.w	8002068 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	f000 8083 	beq.w	8001fb4 <HAL_RCC_GetSysClockFreq+0x204>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	f200 80a1 	bhi.w	8001ff8 <HAL_RCC_GetSysClockFreq+0x248>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x114>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d056      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001ec2:	e099      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ec4:	4b6f      	ldr	r3, [pc, #444]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d02d      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ed0:	4b6c      	ldr	r3, [pc, #432]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	4a6b      	ldr	r2, [pc, #428]	; (8002088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001efa:	4b62      	ldr	r3, [pc, #392]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001f2a:	e087      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002098 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f3e:	4b51      	ldr	r3, [pc, #324]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f6e:	e065      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800209c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f82:	4b40      	ldr	r3, [pc, #256]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fb2:	e043      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80020a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ff6:	e021      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002002:	eddf 6a26 	vldr	s13, [pc, #152]	; 800209c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800201a:	ed97 6a02 	vldr	s12, [r7, #8]
 800201e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800202a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800202e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800203a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	0a5b      	lsrs	r3, r3, #9
 8002042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002046:	3301      	adds	r3, #1
 8002048:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002054:	edd7 6a07 	vldr	s13, [r7, #28]
 8002058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002060:	ee17 3a90 	vmov	r3, s15
 8002064:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002066:	e005      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
    break;
 800206c:	e002      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002070:	61bb      	str	r3, [r7, #24]
    break;
 8002072:	bf00      	nop
  }

  return sysclockfreq;
 8002074:	69bb      	ldr	r3, [r7, #24]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	58024400 	.word	0x58024400
 8002088:	03d09000 	.word	0x03d09000
 800208c:	003d0900 	.word	0x003d0900
 8002090:	017d7840 	.word	0x017d7840
 8002094:	46000000 	.word	0x46000000
 8002098:	4c742400 	.word	0x4c742400
 800209c:	4a742400 	.word	0x4a742400
 80020a0:	4bbebc20 	.word	0x4bbebc20

080020a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80020aa:	f7ff fe81 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 80020ae:	4602      	mov	r2, r0
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	490f      	ldr	r1, [pc, #60]	; (80020f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80020bc:	5ccb      	ldrb	r3, [r1, r3]
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	fa22 f303 	lsr.w	r3, r2, r3
 80020de:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_RCC_GetHCLKFreq+0x58>)
 80020e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020e2:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_RCC_GetHCLKFreq+0x5c>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_RCC_GetHCLKFreq+0x58>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	58024400 	.word	0x58024400
 80020f8:	080099c8 	.word	0x080099c8
 80020fc:	24000004 	.word	0x24000004
 8002100:	24000000 	.word	0x24000000

08002104 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800210c:	2300      	movs	r3, #0
 800210e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002110:	2300      	movs	r3, #0
 8002112:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d03f      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002124:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002128:	d02a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800212a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800212e:	d824      	bhi.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002134:	d018      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800213a:	d81e      	bhi.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002144:	d007      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002146:	e018      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002148:	4bab      	ldr	r3, [pc, #684]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	4aaa      	ldr	r2, [pc, #680]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800214e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002154:	e015      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	2102      	movs	r1, #2
 800215c:	4618      	mov	r0, r3
 800215e:	f002 f823 	bl	80041a8 <RCCEx_PLL2_Config>
 8002162:	4603      	mov	r3, r0
 8002164:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002166:	e00c      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3324      	adds	r3, #36	; 0x24
 800216c:	2102      	movs	r1, #2
 800216e:	4618      	mov	r0, r3
 8002170:	f002 f8cc 	bl	800430c <RCCEx_PLL3_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002178:	e003      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	75fb      	strb	r3, [r7, #23]
      break;
 800217e:	e000      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002188:	4b9b      	ldr	r3, [pc, #620]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800218a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002194:	4998      	ldr	r1, [pc, #608]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	650b      	str	r3, [r1, #80]	; 0x50
 800219a:	e001      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d03d      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d826      	bhi.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80021b4:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80021b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ba:	bf00      	nop
 80021bc:	080021d1 	.word	0x080021d1
 80021c0:	080021df 	.word	0x080021df
 80021c4:	080021f1 	.word	0x080021f1
 80021c8:	08002209 	.word	0x08002209
 80021cc:	08002209 	.word	0x08002209
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021d0:	4b89      	ldr	r3, [pc, #548]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	4a88      	ldr	r2, [pc, #544]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021dc:	e015      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 ffdf 	bl	80041a8 <RCCEx_PLL2_Config>
 80021ea:	4603      	mov	r3, r0
 80021ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021ee:	e00c      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3324      	adds	r3, #36	; 0x24
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 f888 	bl	800430c <RCCEx_PLL3_Config>
 80021fc:	4603      	mov	r3, r0
 80021fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002200:	e003      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
      break;
 8002206:	e000      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002210:	4b79      	ldr	r3, [pc, #484]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002214:	f023 0207 	bic.w	r2, r3, #7
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4976      	ldr	r1, [pc, #472]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	650b      	str	r3, [r1, #80]	; 0x50
 8002222:	e001      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002230:	2b00      	cmp	r3, #0
 8002232:	d042      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223c:	d02b      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800223e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002242:	d825      	bhi.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002244:	2bc0      	cmp	r3, #192	; 0xc0
 8002246:	d028      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002248:	2bc0      	cmp	r3, #192	; 0xc0
 800224a:	d821      	bhi.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800224c:	2b80      	cmp	r3, #128	; 0x80
 800224e:	d016      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d81d      	bhi.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002258:	2b40      	cmp	r3, #64	; 0x40
 800225a:	d007      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800225c:	e018      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800225e:	4b66      	ldr	r3, [pc, #408]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800226a:	e017      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f001 ff98 	bl	80041a8 <RCCEx_PLL2_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800227c:	e00e      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3324      	adds	r3, #36	; 0x24
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f002 f841 	bl	800430c <RCCEx_PLL3_Config>
 800228a:	4603      	mov	r3, r0
 800228c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800228e:	e005      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	75fb      	strb	r3, [r7, #23]
      break;
 8002294:	e002      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800229a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80022a2:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	4952      	ldr	r1, [pc, #328]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	650b      	str	r3, [r1, #80]	; 0x50
 80022b4:	e001      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d049      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80022cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022d0:	d030      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80022d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022d6:	d82a      	bhi.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80022d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80022dc:	d02c      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80022de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80022e2:	d824      	bhi.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80022e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e8:	d018      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80022ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ee:	d81e      	bhi.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80022f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022f8:	d007      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80022fa:	e018      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022fc:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	4a3d      	ldr	r2, [pc, #244]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002308:	e017      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f001 ff49 	bl	80041a8 <RCCEx_PLL2_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800231a:	e00e      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3324      	adds	r3, #36	; 0x24
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fff2 	bl	800430c <RCCEx_PLL3_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800232c:	e005      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
      break;
 8002332:	e002      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002334:	bf00      	nop
 8002336:	e000      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002340:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800234e:	492a      	ldr	r1, [pc, #168]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	658b      	str	r3, [r1, #88]	; 0x58
 8002354:	e001      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04c      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800236c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002370:	d030      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002376:	d82a      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002378:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800237c:	d02c      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800237e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002382:	d824      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002388:	d018      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800238a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800238e:	d81e      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d007      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800239a:	e018      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023a8:	e017      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 fef9 	bl	80041a8 <RCCEx_PLL2_Config>
 80023b6:	4603      	mov	r3, r0
 80023b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80023ba:	e00e      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3324      	adds	r3, #36	; 0x24
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 ffa2 	bl	800430c <RCCEx_PLL3_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023cc:	e005      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
      break;
 80023d2:	e002      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80023d4:	bf00      	nop
 80023d6:	e000      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80023d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10d      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80023ee:	4902      	ldr	r1, [pc, #8]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	658b      	str	r3, [r1, #88]	; 0x58
 80023f4:	e004      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80023f6:	bf00      	nop
 80023f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d032      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002410:	2b30      	cmp	r3, #48	; 0x30
 8002412:	d01c      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002414:	2b30      	cmp	r3, #48	; 0x30
 8002416:	d817      	bhi.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002418:	2b20      	cmp	r3, #32
 800241a:	d00c      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800241c:	2b20      	cmp	r3, #32
 800241e:	d813      	bhi.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d016      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002424:	2b10      	cmp	r3, #16
 8002426:	d10f      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002428:	4bb1      	ldr	r3, [pc, #708]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	4ab0      	ldr	r2, [pc, #704]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800242e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002434:	e00e      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f001 feb3 	bl	80041a8 <RCCEx_PLL2_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002446:	e005      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
      break;
 800244c:	e002      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800245a:	4ba5      	ldr	r3, [pc, #660]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	49a2      	ldr	r1, [pc, #648]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002468:	4313      	orrs	r3, r2
 800246a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800246c:	e001      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d047      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002486:	d030      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800248c:	d82a      	bhi.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800248e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002492:	d02c      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002498:	d824      	bhi.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249e:	d018      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a4:	d81e      	bhi.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80024aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ae:	d007      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80024b0:	e018      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024b2:	4b8f      	ldr	r3, [pc, #572]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	4a8e      	ldr	r2, [pc, #568]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80024be:	e017      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f001 fe6e 	bl	80041a8 <RCCEx_PLL2_Config>
 80024cc:	4603      	mov	r3, r0
 80024ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80024d0:	e00e      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3324      	adds	r3, #36	; 0x24
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 ff17 	bl	800430c <RCCEx_PLL3_Config>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	75fb      	strb	r3, [r7, #23]
      break;
 80024e8:	e002      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80024ea:	bf00      	nop
 80024ec:	e000      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80024ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80024f6:	4b7e      	ldr	r3, [pc, #504]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80024f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002502:	497b      	ldr	r1, [pc, #492]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002504:	4313      	orrs	r3, r2
 8002506:	650b      	str	r3, [r1, #80]	; 0x50
 8002508:	e001      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d049      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800251e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002522:	d02e      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002528:	d828      	bhi.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800252a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800252e:	d02a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002534:	d822      	bhi.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002536:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800253a:	d026      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800253c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002540:	d81c      	bhi.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002546:	d010      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800254c:	d816      	bhi.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01d      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002556:	d111      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	2101      	movs	r1, #1
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fe22 	bl	80041a8 <RCCEx_PLL2_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002568:	e012      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3324      	adds	r3, #36	; 0x24
 800256e:	2101      	movs	r1, #1
 8002570:	4618      	mov	r0, r3
 8002572:	f001 fecb 	bl	800430c <RCCEx_PLL3_Config>
 8002576:	4603      	mov	r3, r0
 8002578:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800257a:	e009      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	75fb      	strb	r3, [r7, #23]
      break;
 8002580:	e006      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002582:	bf00      	nop
 8002584:	e004      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002586:	bf00      	nop
 8002588:	e002      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800258e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002596:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a2:	4953      	ldr	r1, [pc, #332]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	650b      	str	r3, [r1, #80]	; 0x50
 80025a8:	e001      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d04b      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c4:	d02e      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80025c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ca:	d828      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d0:	d02a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d6:	d822      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80025d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025dc:	d026      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80025de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025e2:	d81c      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80025e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e8:	d010      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80025ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ee:	d816      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01d      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80025f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025f8:	d111      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2101      	movs	r1, #1
 8002600:	4618      	mov	r0, r3
 8002602:	f001 fdd1 	bl	80041a8 <RCCEx_PLL2_Config>
 8002606:	4603      	mov	r3, r0
 8002608:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800260a:	e012      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3324      	adds	r3, #36	; 0x24
 8002610:	2101      	movs	r1, #1
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fe7a 	bl	800430c <RCCEx_PLL3_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800261c:	e009      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
      break;
 8002622:	e006      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002624:	bf00      	nop
 8002626:	e004      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002628:	bf00      	nop
 800262a:	e002      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002646:	492a      	ldr	r1, [pc, #168]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002648:	4313      	orrs	r3, r2
 800264a:	658b      	str	r3, [r1, #88]	; 0x58
 800264c:	e001      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
 8002650:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d022      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00e      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266a:	d108      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f001 fd98 	bl	80041a8 <RCCEx_PLL2_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 800267c:	e003      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
      break;
 8002682:	e000      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	4915      	ldr	r1, [pc, #84]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800269a:	4313      	orrs	r3, r2
 800269c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800269e:	e001      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d031      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b8:	d00e      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80026ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026be:	d814      	bhi.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d017      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80026c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026c8:	d10f      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026d6:	e00e      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	2101      	movs	r1, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 fd62 	bl	80041a8 <RCCEx_PLL2_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026e8:	e005      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
      break;
 80026ee:	e002      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80026f0:	58024400 	.word	0x58024400
      break;
 80026f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026fc:	4bbc      	ldr	r3, [pc, #752]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	49b9      	ldr	r1, [pc, #740]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800270a:	4313      	orrs	r3, r2
 800270c:	650b      	str	r3, [r1, #80]	; 0x50
 800270e:	e001      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d032      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	2b03      	cmp	r3, #3
 8002726:	d81b      	bhi.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	08002767 	.word	0x08002767
 8002734:	08002741 	.word	0x08002741
 8002738:	0800274f 	.word	0x0800274f
 800273c:	08002767 	.word	0x08002767
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002740:	4bab      	ldr	r3, [pc, #684]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	4aaa      	ldr	r2, [pc, #680]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800274c:	e00c      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	2102      	movs	r1, #2
 8002754:	4618      	mov	r0, r3
 8002756:	f001 fd27 	bl	80041a8 <RCCEx_PLL2_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800275e:	e003      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
      break;
 8002764:	e000      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8002766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800276e:	4ba0      	ldr	r3, [pc, #640]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	499d      	ldr	r1, [pc, #628]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800277c:	4313      	orrs	r3, r2
 800277e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002780:	e001      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8086 	beq.w	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002794:	4b97      	ldr	r3, [pc, #604]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a96      	ldr	r2, [pc, #600]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a0:	f7fe f98a 	bl	8000ab8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a6:	e009      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a8:	f7fe f986 	bl	8000ab8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d902      	bls.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	75fb      	strb	r3, [r7, #23]
        break;
 80027ba:	e005      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027bc:	4b8d      	ldr	r3, [pc, #564]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ef      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d166      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80027ce:	4b88      	ldr	r3, [pc, #544]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80027d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027d8:	4053      	eors	r3, r2
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d013      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e2:	4b83      	ldr	r3, [pc, #524]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ec:	4b80      	ldr	r3, [pc, #512]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a7f      	ldr	r2, [pc, #508]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027f8:	4b7d      	ldr	r3, [pc, #500]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a7c      	ldr	r2, [pc, #496]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002804:	4a7a      	ldr	r2, [pc, #488]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002814:	d115      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe f94f 	bl	8000ab8 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281c:	e00b      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe f94b 	bl	8000ab8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d902      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	75fb      	strb	r3, [r7, #23]
            break;
 8002834:	e005      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002836:	4b6e      	ldr	r3, [pc, #440]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ed      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d126      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002856:	d10d      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002858:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002866:	0919      	lsrs	r1, r3, #4
 8002868:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 800286a:	400b      	ands	r3, r1
 800286c:	4960      	ldr	r1, [pc, #384]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800286e:	4313      	orrs	r3, r2
 8002870:	610b      	str	r3, [r1, #16]
 8002872:	e005      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002874:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	4a5d      	ldr	r2, [pc, #372]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800287a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800287e:	6113      	str	r3, [r2, #16]
 8002880:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002882:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800288a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288e:	4958      	ldr	r1, [pc, #352]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002890:	4313      	orrs	r3, r2
 8002892:	670b      	str	r3, [r1, #112]	; 0x70
 8002894:	e004      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	75bb      	strb	r3, [r7, #22]
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d07e      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b0:	2b28      	cmp	r3, #40	; 0x28
 80028b2:	d867      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x880>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	0800298b 	.word	0x0800298b
 80028c0:	08002985 	.word	0x08002985
 80028c4:	08002985 	.word	0x08002985
 80028c8:	08002985 	.word	0x08002985
 80028cc:	08002985 	.word	0x08002985
 80028d0:	08002985 	.word	0x08002985
 80028d4:	08002985 	.word	0x08002985
 80028d8:	08002985 	.word	0x08002985
 80028dc:	08002961 	.word	0x08002961
 80028e0:	08002985 	.word	0x08002985
 80028e4:	08002985 	.word	0x08002985
 80028e8:	08002985 	.word	0x08002985
 80028ec:	08002985 	.word	0x08002985
 80028f0:	08002985 	.word	0x08002985
 80028f4:	08002985 	.word	0x08002985
 80028f8:	08002985 	.word	0x08002985
 80028fc:	08002973 	.word	0x08002973
 8002900:	08002985 	.word	0x08002985
 8002904:	08002985 	.word	0x08002985
 8002908:	08002985 	.word	0x08002985
 800290c:	08002985 	.word	0x08002985
 8002910:	08002985 	.word	0x08002985
 8002914:	08002985 	.word	0x08002985
 8002918:	08002985 	.word	0x08002985
 800291c:	0800298b 	.word	0x0800298b
 8002920:	08002985 	.word	0x08002985
 8002924:	08002985 	.word	0x08002985
 8002928:	08002985 	.word	0x08002985
 800292c:	08002985 	.word	0x08002985
 8002930:	08002985 	.word	0x08002985
 8002934:	08002985 	.word	0x08002985
 8002938:	08002985 	.word	0x08002985
 800293c:	0800298b 	.word	0x0800298b
 8002940:	08002985 	.word	0x08002985
 8002944:	08002985 	.word	0x08002985
 8002948:	08002985 	.word	0x08002985
 800294c:	08002985 	.word	0x08002985
 8002950:	08002985 	.word	0x08002985
 8002954:	08002985 	.word	0x08002985
 8002958:	08002985 	.word	0x08002985
 800295c:	0800298b 	.word	0x0800298b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fc1e 	bl	80041a8 <RCCEx_PLL2_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002970:	e00c      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3324      	adds	r3, #36	; 0x24
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fcc7 	bl	800430c <RCCEx_PLL3_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002982:	e003      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]
      break;
 8002988:	e000      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 800298a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800299e:	4914      	ldr	r1, [pc, #80]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	654b      	str	r3, [r1, #84]	; 0x54
 80029a4:	e001      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d03e      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d827      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	08002a15 	.word	0x08002a15
 80029c8:	080029dd 	.word	0x080029dd
 80029cc:	080029fd 	.word	0x080029fd
 80029d0:	08002a15 	.word	0x08002a15
 80029d4:	08002a15 	.word	0x08002a15
 80029d8:	08002a15 	.word	0x08002a15
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	2101      	movs	r1, #1
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fbe0 	bl	80041a8 <RCCEx_PLL2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80029ec:	e013      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80029ee:	bf00      	nop
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58024800 	.word	0x58024800
 80029f8:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3324      	adds	r3, #36	; 0x24
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fc82 	bl	800430c <RCCEx_PLL3_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002a0c:	e003      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
      break;
 8002a12:	e000      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002a1c:	4b9f      	ldr	r3, [pc, #636]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f023 0207 	bic.w	r2, r3, #7
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a28:	499c      	ldr	r1, [pc, #624]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	654b      	str	r3, [r1, #84]	; 0x54
 8002a2e:	e001      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d039      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d820      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002a4a:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002a93 	.word	0x08002a93
 8002a54:	08002a69 	.word	0x08002a69
 8002a58:	08002a7b 	.word	0x08002a7b
 8002a5c:	08002a93 	.word	0x08002a93
 8002a60:	08002a93 	.word	0x08002a93
 8002a64:	08002a93 	.word	0x08002a93
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 fb9a 	bl	80041a8 <RCCEx_PLL2_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a78:	e00c      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3324      	adds	r3, #36	; 0x24
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 fc43 	bl	800430c <RCCEx_PLL3_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a8a:	e003      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a90:	e000      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8002a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a9a:	4b80      	ldr	r3, [pc, #512]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f023 0207 	bic.w	r2, r3, #7
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa8:	497c      	ldr	r1, [pc, #496]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	658b      	str	r3, [r1, #88]	; 0x58
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d04b      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aca:	d02e      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8002acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad0:	d828      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d02a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d822      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002ade:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ae2:	d026      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8002ae4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ae8:	d81c      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aee:	d010      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af4:	d816      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01d      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8002afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002afe:	d111      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 fb4e 	bl	80041a8 <RCCEx_PLL2_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002b10:	e012      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3324      	adds	r3, #36	; 0x24
 8002b16:	2102      	movs	r1, #2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 fbf7 	bl	800430c <RCCEx_PLL3_Config>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002b22:	e009      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	75fb      	strb	r3, [r7, #23]
      break;
 8002b28:	e006      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e004      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b3e:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	4953      	ldr	r1, [pc, #332]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	654b      	str	r3, [r1, #84]	; 0x54
 8002b52:	e001      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d04b      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b6e:	d02e      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8002b70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b74:	d828      	bhi.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7a:	d02a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8002b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b80:	d822      	bhi.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002b82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b86:	d026      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8002b88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b8c:	d81c      	bhi.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b92:	d010      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b98:	d816      	bhi.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01d      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d111      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 fafc 	bl	80041a8 <RCCEx_PLL2_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002bb4:	e012      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3324      	adds	r3, #36	; 0x24
 8002bba:	2102      	movs	r1, #2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 fba5 	bl	800430c <RCCEx_PLL3_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002bc6:	e009      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	75fb      	strb	r3, [r7, #23]
      break;
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e004      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e002      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002be2:	4b2e      	ldr	r3, [pc, #184]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bf0:	492a      	ldr	r1, [pc, #168]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	658b      	str	r3, [r1, #88]	; 0x58
 8002bf6:	e001      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d04d      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c12:	d02e      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8002c14:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c18:	d828      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1e:	d02a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c24:	d822      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002c26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c2a:	d026      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8002c2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c30:	d81c      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c36:	d010      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8002c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3c:	d816      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01d      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8002c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c46:	d111      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 faaa 	bl	80041a8 <RCCEx_PLL2_Config>
 8002c54:	4603      	mov	r3, r0
 8002c56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c58:	e012      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3324      	adds	r3, #36	; 0x24
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 fb53 	bl	800430c <RCCEx_PLL3_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c6a:	e009      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c70:	e006      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002c72:	bf00      	nop
 8002c74:	e004      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8002c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c94:	4901      	ldr	r1, [pc, #4]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	658b      	str	r3, [r1, #88]	; 0x58
 8002c9a:	e003      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8002c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cba:	d10a      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3324      	adds	r3, #36	; 0x24
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 fb22 	bl	800430c <RCCEx_PLL3_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002cd2:	4b8c      	ldr	r3, [pc, #560]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce0:	4988      	ldr	r1, [pc, #544]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfc:	d10a      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3324      	adds	r3, #36	; 0x24
 8002d02:	2102      	movs	r1, #2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fb01 	bl	800430c <RCCEx_PLL3_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d14:	4b7b      	ldr	r3, [pc, #492]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d22:	4978      	ldr	r1, [pc, #480]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d034      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d3e:	d01d      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d44:	d817      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8002d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4e:	d009      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8002d50:	e011      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 fa25 	bl	80041a8 <RCCEx_PLL2_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d62:	e00c      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3324      	adds	r3, #36	; 0x24
 8002d68:	2102      	movs	r1, #2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 face 	bl	800430c <RCCEx_PLL3_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d74:	e003      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
      break;
 8002d7a:	e000      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8002d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d84:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d92:	495c      	ldr	r1, [pc, #368]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	658b      	str	r3, [r1, #88]	; 0x58
 8002d98:	e001      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d033      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002db4:	d01c      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8002db6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dba:	d816      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8002dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc0:	d003      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8002dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dc6:	d007      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8002dc8:	e00f      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dca:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	4a4d      	ldr	r2, [pc, #308]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002dd6:	e00c      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3324      	adds	r3, #36	; 0x24
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 fa94 	bl	800430c <RCCEx_PLL3_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002de8:	e003      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
      break;
 8002dee:	e000      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8002df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df8:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	493f      	ldr	r1, [pc, #252]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	654b      	str	r3, [r1, #84]	; 0x54
 8002e0c:	e001      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d029      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2a:	d007      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8002e2c:	e00f      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	4a34      	ldr	r2, [pc, #208]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2102      	movs	r1, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 f9b0 	bl	80041a8 <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e4c:	e002      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
      break;
 8002e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e66:	4927      	ldr	r1, [pc, #156]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e6c:	e001      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3324      	adds	r3, #36	; 0x24
 8002e82:	2102      	movs	r1, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fa41 	bl	800430c <RCCEx_PLL3_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d035      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eaa:	d017      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8002eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eb0:	d811      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d80b      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d010      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8002ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002ed4:	e007      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8002eda:	e004      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8002edc:	bf00      	nop
 8002ede:	e002      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efa:	4902      	ldr	r1, [pc, #8]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	654b      	str	r3, [r1, #84]	; 0x54
 8002f00:	e004      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8002f02:	bf00      	nop
 8002f04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f24:	492e      	ldr	r1, [pc, #184]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f44:	4926      	ldr	r1, [pc, #152]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f56:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f62:	491f      	ldr	r1, [pc, #124]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f7e:	6113      	str	r3, [r2, #16]
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f8a:	4915      	ldr	r1, [pc, #84]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da08      	bge.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc4:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002fca:	7dbb      	ldrb	r3, [r7, #22]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	58024400 	.word	0x58024400

08002fe4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b090      	sub	sp, #64	; 0x40
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff2:	f040 8095 	bne.w	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002ff6:	4bae      	ldr	r3, [pc, #696]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8002ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	2b04      	cmp	r3, #4
 8003004:	f200 8088 	bhi.w	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003008:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300e:	bf00      	nop
 8003010:	08003025 	.word	0x08003025
 8003014:	0800304d 	.word	0x0800304d
 8003018:	08003075 	.word	0x08003075
 800301c:	08003111 	.word	0x08003111
 8003020:	0800309d 	.word	0x0800309d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003024:	4ba2      	ldr	r3, [pc, #648]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003030:	d108      	bne.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003036:	4618      	mov	r0, r3
 8003038:	f000 ff64 	bl	8003f04 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003040:	f000 bc95 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003048:	f000 bc91 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800304c:	4b98      	ldr	r3, [pc, #608]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003058:	d108      	bne.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800305a:	f107 0318 	add.w	r3, r7, #24
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fca8 	bl	80039b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003068:	f000 bc81 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003070:	f000 bc7d 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003074:	4b8e      	ldr	r3, [pc, #568]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800307c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003080:	d108      	bne.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fde8 	bl	8003c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003090:	f000 bc6d 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003098:	f000 bc69 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800309c:	4b84      	ldr	r3, [pc, #528]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800309e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80030a6:	4b82      	ldr	r3, [pc, #520]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d10c      	bne.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030b8:	4b7d      	ldr	r3, [pc, #500]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	08db      	lsrs	r3, r3, #3
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	4a7c      	ldr	r2, [pc, #496]	; (80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ca:	e01f      	b.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80030cc:	4b78      	ldr	r3, [pc, #480]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d8:	d106      	bne.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80030da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e0:	d102      	bne.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80030e2:	4b75      	ldr	r3, [pc, #468]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80030e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e6:	e011      	b.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80030e8:	4b71      	ldr	r3, [pc, #452]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f4:	d106      	bne.n	8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80030f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030fc:	d102      	bne.n	8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80030fe:	4b6f      	ldr	r3, [pc, #444]	; (80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003102:	e003      	b.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003108:	f000 bc31 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800310c:	f000 bc2f 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003110:	4b6b      	ldr	r3, [pc, #428]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003114:	f000 bc2b 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800311c:	f000 bc27 	b.w	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003126:	f040 8095 	bne.w	8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800312a:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800312c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003132:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313a:	d04d      	beq.n	80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003142:	f200 8084 	bhi.w	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	2bc0      	cmp	r3, #192	; 0xc0
 800314a:	d07d      	beq.n	8003248 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	2bc0      	cmp	r3, #192	; 0xc0
 8003150:	d87d      	bhi.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d02d      	beq.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	2b80      	cmp	r3, #128	; 0x80
 800315c:	d877      	bhi.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	2b40      	cmp	r3, #64	; 0x40
 8003168:	d012      	beq.n	8003190 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800316a:	e070      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800316c:	4b50      	ldr	r3, [pc, #320]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003178:	d107      	bne.n	800318a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800317a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fec0 	bl	8003f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003188:	e3f1      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800318e:	e3ee      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003190:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319c:	d107      	bne.n	80031ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800319e:	f107 0318 	add.w	r3, r7, #24
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fc06 	bl	80039b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80031ac:	e3df      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031b2:	e3dc      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80031b4:	4b3e      	ldr	r3, [pc, #248]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c0:	d107      	bne.n	80031d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fd48 	bl	8003c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80031d0:	e3cd      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031d6:	e3ca      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80031d8:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80031e2:	4b33      	ldr	r3, [pc, #204]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d10c      	bne.n	8003208 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80031ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031f4:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003206:	e01e      	b.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003208:	4b29      	ldr	r3, [pc, #164]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003214:	d106      	bne.n	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800321c:	d102      	bne.n	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003222:	e010      	b.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003230:	d106      	bne.n	8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003238:	d102      	bne.n	8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800323c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323e:	e002      	b.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003244:	e393      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003246:	e392      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800324c:	e38f      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003252:	e38c      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325a:	f040 80a7 	bne.w	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800325e:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003266:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800326e:	d05f      	beq.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003276:	f200 8096 	bhi.w	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003280:	f000 808e 	beq.w	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800328a:	f200 808c 	bhi.w	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003294:	d03a      	beq.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329c:	f200 8083 	bhi.w	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ac:	d01c      	beq.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80032ae:	e07a      	b.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80032b0:	58024400 	.word	0x58024400
 80032b4:	03d09000 	.word	0x03d09000
 80032b8:	003d0900 	.word	0x003d0900
 80032bc:	017d7840 	.word	0x017d7840
 80032c0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80032c4:	4baa      	ldr	r3, [pc, #680]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032d0:	d107      	bne.n	80032e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80032d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fe14 	bl	8003f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80032e0:	e345      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032e6:	e342      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80032e8:	4ba1      	ldr	r3, [pc, #644]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f4:	d107      	bne.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80032f6:	f107 0318 	add.w	r3, r7, #24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fb5a 	bl	80039b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003304:	e333      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800330a:	e330      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800330c:	4b98      	ldr	r3, [pc, #608]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003318:	d107      	bne.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800331a:	f107 030c 	add.w	r3, r7, #12
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fc9c 	bl	8003c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003328:	e321      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800332e:	e31e      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003330:	4b8f      	ldr	r3, [pc, #572]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003334:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003338:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800333a:	4b8d      	ldr	r3, [pc, #564]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b04      	cmp	r3, #4
 8003344:	d10c      	bne.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800334c:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	4a87      	ldr	r2, [pc, #540]	; (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800335e:	e01e      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003360:	4b83      	ldr	r3, [pc, #524]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336c:	d106      	bne.n	800337c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003374:	d102      	bne.n	800337c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003376:	4b80      	ldr	r3, [pc, #512]	; (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337a:	e010      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800337c:	4b7c      	ldr	r3, [pc, #496]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003388:	d106      	bne.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003390:	d102      	bne.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003392:	4b7a      	ldr	r3, [pc, #488]	; (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8003394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003396:	e002      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800339c:	e2e7      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800339e:	e2e6      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80033a0:	4b77      	ldr	r3, [pc, #476]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033a4:	e2e3      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033aa:	e2e0      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b2:	f040 809c 	bne.w	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80033b6:	4b6e      	ldr	r3, [pc, #440]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80033be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c6:	d054      	beq.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ce:	f200 808b 	bhi.w	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033d8:	f000 8083 	beq.w	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033e2:	f200 8081 	bhi.w	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ec:	d02f      	beq.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033f4:	d878      	bhi.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003402:	d012      	beq.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003404:	e070      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003406:	4b5a      	ldr	r3, [pc, #360]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003412:	d107      	bne.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fd73 	bl	8003f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003422:	e2a4      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003428:	e2a1      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003436:	d107      	bne.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003438:	f107 0318 	add.w	r3, r7, #24
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fab9 	bl	80039b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003446:	e292      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800344c:	e28f      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800344e:	4b48      	ldr	r3, [pc, #288]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800345a:	d107      	bne.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fbfb 	bl	8003c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800346a:	e280      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003470:	e27d      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003472:	4b3f      	ldr	r3, [pc, #252]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800347a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800347c:	4b3c      	ldr	r3, [pc, #240]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d10c      	bne.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800348e:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	08db      	lsrs	r3, r3, #3
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	4a36      	ldr	r2, [pc, #216]	; (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a0:	e01e      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ae:	d106      	bne.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80034b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b6:	d102      	bne.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80034b8:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034bc:	e010      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80034be:	4b2c      	ldr	r3, [pc, #176]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ca:	d106      	bne.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80034cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d2:	d102      	bne.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80034d4:	4b29      	ldr	r3, [pc, #164]	; (800357c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80034de:	e246      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80034e0:	e245      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80034e2:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034e6:	e242      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034ec:	e23f      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f4:	f040 80a8 	bne.w	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003508:	d060      	beq.n	80035cc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003510:	f200 8097 	bhi.w	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003516:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800351a:	f000 808f 	beq.w	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003520:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003524:	f200 808d 	bhi.w	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	d03b      	beq.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003536:	f200 8084 	bhi.w	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003546:	d01d      	beq.n	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8003548:	e07b      	b.n	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003556:	d107      	bne.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fcd1 	bl	8003f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003566:	e202      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800356c:	e1ff      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800356e:	bf00      	nop
 8003570:	58024400 	.word	0x58024400
 8003574:	03d09000 	.word	0x03d09000
 8003578:	003d0900 	.word	0x003d0900
 800357c:	017d7840 	.word	0x017d7840
 8003580:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003584:	4ba3      	ldr	r3, [pc, #652]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800358c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003590:	d107      	bne.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003592:	f107 0318 	add.w	r3, r7, #24
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa0c 	bl	80039b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80035a0:	e1e5      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035a6:	e1e2      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80035a8:	4b9a      	ldr	r3, [pc, #616]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b4:	d107      	bne.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fb4e 	bl	8003c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80035c4:	e1d3      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035ca:	e1d0      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80035cc:	4b91      	ldr	r3, [pc, #580]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80035ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80035d6:	4b8f      	ldr	r3, [pc, #572]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d10c      	bne.n	80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80035e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035e8:	4b8a      	ldr	r3, [pc, #552]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	08db      	lsrs	r3, r3, #3
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	4a89      	ldr	r2, [pc, #548]	; (8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fa:	e01e      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80035fc:	4b85      	ldr	r3, [pc, #532]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003608:	d106      	bne.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003610:	d102      	bne.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003612:	4b82      	ldr	r3, [pc, #520]	; (800381c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003616:	e010      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003618:	4b7e      	ldr	r3, [pc, #504]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003624:	d106      	bne.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8003626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362c:	d102      	bne.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800362e:	4b7c      	ldr	r3, [pc, #496]	; (8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003632:	e002      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003638:	e199      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800363a:	e198      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800363c:	4b79      	ldr	r3, [pc, #484]	; (8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003640:	e195      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003646:	e192      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800364e:	d173      	bne.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003650:	4b70      	ldr	r3, [pc, #448]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003658:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003660:	d02f      	beq.n	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003668:	d863      	bhi.n	8003732 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003676:	d012      	beq.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8003678:	e05b      	b.n	8003732 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800367a:	4b66      	ldr	r3, [pc, #408]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003686:	d107      	bne.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003688:	f107 0318 	add.w	r3, r7, #24
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f991 	bl	80039b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003696:	e16a      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800369c:	e167      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800369e:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036aa:	d107      	bne.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fad3 	bl	8003c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80036ba:	e158      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036c0:	e155      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80036c2:	4b54      	ldr	r3, [pc, #336]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036ca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80036cc:	4b51      	ldr	r3, [pc, #324]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d10c      	bne.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80036d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036de:	4b4d      	ldr	r3, [pc, #308]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	08db      	lsrs	r3, r3, #3
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	4a4b      	ldr	r2, [pc, #300]	; (8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f0:	e01e      	b.n	8003730 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80036f2:	4b48      	ldr	r3, [pc, #288]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fe:	d106      	bne.n	800370e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003706:	d102      	bne.n	800370e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003708:	4b44      	ldr	r3, [pc, #272]	; (800381c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800370a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370c:	e010      	b.n	8003730 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800370e:	4b41      	ldr	r3, [pc, #260]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800371a:	d106      	bne.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800371c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003722:	d102      	bne.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003724:	4b3e      	ldr	r3, [pc, #248]	; (8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003728:	e002      	b.n	8003730 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800372e:	e11e      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003730:	e11d      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003736:	e11a      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373e:	d133      	bne.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003740:	4b34      	ldr	r3, [pc, #208]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003756:	d012      	beq.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8003758:	e023      	b.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800375a:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003766:	d107      	bne.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fbc9 	bl	8003f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003776:	e0fa      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800377c:	e0f7      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800377e:	4b25      	ldr	r3, [pc, #148]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378a:	d107      	bne.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800378c:	f107 0318 	add.w	r3, r7, #24
 8003790:	4618      	mov	r0, r3
 8003792:	f000 f90f 	bl	80039b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800379a:	e0e8      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037a0:	e0e5      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037a6:	e0e2      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ae:	f040 808f 	bne.w	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80037ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80037bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c2:	d075      	beq.n	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ca:	d87e      	bhi.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d060      	beq.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80037d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d876      	bhi.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037e2:	d045      	beq.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037ea:	d86e      	bhi.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f2:	d02b      	beq.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037fa:	d866      	bhi.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8003802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003808:	d00e      	beq.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800380a:	e05e      	b.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800380c:	f000 f8bc 	bl	8003988 <HAL_RCCEx_GetD3PCLK1Freq>
 8003810:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8003812:	e0ac      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003814:	58024400 	.word	0x58024400
 8003818:	03d09000 	.word	0x03d09000
 800381c:	003d0900 	.word	0x003d0900
 8003820:	017d7840 	.word	0x017d7840
 8003824:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003834:	d107      	bne.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003836:	f107 0318 	add.w	r3, r7, #24
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f8ba 	bl	80039b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003844:	e093      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800384a:	e090      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800384c:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003858:	d107      	bne.n	800386a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f9fc 	bl	8003c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003868:	e081      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800386e:	e07e      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b04      	cmp	r3, #4
 800387a:	d109      	bne.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800387c:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	4a3d      	ldr	r2, [pc, #244]	; (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
 800388c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800388e:	e06e      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003894:	e06b      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a2:	d102      	bne.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80038a8:	e061      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038ae:	e05e      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80038b0:	4b31      	ldr	r3, [pc, #196]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038bc:	d102      	bne.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80038c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80038c2:	e054      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038c8:	e051      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038ce:	e04e      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d6:	d148      	bne.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80038d8:	4b27      	ldr	r3, [pc, #156]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e8:	d02a      	beq.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f0:	d838      	bhi.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fe:	d00d      	beq.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8003900:	e030      	b.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003902:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800390e:	d102      	bne.n	8003916 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8003910:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003912:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003914:	e02b      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800391a:	e028      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003928:	d107      	bne.n	800393a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800392a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fae8 	bl	8003f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003938:	e019      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800393e:	e016      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394c:	d107      	bne.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800394e:	f107 0318 	add.w	r3, r7, #24
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f82e 	bl	80039b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800395c:	e007      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003962:	e004      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003968:	e001      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003970:	4618      	mov	r0, r3
 8003972:	3740      	adds	r7, #64	; 0x40
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	58024400 	.word	0x58024400
 800397c:	03d09000 	.word	0x03d09000
 8003980:	003d0900 	.word	0x003d0900
 8003984:	017d7840 	.word	0x017d7840

08003988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800398c:	f7fe fb8a 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4904      	ldr	r1, [pc, #16]	; (80039b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	58024400 	.word	0x58024400
 80039b0:	080099c8 	.word	0x080099c8

080039b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	; 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039bc:	4ba1      	ldr	r3, [pc, #644]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80039c6:	4b9f      	ldr	r3, [pc, #636]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	0b1b      	lsrs	r3, r3, #12
 80039cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039d2:	4b9c      	ldr	r3, [pc, #624]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80039de:	4b99      	ldr	r3, [pc, #612]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	08db      	lsrs	r3, r3, #3
 80039e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8111 	beq.w	8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	f000 8083 	beq.w	8003b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	f200 80a1 	bhi.w	8003b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d056      	beq.n	8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a1e:	e099      	b.n	8003b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a20:	4b88      	ldr	r3, [pc, #544]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02d      	beq.n	8003a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a2c:	4b85      	ldr	r3, [pc, #532]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	4a84      	ldr	r2, [pc, #528]	; (8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a56:	4b7b      	ldr	r3, [pc, #492]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a86:	e087      	b.n	8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9a:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aca:	e065      	b.n	8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ade:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003af2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b0e:	e043      	b.n	8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b22:	4b48      	ldr	r3, [pc, #288]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b52:	e021      	b.n	8003b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003b98:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	0a5b      	lsrs	r3, r3, #9
 8003b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bbe:	ee17 2a90 	vmov	r2, s15
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003bc6:	4b1f      	ldr	r3, [pc, #124]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	0c1b      	lsrs	r3, r3, #16
 8003bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd0:	ee07 3a90 	vmov	s15, r3
 8003bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bec:	ee17 2a90 	vmov	r2, s15
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	0e1b      	lsrs	r3, r3, #24
 8003bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1a:	ee17 2a90 	vmov	r2, s15
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c22:	e008      	b.n	8003c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
}
 8003c36:	bf00      	nop
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	58024400 	.word	0x58024400
 8003c48:	03d09000 	.word	0x03d09000
 8003c4c:	46000000 	.word	0x46000000
 8003c50:	4c742400 	.word	0x4c742400
 8003c54:	4a742400 	.word	0x4a742400
 8003c58:	4bbebc20 	.word	0x4bbebc20

08003c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c64:	4ba1      	ldr	r3, [pc, #644]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003c6e:	4b9f      	ldr	r3, [pc, #636]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	0d1b      	lsrs	r3, r3, #20
 8003c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c7a:	4b9c      	ldr	r3, [pc, #624]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003c86:	4b99      	ldr	r3, [pc, #612]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	08db      	lsrs	r3, r3, #3
 8003c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8111 	beq.w	8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	f000 8083 	beq.w	8003db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	f200 80a1 	bhi.w	8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d056      	beq.n	8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003cc6:	e099      	b.n	8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cc8:	4b88      	ldr	r3, [pc, #544]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d02d      	beq.n	8003d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cd4:	4b85      	ldr	r3, [pc, #532]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	08db      	lsrs	r3, r3, #3
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	4a84      	ldr	r2, [pc, #528]	; (8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfe:	4b7b      	ldr	r3, [pc, #492]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003d2e:	e087      	b.n	8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d42:	4b6a      	ldr	r3, [pc, #424]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d72:	e065      	b.n	8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d86:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003db6:	e043      	b.n	8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dca:	4b48      	ldr	r3, [pc, #288]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dde:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dfa:	e021      	b.n	8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003e40:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	0a5b      	lsrs	r3, r3, #9
 8003e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e66:	ee17 2a90 	vmov	r2, s15
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003e6e:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	0c1b      	lsrs	r3, r3, #16
 8003e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e78:	ee07 3a90 	vmov	s15, r3
 8003e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e94:	ee17 2a90 	vmov	r2, s15
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	0e1b      	lsrs	r3, r3, #24
 8003ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec2:	ee17 2a90 	vmov	r2, s15
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003eca:	e008      	b.n	8003ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	609a      	str	r2, [r3, #8]
}
 8003ede:	bf00      	nop
 8003ee0:	3724      	adds	r7, #36	; 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	03d09000 	.word	0x03d09000
 8003ef4:	46000000 	.word	0x46000000
 8003ef8:	4c742400 	.word	0x4c742400
 8003efc:	4a742400 	.word	0x4a742400
 8003f00:	4bbebc20 	.word	0x4bbebc20

08003f04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f0c:	4ba0      	ldr	r3, [pc, #640]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003f16:	4b9e      	ldr	r3, [pc, #632]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003f22:	4b9b      	ldr	r3, [pc, #620]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f2c:	4b98      	ldr	r3, [pc, #608]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	08db      	lsrs	r3, r3, #3
 8003f32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	ee07 3a90 	vmov	s15, r3
 8003f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8111 	beq.w	8004172 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	f000 8083 	beq.w	800405e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	f200 80a1 	bhi.w	80040a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d056      	beq.n	800401a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8003f6c:	e099      	b.n	80040a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f6e:	4b88      	ldr	r3, [pc, #544]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02d      	beq.n	8003fd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f7a:	4b85      	ldr	r3, [pc, #532]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	08db      	lsrs	r3, r3, #3
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	4a83      	ldr	r2, [pc, #524]	; (8004194 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8003f86:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa4:	4b7a      	ldr	r3, [pc, #488]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fb8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003fd4:	e087      	b.n	80040e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800419c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8003fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe8:	4b69      	ldr	r3, [pc, #420]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ffc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800400c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004014:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004018:	e065      	b.n	80040e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	ee07 3a90 	vmov	s15, r3
 8004020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004024:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80041a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402c:	4b58      	ldr	r3, [pc, #352]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004040:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004058:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800405c:	e043      	b.n	80040e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004068:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80041a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800406c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004070:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004080:	ed97 6a03 	vldr	s12, [r7, #12]
 8004084:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040a0:	e021      	b.n	80040e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	ee07 3a90 	vmov	s15, r3
 80040a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800419c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80040b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b4:	4b36      	ldr	r3, [pc, #216]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80040cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80040e6:	4b2a      	ldr	r3, [pc, #168]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	0a5b      	lsrs	r3, r3, #9
 80040ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004100:	edd7 6a07 	vldr	s13, [r7, #28]
 8004104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800410c:	ee17 2a90 	vmov	r2, s15
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800412a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800412e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413a:	ee17 2a90 	vmov	r2, s15
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	0e1b      	lsrs	r3, r3, #24
 8004148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800415c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004168:	ee17 2a90 	vmov	r2, s15
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004170:	e008      	b.n	8004184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	3724      	adds	r7, #36	; 0x24
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	58024400 	.word	0x58024400
 8004194:	03d09000 	.word	0x03d09000
 8004198:	46000000 	.word	0x46000000
 800419c:	4c742400 	.word	0x4c742400
 80041a0:	4a742400 	.word	0x4a742400
 80041a4:	4bbebc20 	.word	0x4bbebc20

080041a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041b6:	4b53      	ldr	r3, [pc, #332]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d101      	bne.n	80041c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e099      	b.n	80042fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041c6:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a4e      	ldr	r2, [pc, #312]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d2:	f7fc fc71 	bl	8000ab8 <HAL_GetTick>
 80041d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041d8:	e008      	b.n	80041ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041da:	f7fc fc6d 	bl	8000ab8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e086      	b.n	80042fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041ec:	4b45      	ldr	r3, [pc, #276]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f0      	bne.n	80041da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041f8:	4b42      	ldr	r3, [pc, #264]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	031b      	lsls	r3, r3, #12
 8004206:	493f      	ldr	r1, [pc, #252]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	628b      	str	r3, [r1, #40]	; 0x28
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	3b01      	subs	r3, #1
 8004212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	3b01      	subs	r3, #1
 800421c:	025b      	lsls	r3, r3, #9
 800421e:	b29b      	uxth	r3, r3
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	3b01      	subs	r3, #1
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	3b01      	subs	r3, #1
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800423c:	4931      	ldr	r1, [pc, #196]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004242:	4b30      	ldr	r3, [pc, #192]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	492d      	ldr	r1, [pc, #180]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004250:	4313      	orrs	r3, r2
 8004252:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004254:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f023 0220 	bic.w	r2, r3, #32
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4928      	ldr	r1, [pc, #160]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 800426c:	f023 0310 	bic.w	r3, r3, #16
 8004270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <RCCEx_PLL2_Config+0x160>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	69d2      	ldr	r2, [r2, #28]
 800427e:	00d2      	lsls	r2, r2, #3
 8004280:	4920      	ldr	r1, [pc, #128]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004286:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 800428c:	f043 0310 	orr.w	r3, r3, #16
 8004290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004298:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 800429e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042a4:	e00f      	b.n	80042c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d106      	bne.n	80042ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042ac:	4b15      	ldr	r3, [pc, #84]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042b8:	e005      	b.n	80042c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	4a11      	ldr	r2, [pc, #68]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fc fbf1 	bl	8000ab8 <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042d8:	e008      	b.n	80042ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042da:	f7fc fbed 	bl	8000ab8 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e006      	b.n	80042fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <RCCEx_PLL2_Config+0x15c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	58024400 	.word	0x58024400
 8004308:	ffff0007 	.word	0xffff0007

0800430c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800431a:	4b53      	ldr	r3, [pc, #332]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b03      	cmp	r3, #3
 8004324:	d101      	bne.n	800432a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e099      	b.n	800445e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800432a:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a4e      	ldr	r2, [pc, #312]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004336:	f7fc fbbf 	bl	8000ab8 <HAL_GetTick>
 800433a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800433c:	e008      	b.n	8004350 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800433e:	f7fc fbbb 	bl	8000ab8 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e086      	b.n	800445e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004350:	4b45      	ldr	r3, [pc, #276]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800435c:	4b42      	ldr	r3, [pc, #264]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	051b      	lsls	r3, r3, #20
 800436a:	493f      	ldr	r1, [pc, #252]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 800436c:	4313      	orrs	r3, r2
 800436e:	628b      	str	r3, [r1, #40]	; 0x28
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	3b01      	subs	r3, #1
 8004376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	3b01      	subs	r3, #1
 8004380:	025b      	lsls	r3, r3, #9
 8004382:	b29b      	uxth	r3, r3
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	3b01      	subs	r3, #1
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043a0:	4931      	ldr	r1, [pc, #196]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043a6:	4b30      	ldr	r3, [pc, #192]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	492d      	ldr	r1, [pc, #180]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043b8:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4928      	ldr	r1, [pc, #160]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043ca:	4b27      	ldr	r3, [pc, #156]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	4a26      	ldr	r2, [pc, #152]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043da:	4b24      	ldr	r3, [pc, #144]	; (800446c <RCCEx_PLL3_Config+0x160>)
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	69d2      	ldr	r2, [r2, #28]
 80043e2:	00d2      	lsls	r2, r2, #3
 80043e4:	4920      	ldr	r1, [pc, #128]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043ea:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043fc:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4a19      	ldr	r2, [pc, #100]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004402:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004408:	e00f      	b.n	800442a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004410:	4b15      	ldr	r3, [pc, #84]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	4a14      	ldr	r2, [pc, #80]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004416:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800441a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800441c:	e005      	b.n	800442a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800441e:	4b12      	ldr	r3, [pc, #72]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	4a11      	ldr	r2, [pc, #68]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004428:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004436:	f7fc fb3f 	bl	8000ab8 <HAL_GetTick>
 800443a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800443c:	e008      	b.n	8004450 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800443e:	f7fc fb3b 	bl	8000ab8 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e006      	b.n	800445e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <RCCEx_PLL3_Config+0x15c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	58024400 	.word	0x58024400
 800446c:	ffff0007 	.word	0xffff0007

08004470 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e075      	b.n	800456e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7fc f997 	bl	80007c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2203      	movs	r2, #3
 800449e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f868 	bl	8004578 <HAL_SD_InitCard>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e05d      	b.n	800456e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80044b2:	f107 0308 	add.w	r3, r7, #8
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fda5 	bl	8005008 <HAL_SD_GetCardStatus>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e052      	b.n	800456e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80044c8:	7e3b      	ldrb	r3, [r7, #24]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80044ce:	7e7b      	ldrb	r3, [r7, #25]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10a      	bne.n	80044f2 <HAL_SD_Init+0x82>
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <HAL_SD_Init+0x78>
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ee:	659a      	str	r2, [r3, #88]	; 0x58
 80044f0:	e00b      	b.n	800450a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d104      	bne.n	8004504 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004500:	659a      	str	r2, [r3, #88]	; 0x58
 8004502:	e002      	b.n	800450a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fe5b 	bl	80051cc <HAL_SD_ConfigWideBusOperation>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e026      	b.n	800456e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004520:	f7fc faca 	bl	8000ab8 <HAL_GetTick>
 8004524:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004526:	e011      	b.n	800454c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004528:	f7fc fac6 	bl	8000ab8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d109      	bne.n	800454c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800453e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e010      	b.n	800456e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 ff4d 	bl	80053ec <HAL_SD_GetCardState>
 8004552:	4603      	mov	r3, r0
 8004554:	2b04      	cmp	r3, #4
 8004556:	d1e7      	bne.n	8004528 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3728      	adds	r7, #40	; 0x28
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b08d      	sub	sp, #52	; 0x34
 800457c:	af02      	add	r7, sp, #8
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004590:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004594:	f7fe fd26 	bl	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004598:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e06a      	b.n	800468a <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	4a36      	ldr	r2, [pc, #216]	; (8004694 <HAL_SD_InitCard+0x11c>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681c      	ldr	r4, [r3, #0]
 80045c6:	466a      	mov	r2, sp
 80045c8:	f107 0318 	add.w	r3, r7, #24
 80045cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045da:	4620      	mov	r0, r4
 80045dc:	f001 fb82 	bl	8005ce4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fbc5 	bl	8005d74 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80045f6:	4a28      	ldr	r2, [pc, #160]	; (8004698 <HAL_SD_InitCard+0x120>)
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	3301      	adds	r3, #1
 8004600:	4618      	mov	r0, r3
 8004602:	f7fc fa65 	bl	8000ad0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 ffcc 	bl	80055a4 <SD_PowerON>
 800460c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00b      	beq.n	800462c <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e02e      	b.n	800468a <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fefd 	bl	800542c <SD_InitCard>
 8004632:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e01b      	b.n	800468a <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800465a:	4618      	mov	r0, r3
 800465c:	f001 fc20 	bl	8005ea0 <SDMMC_CmdBlockLength>
 8004660:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00f      	beq.n	8004688 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <HAL_SD_InitCard+0x124>)
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	372c      	adds	r7, #44	; 0x2c
 800468e:	46bd      	mov	sp, r7
 8004690:	bd90      	pop	{r4, r7, pc}
 8004692:	bf00      	nop
 8004694:	014f8b59 	.word	0x014f8b59
 8004698:	00012110 	.word	0x00012110
 800469c:	1fe00fff 	.word	0x1fe00fff

080046a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08c      	sub	sp, #48	; 0x30
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d107      	bne.n	80046c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e08d      	b.n	80047e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	f040 8086 	bne.w	80047e2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80046dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	441a      	add	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d907      	bls.n	80046fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e074      	b.n	80047e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2203      	movs	r2, #3
 80046fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	025a      	lsls	r2, r3, #9
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	2b01      	cmp	r3, #1
 800471e:	d002      	beq.n	8004726 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	025b      	lsls	r3, r3, #9
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295
 800472a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	025b      	lsls	r3, r3, #9
 8004730:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004732:	2390      	movs	r3, #144	; 0x90
 8004734:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004736:	2302      	movs	r3, #2
 8004738:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800473e:	2300      	movs	r3, #0
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f107 0210 	add.w	r2, r7, #16
 800474a:	4611      	mov	r1, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f001 fb7b 	bl	8005e48 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004760:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2201      	movs	r2, #1
 8004770:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d90a      	bls.n	800478e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2282      	movs	r2, #130	; 0x82
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004784:	4618      	mov	r0, r3
 8004786:	f001 fbd1 	bl	8005f2c <SDMMC_CmdReadMultiBlock>
 800478a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800478c:	e009      	b.n	80047a2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2281      	movs	r2, #129	; 0x81
 8004792:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800479a:	4618      	mov	r0, r3
 800479c:	f001 fba3 	bl	8005ee6 <SDMMC_CmdReadSingleBlock>
 80047a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a0f      	ldr	r2, [pc, #60]	; (80047ec <HAL_SD_ReadBlocks_DMA+0x14c>)
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	431a      	orrs	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00a      	b.n	80047e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80047dc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3730      	adds	r7, #48	; 0x30
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	1fe00fff 	.word	0x1fe00fff

080047f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08c      	sub	sp, #48	; 0x30
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e08d      	b.n	8004934 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	f040 8086 	bne.w	8004932 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800482c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	441a      	add	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	429a      	cmp	r2, r3
 8004838:	d907      	bls.n	800484a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e074      	b.n	8004934 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2203      	movs	r2, #3
 800484e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	025a      	lsls	r2, r3, #9
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	2b01      	cmp	r3, #1
 800486e:	d002      	beq.n	8004876 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	025b      	lsls	r3, r3, #9
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	025b      	lsls	r3, r3, #9
 8004880:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004882:	2390      	movs	r3, #144	; 0x90
 8004884:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f107 0210 	add.w	r2, r7, #16
 800489a:	4611      	mov	r1, r2
 800489c:	4618      	mov	r0, r3
 800489e:	f001 fad3 	bl	8005e48 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d90a      	bls.n	80048de <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	22a0      	movs	r2, #160	; 0xa0
 80048cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fb6f 	bl	8005fb8 <SDMMC_CmdWriteMultiBlock>
 80048da:	62f8      	str	r0, [r7, #44]	; 0x2c
 80048dc:	e009      	b.n	80048f2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2290      	movs	r2, #144	; 0x90
 80048e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 fb41 	bl	8005f72 <SDMMC_CmdWriteSingleBlock>
 80048f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d012      	beq.n	800491e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a0f      	ldr	r2, [pc, #60]	; (800493c <HAL_SD_WriteBlocks_DMA+0x14c>)
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	431a      	orrs	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e00a      	b.n	8004934 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800492c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e000      	b.n	8004934 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3730      	adds	r7, #48	; 0x30
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	1fe00fff 	.word	0x1fe00fff

08004940 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_SD_IRQHandler+0x2e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 f904 	bl	8005b74 <SD_Read_IT>
 800496c:	e19a      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80ac 	beq.w	8004ad6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b9d      	ldr	r3, [pc, #628]	; (8004c08 <HAL_SD_IRQHandler+0x2c8>)
 8004994:	400b      	ands	r3, r1
 8004996:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80049a6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d038      	beq.n	8004a34 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d104      	bne.n	80049d6 <HAL_SD_IRQHandler+0x96>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d011      	beq.n	80049fa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 fb10 	bl	8006000 <SDMMC_CmdStopTransfer>
 80049e0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f959 	bl	8004cac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a83      	ldr	r2, [pc, #524]	; (8004c0c <HAL_SD_IRQHandler+0x2cc>)
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_SD_IRQHandler+0xe4>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f001 ffc3 	bl	80069b0 <HAL_SD_RxCpltCallback>
 8004a2a:	e13b      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 ffb5 	bl	800699c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a32:	e137      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8132 	beq.w	8004ca4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2200      	movs	r2, #0
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2200      	movs	r2, #0
 8004a56:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d104      	bne.n	8004a6c <HAL_SD_IRQHandler+0x12c>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d011      	beq.n	8004a90 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fac5 	bl	8006000 <SDMMC_CmdStopTransfer>
 8004a76:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f90e 	bl	8004cac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_SD_IRQHandler+0x172>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f001 ff72 	bl	800699c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <HAL_SD_IRQHandler+0x18e>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80eb 	beq.w	8004ca4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f001 ff6e 	bl	80069b0 <HAL_SD_RxCpltCallback>
}
 8004ad4:	e0e6      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_SD_IRQHandler+0x1b6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 f886 	bl	8005c00 <SD_Write_IT>
 8004af4:	e0d6      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a2 	beq.w	8004c4a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	f043 0202 	orr.w	r2, r3, #2
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b32:	f043 0208 	orr.w	r2, r3, #8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	f043 0210 	orr.w	r2, r3, #16
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <HAL_SD_IRQHandler+0x2cc>)
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004b84:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b94:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ba4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bb4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fa20 	bl	8006000 <SDMMC_CmdStopTransfer>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bda:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00f      	beq.n	8004c10 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f854 	bl	8004cac <HAL_SD_ErrorCallback>
}
 8004c04:	e04e      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
 8004c06:	bf00      	nop
 8004c08:	ffff3ec5 	.word	0xffff3ec5
 8004c0c:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d044      	beq.n	8004ca4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d040      	beq.n	8004ca4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004c30:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f832 	bl	8004cac <HAL_SD_ErrorCallback>
}
 8004c48:	e02c      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d025      	beq.n	8004ca4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10c      	bne.n	8004c8a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f001 f828 	bl	8005cd0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8004c80:	e010      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 f810 	bl	8005ca8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8004c88:	e00c      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f001 f811 	bl	8005cbc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8004c9a:	e003      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fff9 	bl	8005c94 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8004ca2:	e7ff      	b.n	8004ca4 <HAL_SD_IRQHandler+0x364>
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	0f9b      	lsrs	r3, r3, #30
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cda:	0e9b      	lsrs	r3, r3, #26
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	0e1b      	lsrs	r3, r3, #24
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d20:	0d1b      	lsrs	r3, r3, #20
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	0bdb      	lsrs	r3, r3, #15
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d50:	0b9b      	lsrs	r3, r3, #14
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	0b5b      	lsrs	r3, r3, #13
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d74:	0b1b      	lsrs	r3, r3, #12
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2200      	movs	r2, #0
 8004d86:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d163      	bne.n	8004e58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d94:	009a      	lsls	r2, r3, #2
 8004d96:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004da0:	0f92      	lsrs	r2, r2, #30
 8004da2:	431a      	orrs	r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dac:	0edb      	lsrs	r3, r3, #27
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dbe:	0e1b      	lsrs	r3, r3, #24
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd0:	0d5b      	lsrs	r3, r3, #21
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de2:	0c9b      	lsrs	r3, r3, #18
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df4:	0bdb      	lsrs	r3, r3, #15
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	7e1b      	ldrb	r3, [r3, #24]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	3302      	adds	r3, #2
 8004e18:	2201      	movs	r2, #1
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e22:	fb02 f203 	mul.w	r2, r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	7a1b      	ldrb	r3, [r3, #8]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	2201      	movs	r2, #1
 8004e36:	409a      	lsls	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e44:	0a52      	lsrs	r2, r2, #9
 8004e46:	fb02 f203 	mul.w	r2, r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
 8004e56:	e031      	b.n	8004ebc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d11d      	bne.n	8004e9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e64:	041b      	lsls	r3, r3, #16
 8004e66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e6e:	0c1b      	lsrs	r3, r3, #16
 8004e70:	431a      	orrs	r2, r3
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	029a      	lsls	r2, r3, #10
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e90:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
 8004e9a:	e00f      	b.n	8004ebc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a58      	ldr	r2, [pc, #352]	; (8005004 <HAL_SD_GetCardCSD+0x344>)
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e09d      	b.n	8004ff8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec0:	0b9b      	lsrs	r3, r3, #14
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed2:	09db      	lsrs	r3, r3, #7
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef4:	0fdb      	lsrs	r3, r3, #31
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f00:	0f5b      	lsrs	r3, r3, #29
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f12:	0e9b      	lsrs	r3, r3, #26
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f24:	0d9b      	lsrs	r3, r3, #22
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f36:	0d5b      	lsrs	r3, r3, #21
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f52:	0c1b      	lsrs	r3, r3, #16
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f66:	0bdb      	lsrs	r3, r3, #15
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f7a:	0b9b      	lsrs	r3, r3, #14
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f8e:	0b5b      	lsrs	r3, r3, #13
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fa2:	0b1b      	lsrs	r3, r3, #12
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb6:	0a9b      	lsrs	r3, r3, #10
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fca:	0a1b      	lsrs	r3, r3, #8
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	1fe00fff 	.word	0x1fe00fff

08005008 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b094      	sub	sp, #80	; 0x50
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fb4a 	bl	80056b8 <SD_SendSDStatus>
 8005024:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005028:	2b00      	cmp	r3, #0
 800502a:	d011      	beq.n	8005050 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4f      	ldr	r2, [pc, #316]	; (8005170 <HAL_SD_GetCardStatus+0x168>)
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800504e:	e070      	b.n	8005132 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	099b      	lsrs	r3, r3, #6
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	b2da      	uxtb	r2, r3
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b29b      	uxth	r3, r3
 8005076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800507a:	b29a      	uxth	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	0e1b      	lsrs	r3, r3, #24
 8005080:	b29b      	uxth	r3, r3
 8005082:	4313      	orrs	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	061a      	lsls	r2, r3, #24
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005096:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80050a0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	0d1b      	lsrs	r3, r3, #20
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050d8:	b29a      	uxth	r2, r3
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	0a9b      	lsrs	r3, r3, #10
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	b2da      	uxtb	r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	b2da      	uxtb	r2, r3
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	b2da      	uxtb	r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	0e1b      	lsrs	r3, r3, #24
 800512c:	b2da      	uxtb	r2, r3
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800513a:	4618      	mov	r0, r3
 800513c:	f000 feb0 	bl	8005ea0 <SDMMC_CmdBlockLength>
 8005140:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00d      	beq.n	8005164 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a08      	ldr	r2, [pc, #32]	; (8005170 <HAL_SD_GetCardStatus+0x168>)
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005154:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8005164:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005168:	4618      	mov	r0, r3
 800516a:	3750      	adds	r7, #80	; 0x50
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	1fe00fff 	.word	0x1fe00fff

08005174 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80051cc:	b590      	push	{r4, r7, lr}
 80051ce:	b08d      	sub	sp, #52	; 0x34
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2203      	movs	r2, #3
 80051e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d02e      	beq.n	800524a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f2:	d106      	bne.n	8005202 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	635a      	str	r2, [r3, #52]	; 0x34
 8005200:	e029      	b.n	8005256 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005208:	d10a      	bne.n	8005220 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fb4c 	bl	80058a8 <SD_WideBus_Enable>
 8005210:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	635a      	str	r2, [r3, #52]	; 0x34
 800521e:	e01a      	b.n	8005256 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fb89 	bl	800593e <SD_WideBus_Disable>
 800522c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	635a      	str	r2, [r3, #52]	; 0x34
 800523a:	e00c      	b.n	8005256 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005240:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	635a      	str	r2, [r3, #52]	; 0x34
 8005248:	e005      	b.n	8005256 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a5e      	ldr	r2, [pc, #376]	; (80053dc <HAL_SD_ConfigWideBusOperation+0x210>)
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800526c:	e094      	b.n	8005398 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800526e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005272:	f7fd feb7 	bl	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005276:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8083 	beq.w	8005386 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4950      	ldr	r1, [pc, #320]	; (80053e0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800529e:	fba1 1303 	umull	r1, r3, r1, r3
 80052a2:	0e1b      	lsrs	r3, r3, #24
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d303      	bcc.n	80052b0 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e05a      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b8:	d103      	bne.n	80052c2 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	e051      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ca:	d126      	bne.n	800531a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10e      	bne.n	80052f2 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4a43      	ldr	r2, [pc, #268]	; (80053e4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d906      	bls.n	80052ea <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4a40      	ldr	r2, [pc, #256]	; (80053e0 <HAL_SD_ConfigWideBusOperation+0x214>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	0e5b      	lsrs	r3, r3, #25
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e03d      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	e039      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fe:	4a39      	ldr	r2, [pc, #228]	; (80053e4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d906      	bls.n	8005312 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4a36      	ldr	r2, [pc, #216]	; (80053e0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	0e5b      	lsrs	r3, r3, #25
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e029      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e025      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10e      	bne.n	8005340 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d906      	bls.n	8005338 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	0e1b      	lsrs	r3, r3, #24
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	e016      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e012      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d906      	bls.n	8005360 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4a22      	ldr	r2, [pc, #136]	; (80053e0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	0e1b      	lsrs	r3, r3, #24
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	e002      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681c      	ldr	r4, [r3, #0]
 800536a:	466a      	mov	r2, sp
 800536c:	f107 0314 	add.w	r3, r7, #20
 8005370:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005374:	e882 0003 	stmia.w	r2, {r0, r1}
 8005378:	f107 0308 	add.w	r3, r7, #8
 800537c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800537e:	4620      	mov	r0, r4
 8005380:	f000 fcb0 	bl	8005ce4 <SDMMC_Init>
 8005384:	e008      	b.n	8005398 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fd7d 	bl	8005ea0 <SDMMC_CmdBlockLength>
 80053a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00c      	beq.n	80053c8 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <HAL_SD_ConfigWideBusOperation+0x210>)
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80053d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	372c      	adds	r7, #44	; 0x2c
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd90      	pop	{r4, r7, pc}
 80053dc:	1fe00fff 	.word	0x1fe00fff
 80053e0:	55e63b89 	.word	0x55e63b89
 80053e4:	02faf080 	.word	0x02faf080
 80053e8:	017d7840 	.word	0x017d7840

080053ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80053f8:	f107 030c 	add.w	r3, r7, #12
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa2a 	bl	8005858 <SD_SendStatus>
 8005404:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	0a5b      	lsrs	r3, r3, #9
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005422:	693b      	ldr	r3, [r7, #16]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b090      	sub	sp, #64	; 0x40
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005434:	2301      	movs	r3, #1
 8005436:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fcaa 	bl	8005d96 <SDMMC_GetPowerState>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005448:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800544c:	e0a5      	b.n	800559a <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	2b03      	cmp	r3, #3
 8005454:	d02e      	beq.n	80054b4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fef5 	bl	800624a <SDMMC_CmdSendCID>
 8005460:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8005462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <SD_InitCard+0x40>
    {
      return errorstate;
 8005468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546a:	e096      	b.n	800559a <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fcd5 	bl	8005e22 <SDMMC_GetResponse>
 8005478:	4602      	mov	r2, r0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2104      	movs	r1, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fccc 	bl	8005e22 <SDMMC_GetResponse>
 800548a:	4602      	mov	r2, r0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2108      	movs	r1, #8
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fcc3 	bl	8005e22 <SDMMC_GetResponse>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	210c      	movs	r1, #12
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fcba 	bl	8005e22 <SDMMC_GetResponse>
 80054ae:	4602      	mov	r2, r0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d00d      	beq.n	80054d8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f107 020e 	add.w	r2, r7, #14
 80054c4:	4611      	mov	r1, r2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fefe 	bl	80062c8 <SDMMC_CmdSetRelAdd>
 80054cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80054ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <SD_InitCard+0xac>
    {
      return errorstate;
 80054d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d6:	e060      	b.n	800559a <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d036      	beq.n	800554e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80054e0:	89fb      	ldrh	r3, [r7, #14]
 80054e2:	461a      	mov	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f000 fec7 	bl	8006288 <SDMMC_CmdSendCSD>
 80054fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80054fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <SD_InitCard+0xda>
    {
      return errorstate;
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005504:	e049      	b.n	800559a <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fc88 	bl	8005e22 <SDMMC_GetResponse>
 8005512:	4602      	mov	r2, r0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2104      	movs	r1, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fc7f 	bl	8005e22 <SDMMC_GetResponse>
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2108      	movs	r1, #8
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fc76 	bl	8005e22 <SDMMC_GetResponse>
 8005536:	4602      	mov	r2, r0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	210c      	movs	r1, #12
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fc6d 	bl	8005e22 <SDMMC_GetResponse>
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2104      	movs	r1, #4
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fc64 	bl	8005e22 <SDMMC_GetResponse>
 800555a:	4603      	mov	r3, r0
 800555c:	0d1a      	lsrs	r2, r3, #20
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005562:	f107 0310 	add.w	r3, r7, #16
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fba9 	bl	8004cc0 <HAL_SD_GetCardCSD>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005574:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005578:	e00f      	b.n	800559a <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f000 fd76 	bl	8006078 <SDMMC_CmdSelDesel>
 800558c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800558e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <SD_InitCard+0x16c>
  {
    return errorstate;
 8005594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005596:	e000      	b.n	800559a <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3740      	adds	r7, #64	; 0x40
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fd7e 	bl	80060be <SDMMC_CmdGoIdleState>
 80055c2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	e06e      	b.n	80056ac <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fd91 	bl	80060fa <SDMMC_CmdOperCond>
 80055d8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00d      	beq.n	80055fc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fd67 	bl	80060be <SDMMC_CmdGoIdleState>
 80055f0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <SD_PowerON+0x5e>
    {
      return errorstate;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	e057      	b.n	80056ac <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d137      	bne.n	800567a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2100      	movs	r1, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fd92 	bl	800613a <SDMMC_CmdAppCommand>
 8005616:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d02d      	beq.n	800567a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800561e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005622:	e043      	b.n	80056ac <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fd85 	bl	800613a <SDMMC_CmdAppCommand>
 8005630:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <SD_PowerON+0x98>
    {
      return errorstate;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	e037      	b.n	80056ac <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	491c      	ldr	r1, [pc, #112]	; (80056b4 <SD_PowerON+0x110>)
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fd9c 	bl	8006180 <SDMMC_CmdAppOperCommand>
 8005648:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005654:	e02a      	b.n	80056ac <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2100      	movs	r1, #0
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fbe0 	bl	8005e22 <SDMMC_GetResponse>
 8005662:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	0fdb      	lsrs	r3, r3, #31
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <SD_PowerON+0xcc>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <SD_PowerON+0xce>
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]

    count++;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	3301      	adds	r3, #1
 8005678:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005680:	4293      	cmp	r3, r2
 8005682:	d802      	bhi.n	800568a <SD_PowerON+0xe6>
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0cc      	beq.n	8005624 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005690:	4293      	cmp	r3, r2
 8005692:	d902      	bls.n	800569a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005698:	e008      	b.n	80056ac <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	c1100000 	.word	0xc1100000

080056b8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08c      	sub	sp, #48	; 0x30
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80056c2:	f7fb f9f9 	bl	8000ab8 <HAL_GetTick>
 80056c6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fba5 	bl	8005e22 <SDMMC_GetResponse>
 80056d8:	4603      	mov	r3, r0
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e2:	d102      	bne.n	80056ea <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056e8:	e0b0      	b.n	800584c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2140      	movs	r1, #64	; 0x40
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fbd5 	bl	8005ea0 <SDMMC_CmdBlockLength>
 80056f6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	e0a0      	b.n	800584c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	041b      	lsls	r3, r3, #16
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f000 fd0f 	bl	800613a <SDMMC_CmdAppCommand>
 800571c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	e08d      	b.n	800584c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005730:	f04f 33ff 	mov.w	r3, #4294967295
 8005734:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005736:	2340      	movs	r3, #64	; 0x40
 8005738:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800573a:	2360      	movs	r3, #96	; 0x60
 800573c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800573e:	2302      	movs	r3, #2
 8005740:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005742:	2300      	movs	r3, #0
 8005744:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005746:	2301      	movs	r3, #1
 8005748:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f107 0208 	add.w	r2, r7, #8
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fb77 	bl	8005e48 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fdf7 	bl	8006352 <SDMMC_CmdStatusRegister>
 8005764:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02b      	beq.n	80057c4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	e069      	b.n	800584c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d013      	beq.n	80057ae <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8005786:	2300      	movs	r3, #0
 8005788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800578a:	e00d      	b.n	80057a8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fad1 	bl	8005d38 <SDMMC_ReadFIFO>
 8005796:	4602      	mov	r2, r0
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	601a      	str	r2, [r3, #0]
        pData++;
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	3304      	adds	r3, #4
 80057a0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	3301      	adds	r3, #1
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	d9ee      	bls.n	800578c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80057ae:	f7fb f983 	bl	8000ab8 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d102      	bne.n	80057c4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80057be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057c2:	e043      	b.n	800584c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0d2      	beq.n	8005778 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80057e0:	2308      	movs	r3, #8
 80057e2:	e033      	b.n	800584c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80057f2:	2302      	movs	r3, #2
 80057f4:	e02a      	b.n	800584c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d017      	beq.n	8005834 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005804:	2320      	movs	r3, #32
 8005806:	e021      	b.n	800584c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fa93 	bl	8005d38 <SDMMC_ReadFIFO>
 8005812:	4602      	mov	r2, r0
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	601a      	str	r2, [r3, #0]
    pData++;
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	3304      	adds	r3, #4
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800581e:	f7fb f94b 	bl	8000ab8 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d102      	bne.n	8005834 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800582e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005832:	e00b      	b.n	800584c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e2      	bne.n	8005808 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a03      	ldr	r2, [pc, #12]	; (8005854 <SD_SendSDStatus+0x19c>)
 8005848:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3730      	adds	r7, #48	; 0x30
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	18000f3a 	.word	0x18000f3a

08005858 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800586c:	e018      	b.n	80058a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f000 fd46 	bl	800630c <SDMMC_CmdSendStatus>
 8005880:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	e009      	b.n	80058a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fac5 	bl	8005e22 <SDMMC_GetResponse>
 8005898:	4602      	mov	r2, r0
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 faaf 	bl	8005e22 <SDMMC_GetResponse>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ce:	d102      	bne.n	80058d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80058d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058d4:	e02f      	b.n	8005936 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80058d6:	f107 030c 	add.w	r3, r7, #12
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f879 	bl	80059d4 <SD_FindSCR>
 80058e2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	e023      	b.n	8005936 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01c      	beq.n	8005932 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f000 fc18 	bl	800613a <SDMMC_CmdAppCommand>
 800590a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	e00f      	b.n	8005936 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2102      	movs	r1, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fc4f 	bl	80061c0 <SDMMC_CmdBusWidth>
 8005922:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	e003      	b.n	8005936 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800592e:	2300      	movs	r3, #0
 8005930:	e001      	b.n	8005936 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005932:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b086      	sub	sp, #24
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	2300      	movs	r3, #0
 800594c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fa64 	bl	8005e22 <SDMMC_GetResponse>
 800595a:	4603      	mov	r3, r0
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005964:	d102      	bne.n	800596c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800596a:	e02f      	b.n	80059cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800596c:	f107 030c 	add.w	r3, r7, #12
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f82e 	bl	80059d4 <SD_FindSCR>
 8005978:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	e023      	b.n	80059cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01c      	beq.n	80059c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f000 fbcd 	bl	800613a <SDMMC_CmdAppCommand>
 80059a0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	e00f      	b.n	80059cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fc04 	bl	80061c0 <SDMMC_CmdBusWidth>
 80059b8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	e003      	b.n	80059cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e001      	b.n	80059cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80059de:	f7fb f86b 	bl	8000ab8 <HAL_GetTick>
 80059e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80059e8:	2300      	movs	r3, #0
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2108      	movs	r1, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fa50 	bl	8005ea0 <SDMMC_CmdBlockLength>
 8005a00:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	e0ad      	b.n	8005b68 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fb8e 	bl	800613a <SDMMC_CmdAppCommand>
 8005a1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	e09e      	b.n	8005b68 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005a30:	2308      	movs	r3, #8
 8005a32:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005a34:	2330      	movs	r3, #48	; 0x30
 8005a36:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f107 0210 	add.w	r2, r7, #16
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f9fa 	bl	8005e48 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fbd4 	bl	8006206 <SDMMC_CmdSendSCR>
 8005a5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d027      	beq.n	8005ab6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	e07e      	b.n	8005b68 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d113      	bne.n	8005aa0 <SD_FindSCR+0xcc>
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d110      	bne.n	8005aa0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f958 	bl	8005d38 <SDMMC_ReadFIFO>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f951 	bl	8005d38 <SDMMC_ReadFIFO>
 8005a96:	4603      	mov	r3, r0
 8005a98:	60fb      	str	r3, [r7, #12]
      index++;
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005aa0:	f7fb f80a 	bl	8000ab8 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d102      	bne.n	8005ab6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005ab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ab4:	e058      	b.n	8005b68 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005abc:	f240 532a 	movw	r3, #1322	; 0x52a
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0d1      	beq.n	8005a6a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2208      	movs	r2, #8
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005adc:	2308      	movs	r3, #8
 8005ade:	e043      	b.n	8005b68 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2202      	movs	r2, #2
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005af6:	2302      	movs	r3, #2
 8005af8:	e036      	b.n	8005b68 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005b10:	2320      	movs	r3, #32
 8005b12:	e029      	b.n	8005b68 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <SD_FindSCR+0x19c>)
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	061a      	lsls	r2, r3, #24
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b28:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005b32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	0e1b      	lsrs	r3, r3, #24
 8005b38:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	601a      	str	r2, [r3, #0]
    scr++;
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	3304      	adds	r3, #4
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	061a      	lsls	r2, r3, #24
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b50:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005b5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	0e1b      	lsrs	r3, r3, #24
 8005b60:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3738      	adds	r7, #56	; 0x38
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	18000f3a 	.word	0x18000f3a

08005b74 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	2b1f      	cmp	r3, #31
 8005b88:	d936      	bls.n	8005bf8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e027      	b.n	8005be0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 f8cf 	bl	8005d38 <SDMMC_ReadFIFO>
 8005b9a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	0a1b      	lsrs	r3, r3, #8
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	0c1b      	lsrs	r3, r3, #16
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	0e1b      	lsrs	r3, r3, #24
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b07      	cmp	r3, #7
 8005be4:	d9d4      	bls.n	8005b90 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	f1a3 0220 	sub.w	r2, r3, #32
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	2b1f      	cmp	r3, #31
 8005c14:	d93a      	bls.n	8005c8c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e02b      	b.n	8005c74 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3301      	adds	r3, #1
 8005c26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	021a      	lsls	r2, r3, #8
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	3301      	adds	r3, #1
 8005c38:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	041a      	lsls	r2, r3, #16
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	061a      	lsls	r2, r3, #24
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f107 020c 	add.w	r2, r7, #12
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f872 	bl	8005d52 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	3301      	adds	r3, #1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b07      	cmp	r3, #7
 8005c78:	d9d0      	bls.n	8005c1c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f1a3 0220 	sub.w	r2, r3, #32
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	621a      	str	r2, [r3, #32]
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	f107 001c 	add.w	r0, r7, #28
 8005cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8005cfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8005cfe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8005d02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8005d06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8005d0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <SDMMC_Init+0x50>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	b004      	add	sp, #16
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	ffc02c00 	.word	0xffc02c00

08005d38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f043 0203 	orr.w	r2, r3, #3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0303 	and.w	r3, r3, #3
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8005dd2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8005dd8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8005dde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <SDMMC_SendCommand+0x50>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	fffee0c0 	.word	0xfffee0c0

08005e08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	b2db      	uxtb	r3, r3
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	461a      	mov	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	4413      	add	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8005e6e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8005e74:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8005e7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0

}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005eae:	2310      	movs	r3, #16
 8005eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ec0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ec2:	f107 0308 	add.w	r3, r7, #8
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ff73 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed2:	2110      	movs	r1, #16
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fa5f 	bl	8006398 <SDMMC_GetCmdResp1>
 8005eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005edc:	69fb      	ldr	r3, [r7, #28]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b088      	sub	sp, #32
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005ef4:	2311      	movs	r3, #17
 8005ef6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f08:	f107 0308 	add.w	r3, r7, #8
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff ff50 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f18:	2111      	movs	r1, #17
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa3c 	bl	8006398 <SDMMC_GetCmdResp1>
 8005f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f22:	69fb      	ldr	r3, [r7, #28]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3720      	adds	r7, #32
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005f3a:	2312      	movs	r3, #18
 8005f3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f4e:	f107 0308 	add.w	r3, r7, #8
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff ff2d 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5e:	2112      	movs	r1, #18
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa19 	bl	8006398 <SDMMC_GetCmdResp1>
 8005f66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f68:	69fb      	ldr	r3, [r7, #28]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3720      	adds	r7, #32
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b088      	sub	sp, #32
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f80:	2318      	movs	r3, #24
 8005f82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff ff0a 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa4:	2118      	movs	r1, #24
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9f6 	bl	8006398 <SDMMC_GetCmdResp1>
 8005fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fae:	69fb      	ldr	r3, [r7, #28]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005fc6:	2319      	movs	r3, #25
 8005fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fda:	f107 0308 	add.w	r3, r7, #8
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fee7 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fea:	2119      	movs	r1, #25
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f9d3 	bl	8006398 <SDMMC_GetCmdResp1>
 8005ff2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800600c:	230c      	movs	r3, #12
 800600e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800601a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006038:	f107 0308 	add.w	r3, r7, #8
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff feb8 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006044:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <SDMMC_CmdStopTransfer+0x74>)
 8006046:	210c      	movs	r1, #12
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9a5 	bl	8006398 <SDMMC_GetCmdResp1>
 800604e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006062:	d101      	bne.n	8006068 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8006068:	69fb      	ldr	r3, [r7, #28]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	05f5e100 	.word	0x05f5e100

08006078 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006086:	2307      	movs	r3, #7
 8006088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800608a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800608e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006098:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800609a:	f107 0308 	add.w	r3, r7, #8
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fe87 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80060a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060aa:	2107      	movs	r1, #7
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f973 	bl	8006398 <SDMMC_GetCmdResp1>
 80060b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060b4:	69fb      	ldr	r3, [r7, #28]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b088      	sub	sp, #32
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80060ce:	2300      	movs	r3, #0
 80060d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060dc:	f107 0308 	add.w	r3, r7, #8
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fe66 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fb97 	bl	800681c <SDMMC_GetCmdError>
 80060ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060f0:	69fb      	ldr	r3, [r7, #28]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b088      	sub	sp, #32
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006102:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006108:	2308      	movs	r3, #8
 800610a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800610c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800611a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800611c:	f107 0308 	add.w	r3, r7, #8
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fe46 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fb29 	bl	8006780 <SDMMC_GetCmdResp7>
 800612e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006130:	69fb      	ldr	r3, [r7, #28]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b088      	sub	sp, #32
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006148:	2337      	movs	r3, #55	; 0x37
 800614a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800614c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800615a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800615c:	f107 0308 	add.w	r3, r7, #8
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff fe26 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006168:	f241 3288 	movw	r2, #5000	; 0x1388
 800616c:	2137      	movs	r1, #55	; 0x37
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f912 	bl	8006398 <SDMMC_GetCmdResp1>
 8006174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006176:	69fb      	ldr	r3, [r7, #28]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800618e:	2329      	movs	r3, #41	; 0x29
 8006190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006198:	2300      	movs	r3, #0
 800619a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800619c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061a2:	f107 0308 	add.w	r3, r7, #8
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff fe03 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa2e 	bl	8006610 <SDMMC_GetCmdResp3>
 80061b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061b6:	69fb      	ldr	r3, [r7, #28]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80061ce:	2306      	movs	r3, #6
 80061d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061e2:	f107 0308 	add.w	r3, r7, #8
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fde3 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80061ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f2:	2106      	movs	r1, #6
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8cf 	bl	8006398 <SDMMC_GetCmdResp1>
 80061fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061fc:	69fb      	ldr	r3, [r7, #28]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b088      	sub	sp, #32
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006212:	2333      	movs	r3, #51	; 0x33
 8006214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800621a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006224:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fdc1 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006232:	f241 3288 	movw	r2, #5000	; 0x1388
 8006236:	2133      	movs	r1, #51	; 0x33
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f8ad 	bl	8006398 <SDMMC_GetCmdResp1>
 800623e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006240:	69fb      	ldr	r3, [r7, #28]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b088      	sub	sp, #32
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006256:	2302      	movs	r3, #2
 8006258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800625a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800625e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006268:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff fd9f 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f980 	bl	800657c <SDMMC_GetCmdResp2>
 800627c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800627e:	69fb      	ldr	r3, [r7, #28]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006296:	2309      	movs	r3, #9
 8006298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800629a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800629e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062a0:	2300      	movs	r3, #0
 80062a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062aa:	f107 0308 	add.w	r3, r7, #8
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fd7f 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f960 	bl	800657c <SDMMC_GetCmdResp2>
 80062bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062be:	69fb      	ldr	r3, [r7, #28]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80062d6:	2303      	movs	r3, #3
 80062d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062ea:	f107 0308 	add.w	r3, r7, #8
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff fd5f 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	2103      	movs	r1, #3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f9c8 	bl	8006690 <SDMMC_GetCmdResp6>
 8006300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006302:	69fb      	ldr	r3, [r7, #28]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3720      	adds	r7, #32
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800631a:	230d      	movs	r3, #13
 800631c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800631e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800632c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fd3d 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800633a:	f241 3288 	movw	r2, #5000	; 0x1388
 800633e:	210d      	movs	r1, #13
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f829 	bl	8006398 <SDMMC_GetCmdResp1>
 8006346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006348:	69fb      	ldr	r3, [r7, #28]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3720      	adds	r7, #32
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b088      	sub	sp, #32
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800635e:	230d      	movs	r3, #13
 8006360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800636c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006370:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006372:	f107 0308 	add.w	r3, r7, #8
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff fd1b 	bl	8005db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800637e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006382:	210d      	movs	r1, #13
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f807 	bl	8006398 <SDMMC_GetCmdResp1>
 800638a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800638c:	69fb      	ldr	r3, [r7, #28]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	460b      	mov	r3, r1
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80063a6:	4b70      	ldr	r3, [pc, #448]	; (8006568 <SDMMC_GetCmdResp1+0x1d0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a70      	ldr	r2, [pc, #448]	; (800656c <SDMMC_GetCmdResp1+0x1d4>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	0a5a      	lsrs	r2, r3, #9
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	fb02 f303 	mul.w	r3, r2, r3
 80063b8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	1e5a      	subs	r2, r3, #1
 80063be:	61fa      	str	r2, [r7, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063c8:	e0c9      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ce:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	4b67      	ldr	r3, [pc, #412]	; (8006570 <SDMMC_GetCmdResp1+0x1d8>)
 80063d4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0ef      	beq.n	80063ba <SDMMC_GetCmdResp1+0x22>
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1ea      	bne.n	80063ba <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2204      	movs	r2, #4
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063f6:	2304      	movs	r3, #4
 80063f8:	e0b1      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800640c:	2301      	movs	r3, #1
 800640e:	e0a6      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4a58      	ldr	r2, [pc, #352]	; (8006574 <SDMMC_GetCmdResp1+0x1dc>)
 8006414:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fcf6 	bl	8005e08 <SDMMC_GetCommandResponse>
 800641c:	4603      	mov	r3, r0
 800641e:	461a      	mov	r2, r3
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	4293      	cmp	r3, r2
 8006424:	d001      	beq.n	800642a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006426:	2301      	movs	r3, #1
 8006428:	e099      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800642a:	2100      	movs	r1, #0
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fcf8 	bl	8005e22 <SDMMC_GetResponse>
 8006432:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4b50      	ldr	r3, [pc, #320]	; (8006578 <SDMMC_GetCmdResp1+0x1e0>)
 8006438:	4013      	ands	r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800643e:	2300      	movs	r3, #0
 8006440:	e08d      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	da02      	bge.n	800644e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800644c:	e087      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006458:	2340      	movs	r3, #64	; 0x40
 800645a:	e080      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	e079      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006478:	e071      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006488:	e069      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006498:	e061      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80064a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064a8:	e059      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80064b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b8:	e051      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80064c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064c8:	e049      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80064d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064d8:	e041      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80064e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e8:	e039      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80064f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064f8:	e031      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006508:	e029      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006514:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006518:	e021      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006524:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006528:	e019      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006538:	e011      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006548:	e009      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006554:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006558:	e001      	b.n	800655e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800655a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800655e:	4618      	mov	r0, r3
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	24000000 	.word	0x24000000
 800656c:	10624dd3 	.word	0x10624dd3
 8006570:	00200045 	.word	0x00200045
 8006574:	002000c5 	.word	0x002000c5
 8006578:	fdffe008 	.word	0xfdffe008

0800657c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006584:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <SDMMC_GetCmdResp2+0x88>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <SDMMC_GetCmdResp2+0x8c>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	0a5b      	lsrs	r3, r3, #9
 8006590:	f241 3288 	movw	r2, #5000	; 0x1388
 8006594:	fb02 f303 	mul.w	r3, r2, r3
 8006598:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1e5a      	subs	r2, r3, #1
 800659e:	60fa      	str	r2, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065a8:	e026      	b.n	80065f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ef      	beq.n	800659a <SDMMC_GetCmdResp2+0x1e>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1ea      	bne.n	800659a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2204      	movs	r2, #4
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065d6:	2304      	movs	r3, #4
 80065d8:	e00e      	b.n	80065f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e003      	b.n	80065f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a06      	ldr	r2, [pc, #24]	; (800660c <SDMMC_GetCmdResp2+0x90>)
 80065f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	24000000 	.word	0x24000000
 8006608:	10624dd3 	.word	0x10624dd3
 800660c:	002000c5 	.word	0x002000c5

08006610 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <SDMMC_GetCmdResp3+0x74>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1a      	ldr	r2, [pc, #104]	; (8006688 <SDMMC_GetCmdResp3+0x78>)
 800661e:	fba2 2303 	umull	r2, r3, r2, r3
 8006622:	0a5b      	lsrs	r3, r3, #9
 8006624:	f241 3288 	movw	r2, #5000	; 0x1388
 8006628:	fb02 f303 	mul.w	r3, r2, r3
 800662c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1e5a      	subs	r2, r3, #1
 8006632:	60fa      	str	r2, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d102      	bne.n	800663e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800663c:	e01b      	b.n	8006676 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0ef      	beq.n	800662e <SDMMC_GetCmdResp3+0x1e>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ea      	bne.n	800662e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2204      	movs	r2, #4
 8006668:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800666a:	2304      	movs	r3, #4
 800666c:	e003      	b.n	8006676 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a06      	ldr	r2, [pc, #24]	; (800668c <SDMMC_GetCmdResp3+0x7c>)
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	24000000 	.word	0x24000000
 8006688:	10624dd3 	.word	0x10624dd3
 800668c:	002000c5 	.word	0x002000c5

08006690 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	460b      	mov	r3, r1
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800669e:	4b35      	ldr	r3, [pc, #212]	; (8006774 <SDMMC_GetCmdResp6+0xe4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a35      	ldr	r2, [pc, #212]	; (8006778 <SDMMC_GetCmdResp6+0xe8>)
 80066a4:	fba2 2303 	umull	r2, r3, r2, r3
 80066a8:	0a5b      	lsrs	r3, r3, #9
 80066aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	1e5a      	subs	r2, r3, #1
 80066b8:	61fa      	str	r2, [r7, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066c2:	e052      	b.n	800676a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0ef      	beq.n	80066b4 <SDMMC_GetCmdResp6+0x24>
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1ea      	bne.n	80066b4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2204      	movs	r2, #4
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066f0:	2304      	movs	r3, #4
 80066f2:	e03a      	b.n	800676a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006706:	2301      	movs	r3, #1
 8006708:	e02f      	b.n	800676a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff fb7c 	bl	8005e08 <SDMMC_GetCommandResponse>
 8006710:	4603      	mov	r3, r0
 8006712:	461a      	mov	r2, r3
 8006714:	7afb      	ldrb	r3, [r7, #11]
 8006716:	4293      	cmp	r3, r2
 8006718:	d001      	beq.n	800671e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800671a:	2301      	movs	r3, #1
 800671c:	e025      	b.n	800676a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4a16      	ldr	r2, [pc, #88]	; (800677c <SDMMC_GetCmdResp6+0xec>)
 8006722:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006724:	2100      	movs	r1, #0
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff fb7b 	bl	8005e22 <SDMMC_GetResponse>
 800672c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8006742:	2300      	movs	r3, #0
 8006744:	e011      	b.n	800676a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006754:	e009      	b.n	800676a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006764:	e001      	b.n	800676a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800676a:	4618      	mov	r0, r3
 800676c:	3720      	adds	r7, #32
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	24000000 	.word	0x24000000
 8006778:	10624dd3 	.word	0x10624dd3
 800677c:	002000c5 	.word	0x002000c5

08006780 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006788:	4b22      	ldr	r3, [pc, #136]	; (8006814 <SDMMC_GetCmdResp7+0x94>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a22      	ldr	r2, [pc, #136]	; (8006818 <SDMMC_GetCmdResp7+0x98>)
 800678e:	fba2 2303 	umull	r2, r3, r2, r3
 8006792:	0a5b      	lsrs	r3, r3, #9
 8006794:	f241 3288 	movw	r2, #5000	; 0x1388
 8006798:	fb02 f303 	mul.w	r3, r2, r3
 800679c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1e5a      	subs	r2, r3, #1
 80067a2:	60fa      	str	r2, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067ac:	e02c      	b.n	8006808 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0ef      	beq.n	800679e <SDMMC_GetCmdResp7+0x1e>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ea      	bne.n	800679e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2204      	movs	r2, #4
 80067d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067da:	2304      	movs	r3, #4
 80067dc:	e014      	b.n	8006808 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e009      	b.n	8006808 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2240      	movs	r2, #64	; 0x40
 8006804:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006806:	2300      	movs	r3, #0

}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	24000000 	.word	0x24000000
 8006818:	10624dd3 	.word	0x10624dd3

0800681c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006824:	4b11      	ldr	r3, [pc, #68]	; (800686c <SDMMC_GetCmdError+0x50>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a11      	ldr	r2, [pc, #68]	; (8006870 <SDMMC_GetCmdError+0x54>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	0a5b      	lsrs	r3, r3, #9
 8006830:	f241 3288 	movw	r2, #5000	; 0x1388
 8006834:	fb02 f303 	mul.w	r3, r2, r3
 8006838:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	60fa      	str	r2, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d102      	bne.n	800684a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006844:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006848:	e009      	b.n	800685e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0f1      	beq.n	800683a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a06      	ldr	r2, [pc, #24]	; (8006874 <SDMMC_GetCmdError+0x58>)
 800685a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	24000000 	.word	0x24000000
 8006870:	10624dd3 	.word	0x10624dd3
 8006874:	002000c5 	.word	0x002000c5

08006878 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800687c:	4904      	ldr	r1, [pc, #16]	; (8006890 <MX_FATFS_Init+0x18>)
 800687e:	4805      	ldr	r0, [pc, #20]	; (8006894 <MX_FATFS_Init+0x1c>)
 8006880:	f003 f822 	bl	80098c8 <FATFS_LinkDriver>
 8006884:	4603      	mov	r3, r0
 8006886:	461a      	mov	r2, r3
 8006888:	4b03      	ldr	r3, [pc, #12]	; (8006898 <MX_FATFS_Init+0x20>)
 800688a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800688c:	bf00      	nop
 800688e:	bd80      	pop	{r7, pc}
 8006890:	240000ec 	.word	0x240000ec
 8006894:	080099d8 	.word	0x080099d8
 8006898:	240000e8 	.word	0x240000e8

0800689c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80068a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80068b6:	f000 f885 	bl	80069c4 <BSP_SD_IsDetected>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d001      	beq.n	80068c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80068c0:	2302      	movs	r3, #2
 80068c2:	e012      	b.n	80068ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80068c4:	480b      	ldr	r0, [pc, #44]	; (80068f4 <BSP_SD_Init+0x48>)
 80068c6:	f7fd fdd3 	bl	8004470 <HAL_SD_Init>
 80068ca:	4603      	mov	r3, r0
 80068cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80068d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068d8:	4806      	ldr	r0, [pc, #24]	; (80068f4 <BSP_SD_Init+0x48>)
 80068da:	f7fe fc77 	bl	80051cc <HAL_SD_ConfigWideBusOperation>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80068e8:	79fb      	ldrb	r3, [r7, #7]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	24000068 	.word	0x24000068

080068f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	68f9      	ldr	r1, [r7, #12]
 800690e:	4806      	ldr	r0, [pc, #24]	; (8006928 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006910:	f7fd fec6 	bl	80046a0 <HAL_SD_ReadBlocks_DMA>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800691e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	24000068 	.word	0x24000068

0800692c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	68f9      	ldr	r1, [r7, #12]
 8006942:	4806      	ldr	r0, [pc, #24]	; (800695c <BSP_SD_WriteBlocks_DMA+0x30>)
 8006944:	f7fd ff54 	bl	80047f0 <HAL_SD_WriteBlocks_DMA>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	24000068 	.word	0x24000068

08006960 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006964:	4805      	ldr	r0, [pc, #20]	; (800697c <BSP_SD_GetCardState+0x1c>)
 8006966:	f7fe fd41 	bl	80053ec <HAL_SD_GetCardState>
 800696a:	4603      	mov	r3, r0
 800696c:	2b04      	cmp	r3, #4
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
}
 8006976:	4618      	mov	r0, r3
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	24000068 	.word	0x24000068

08006980 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4803      	ldr	r0, [pc, #12]	; (8006998 <BSP_SD_GetCardInfo+0x18>)
 800698c:	f7fe fbf2 	bl	8005174 <HAL_SD_GetCardInfo>
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	24000068 	.word	0x24000068

0800699c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80069a4:	f000 f9a0 	bl	8006ce8 <BSP_SD_WriteCpltCallback>
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80069b8:	f000 f9a2 	bl	8006d00 <BSP_SD_ReadCpltCallback>
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80069ca:	2301      	movs	r3, #1
 80069cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80069ce:	f000 f80b 	bl	80069e8 <BSP_PlatformIsDetected>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80069d8:	2300      	movs	r3, #0
 80069da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	b2db      	uxtb	r3, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80069ee:	2301      	movs	r3, #1
 80069f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80069f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069f6:	4806      	ldr	r0, [pc, #24]	; (8006a10 <BSP_PlatformIsDetected+0x28>)
 80069f8:	f7fa fb5a 	bl	80010b0 <HAL_GPIO_ReadPin>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006a02:	2300      	movs	r3, #0
 8006a04:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006a06:	79fb      	ldrb	r3, [r7, #7]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	58022000 	.word	0x58022000

08006a14 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006a1c:	f7fa f84c 	bl	8000ab8 <HAL_GetTick>
 8006a20:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006a22:	e006      	b.n	8006a32 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006a24:	f7ff ff9c 	bl	8006960 <BSP_SD_GetCardState>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e009      	b.n	8006a46 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006a32:	f7fa f841 	bl	8000ab8 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d8f0      	bhi.n	8006a24 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <SD_CheckStatus+0x38>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006a60:	f7ff ff7e 	bl	8006960 <BSP_SD_GetCardState>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d107      	bne.n	8006a7a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006a6a:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <SD_CheckStatus+0x38>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	4b04      	ldr	r3, [pc, #16]	; (8006a88 <SD_CheckStatus+0x38>)
 8006a78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006a7a:	4b03      	ldr	r3, [pc, #12]	; (8006a88 <SD_CheckStatus+0x38>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b2db      	uxtb	r3, r3
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	2400000d 	.word	0x2400000d

08006a8c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006a96:	f7ff ff09 	bl	80068ac <BSP_SD_Init>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d107      	bne.n	8006ab0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff ffd4 	bl	8006a50 <SD_CheckStatus>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <SD_initialize+0x34>)
 8006aae:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <SD_initialize+0x34>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	b2db      	uxtb	r3, r3
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	2400000d 	.word	0x2400000d

08006ac4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff ffbd 	bl	8006a50 <SD_CheckStatus>
 8006ad6:	4603      	mov	r3, r0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006af4:	f247 5030 	movw	r0, #30000	; 0x7530
 8006af8:	f7ff ff8c 	bl	8006a14 <SD_CheckStatusWithTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da01      	bge.n	8006b06 <SD_read+0x26>
  {
    return res;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	e03b      	b.n	8006b7e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	68b8      	ldr	r0, [r7, #8]
 8006b0c:	f7ff fef4 	bl	80068f8 <BSP_SD_ReadBlocks_DMA>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d132      	bne.n	8006b7c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006b16:	4b1c      	ldr	r3, [pc, #112]	; (8006b88 <SD_read+0xa8>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006b1c:	f7f9 ffcc 	bl	8000ab8 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006b22:	bf00      	nop
 8006b24:	4b18      	ldr	r3, [pc, #96]	; (8006b88 <SD_read+0xa8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d108      	bne.n	8006b3e <SD_read+0x5e>
 8006b2c:	f7f9 ffc4 	bl	8000ab8 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d9f2      	bls.n	8006b24 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006b3e:	4b12      	ldr	r3, [pc, #72]	; (8006b88 <SD_read+0xa8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]
 8006b4a:	e017      	b.n	8006b7c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006b4c:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <SD_read+0xa8>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006b52:	f7f9 ffb1 	bl	8000ab8 <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b58:	e007      	b.n	8006b6a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b5a:	f7ff ff01 	bl	8006960 <BSP_SD_GetCardState>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d102      	bne.n	8006b6a <SD_read+0x8a>
          {
            res = RES_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006b68:	e008      	b.n	8006b7c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b6a:	f7f9 ffa5 	bl	8000ab8 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d9ee      	bls.n	8006b5a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	24000030 	.word	0x24000030

08006b8c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006ba0:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <SD_write+0xa8>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006ba6:	f247 5030 	movw	r0, #30000	; 0x7530
 8006baa:	f7ff ff33 	bl	8006a14 <SD_CheckStatusWithTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	da01      	bge.n	8006bb8 <SD_write+0x2c>
  {
    return res;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	e038      	b.n	8006c2a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	68b8      	ldr	r0, [r7, #8]
 8006bbe:	f7ff feb5 	bl	800692c <BSP_SD_WriteBlocks_DMA>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d12f      	bne.n	8006c28 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006bc8:	f7f9 ff76 	bl	8000ab8 <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006bce:	bf00      	nop
 8006bd0:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <SD_write+0xa8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d108      	bne.n	8006bea <SD_write+0x5e>
 8006bd8:	f7f9 ff6e 	bl	8000ab8 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	f247 522f 	movw	r2, #29999	; 0x752f
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d9f2      	bls.n	8006bd0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006bea:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <SD_write+0xa8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	75fb      	strb	r3, [r7, #23]
 8006bf6:	e017      	b.n	8006c28 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <SD_write+0xa8>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006bfe:	f7f9 ff5b 	bl	8000ab8 <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006c04:	e007      	b.n	8006c16 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c06:	f7ff feab 	bl	8006960 <BSP_SD_GetCardState>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <SD_write+0x8a>
          {
            res = RES_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	75fb      	strb	r3, [r7, #23]
            break;
 8006c14:	e008      	b.n	8006c28 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006c16:	f7f9 ff4f 	bl	8000ab8 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f247 522f 	movw	r2, #29999	; 0x752f
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d9ee      	bls.n	8006c06 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	2400002c 	.word	0x2400002c

08006c38 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	603a      	str	r2, [r7, #0]
 8006c42:	71fb      	strb	r3, [r7, #7]
 8006c44:	460b      	mov	r3, r1
 8006c46:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c4e:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <SD_ioctl+0xac>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <SD_ioctl+0x28>
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e03c      	b.n	8006cda <SD_ioctl+0xa2>

  switch (cmd)
 8006c60:	79bb      	ldrb	r3, [r7, #6]
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d834      	bhi.n	8006cd0 <SD_ioctl+0x98>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <SD_ioctl+0x34>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006c7d 	.word	0x08006c7d
 8006c70:	08006c85 	.word	0x08006c85
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006cb7 	.word	0x08006cb7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006c82:	e028      	b.n	8006cd6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c84:	f107 0308 	add.w	r3, r7, #8
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff fe79 	bl	8006980 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006c8e:	6a3a      	ldr	r2, [r7, #32]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006c9a:	e01c      	b.n	8006cd6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c9c:	f107 0308 	add.w	r3, r7, #8
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fe6d 	bl	8006980 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006cb4:	e00f      	b.n	8006cd6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006cb6:	f107 0308 	add.w	r3, r7, #8
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fe60 	bl	8006980 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	0a5a      	lsrs	r2, r3, #9
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006cce:	e002      	b.n	8006cd6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3730      	adds	r7, #48	; 0x30
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	2400000d 	.word	0x2400000d

08006ce8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006cec:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <BSP_SD_WriteCpltCallback+0x14>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
}
 8006cf2:	bf00      	nop
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	2400002c 	.word	0x2400002c

08006d00 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006d04:	4b03      	ldr	r3, [pc, #12]	; (8006d14 <BSP_SD_ReadCpltCallback+0x14>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
}
 8006d0a:	bf00      	nop
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	24000030 	.word	0x24000030

08006d18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	4a08      	ldr	r2, [pc, #32]	; (8006d48 <disk_status+0x30>)
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	79fa      	ldrb	r2, [r7, #7]
 8006d30:	4905      	ldr	r1, [pc, #20]	; (8006d48 <disk_status+0x30>)
 8006d32:	440a      	add	r2, r1
 8006d34:	7a12      	ldrb	r2, [r2, #8]
 8006d36:	4610      	mov	r0, r2
 8006d38:	4798      	blx	r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	2400005c 	.word	0x2400005c

08006d4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	4a0d      	ldr	r2, [pc, #52]	; (8006d94 <disk_initialize+0x48>)
 8006d5e:	5cd3      	ldrb	r3, [r2, r3]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d111      	bne.n	8006d88 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	4a0b      	ldr	r2, [pc, #44]	; (8006d94 <disk_initialize+0x48>)
 8006d68:	2101      	movs	r1, #1
 8006d6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	4a09      	ldr	r2, [pc, #36]	; (8006d94 <disk_initialize+0x48>)
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	79fa      	ldrb	r2, [r7, #7]
 8006d7a:	4906      	ldr	r1, [pc, #24]	; (8006d94 <disk_initialize+0x48>)
 8006d7c:	440a      	add	r2, r1
 8006d7e:	7a12      	ldrb	r2, [r2, #8]
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	4603      	mov	r3, r0
 8006d86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	2400005c 	.word	0x2400005c

08006d98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006d98:	b590      	push	{r4, r7, lr}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <disk_read+0x3c>)
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	689c      	ldr	r4, [r3, #8]
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	4a07      	ldr	r2, [pc, #28]	; (8006dd4 <disk_read+0x3c>)
 8006db8:	4413      	add	r3, r2
 8006dba:	7a18      	ldrb	r0, [r3, #8]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	47a0      	blx	r4
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd90      	pop	{r4, r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	2400005c 	.word	0x2400005c

08006dd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006dd8:	b590      	push	{r4, r7, lr}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	4a0a      	ldr	r2, [pc, #40]	; (8006e14 <disk_write+0x3c>)
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	68dc      	ldr	r4, [r3, #12]
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	4a07      	ldr	r2, [pc, #28]	; (8006e14 <disk_write+0x3c>)
 8006df8:	4413      	add	r3, r2
 8006dfa:	7a18      	ldrb	r0, [r3, #8]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	47a0      	blx	r4
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd90      	pop	{r4, r7, pc}
 8006e12:	bf00      	nop
 8006e14:	2400005c 	.word	0x2400005c

08006e18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	603a      	str	r2, [r7, #0]
 8006e22:	71fb      	strb	r3, [r7, #7]
 8006e24:	460b      	mov	r3, r1
 8006e26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <disk_ioctl+0x38>)
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	79fa      	ldrb	r2, [r7, #7]
 8006e36:	4906      	ldr	r1, [pc, #24]	; (8006e50 <disk_ioctl+0x38>)
 8006e38:	440a      	add	r2, r1
 8006e3a:	7a10      	ldrb	r0, [r2, #8]
 8006e3c:	79b9      	ldrb	r1, [r7, #6]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	4798      	blx	r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
  return res;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	2400005c 	.word	0x2400005c

08006e54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006e64:	89fb      	ldrh	r3, [r7, #14]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	b21a      	sxth	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	b21b      	sxth	r3, r3
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b21b      	sxth	r3, r3
 8006e74:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006e76:	89fb      	ldrh	r3, [r7, #14]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3303      	adds	r3, #3
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	3202      	adds	r2, #2
 8006e9c:	7812      	ldrb	r2, [r2, #0]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	021b      	lsls	r3, r3, #8
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	3201      	adds	r2, #1
 8006eaa:	7812      	ldrb	r2, [r2, #0]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	7812      	ldrb	r2, [r2, #0]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
	return rv;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	887a      	ldrh	r2, [r7, #2]
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	887b      	ldrh	r3, [r7, #2]
 8006ee4:	0a1b      	lsrs	r3, r3, #8
 8006ee6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	607a      	str	r2, [r7, #4]
 8006eee:	887a      	ldrh	r2, [r7, #2]
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	0a1b      	lsrs	r3, r3, #8
 8006f1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	607a      	str	r2, [r7, #4]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	701a      	strb	r2, [r3, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	1c53      	adds	r3, r2, #1
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	1c59      	adds	r1, r3, #1
 8006f7c:	6179      	str	r1, [r7, #20]
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f1      	bne.n	8006f72 <mem_cpy+0x1a>
	}
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f9a:	b480      	push	{r7}
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	617a      	str	r2, [r7, #20]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	607b      	str	r3, [r7, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f3      	bne.n	8006faa <mem_set+0x10>
}
 8006fc2:	bf00      	nop
 8006fc4:	bf00      	nop
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006fd0:	b480      	push	{r7}
 8006fd2:	b089      	sub	sp, #36	; 0x24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	61fa      	str	r2, [r7, #28]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	61ba      	str	r2, [r7, #24]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	1acb      	subs	r3, r1, r3
 8006ffc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3b01      	subs	r3, #1
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <mem_cmp+0x40>
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0eb      	beq.n	8006fe8 <mem_cmp+0x18>

	return r;
 8007010:	697b      	ldr	r3, [r7, #20]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3724      	adds	r7, #36	; 0x24
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007028:	e002      	b.n	8007030 <chk_chr+0x12>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3301      	adds	r3, #1
 800702e:	607b      	str	r3, [r7, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <chk_chr+0x26>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	4293      	cmp	r3, r2
 8007042:	d1f2      	bne.n	800702a <chk_chr+0xc>
	return *str;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	781b      	ldrb	r3, [r3, #0]
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800705e:	2300      	movs	r3, #0
 8007060:	60bb      	str	r3, [r7, #8]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	e029      	b.n	80070bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007068:	4a27      	ldr	r2, [pc, #156]	; (8007108 <chk_lock+0xb4>)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	4413      	add	r3, r2
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01d      	beq.n	80070b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007076:	4a24      	ldr	r2, [pc, #144]	; (8007108 <chk_lock+0xb4>)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	4413      	add	r3, r2
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d116      	bne.n	80070b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007088:	4a1f      	ldr	r2, [pc, #124]	; (8007108 <chk_lock+0xb4>)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	4413      	add	r3, r2
 8007090:	3304      	adds	r3, #4
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007098:	429a      	cmp	r2, r3
 800709a:	d10c      	bne.n	80070b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800709c:	4a1a      	ldr	r2, [pc, #104]	; (8007108 <chk_lock+0xb4>)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	4413      	add	r3, r2
 80070a4:	3308      	adds	r3, #8
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d102      	bne.n	80070b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80070b0:	e007      	b.n	80070c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3301      	adds	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d9d2      	bls.n	8007068 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d109      	bne.n	80070dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <chk_lock+0x80>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d101      	bne.n	80070d8 <chk_lock+0x84>
 80070d4:	2300      	movs	r3, #0
 80070d6:	e010      	b.n	80070fa <chk_lock+0xa6>
 80070d8:	2312      	movs	r3, #18
 80070da:	e00e      	b.n	80070fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d108      	bne.n	80070f4 <chk_lock+0xa0>
 80070e2:	4a09      	ldr	r2, [pc, #36]	; (8007108 <chk_lock+0xb4>)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	4413      	add	r3, r2
 80070ea:	330c      	adds	r3, #12
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f2:	d101      	bne.n	80070f8 <chk_lock+0xa4>
 80070f4:	2310      	movs	r3, #16
 80070f6:	e000      	b.n	80070fa <chk_lock+0xa6>
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	2400003c 	.word	0x2400003c

0800710c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007112:	2300      	movs	r3, #0
 8007114:	607b      	str	r3, [r7, #4]
 8007116:	e002      	b.n	800711e <enq_lock+0x12>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3301      	adds	r3, #1
 800711c:	607b      	str	r3, [r7, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d806      	bhi.n	8007132 <enq_lock+0x26>
 8007124:	4a09      	ldr	r2, [pc, #36]	; (800714c <enq_lock+0x40>)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	4413      	add	r3, r2
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f2      	bne.n	8007118 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b02      	cmp	r3, #2
 8007136:	bf14      	ite	ne
 8007138:	2301      	movne	r3, #1
 800713a:	2300      	moveq	r3, #0
 800713c:	b2db      	uxtb	r3, r3
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	2400003c 	.word	0x2400003c

08007150 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e01f      	b.n	80071a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007160:	4a41      	ldr	r2, [pc, #260]	; (8007268 <inc_lock+0x118>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	4413      	add	r3, r2
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d113      	bne.n	800719a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007172:	4a3d      	ldr	r2, [pc, #244]	; (8007268 <inc_lock+0x118>)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	4413      	add	r3, r2
 800717a:	3304      	adds	r3, #4
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007182:	429a      	cmp	r2, r3
 8007184:	d109      	bne.n	800719a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007186:	4a38      	ldr	r2, [pc, #224]	; (8007268 <inc_lock+0x118>)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	4413      	add	r3, r2
 800718e:	3308      	adds	r3, #8
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007196:	429a      	cmp	r2, r3
 8007198:	d006      	beq.n	80071a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3301      	adds	r3, #1
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d9dc      	bls.n	8007160 <inc_lock+0x10>
 80071a6:	e000      	b.n	80071aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80071a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d132      	bne.n	8007216 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	e002      	b.n	80071bc <inc_lock+0x6c>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d806      	bhi.n	80071d0 <inc_lock+0x80>
 80071c2:	4a29      	ldr	r2, [pc, #164]	; (8007268 <inc_lock+0x118>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	4413      	add	r3, r2
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1f2      	bne.n	80071b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d101      	bne.n	80071da <inc_lock+0x8a>
 80071d6:	2300      	movs	r3, #0
 80071d8:	e040      	b.n	800725c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4922      	ldr	r1, [pc, #136]	; (8007268 <inc_lock+0x118>)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	440b      	add	r3, r1
 80071e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	491e      	ldr	r1, [pc, #120]	; (8007268 <inc_lock+0x118>)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	440b      	add	r3, r1
 80071f4:	3304      	adds	r3, #4
 80071f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	695a      	ldr	r2, [r3, #20]
 80071fc:	491a      	ldr	r1, [pc, #104]	; (8007268 <inc_lock+0x118>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	440b      	add	r3, r1
 8007204:	3308      	adds	r3, #8
 8007206:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007208:	4a17      	ldr	r2, [pc, #92]	; (8007268 <inc_lock+0x118>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	4413      	add	r3, r2
 8007210:	330c      	adds	r3, #12
 8007212:	2200      	movs	r2, #0
 8007214:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d009      	beq.n	8007230 <inc_lock+0xe0>
 800721c:	4a12      	ldr	r2, [pc, #72]	; (8007268 <inc_lock+0x118>)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	011b      	lsls	r3, r3, #4
 8007222:	4413      	add	r3, r2
 8007224:	330c      	adds	r3, #12
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <inc_lock+0xe0>
 800722c:	2300      	movs	r3, #0
 800722e:	e015      	b.n	800725c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d108      	bne.n	8007248 <inc_lock+0xf8>
 8007236:	4a0c      	ldr	r2, [pc, #48]	; (8007268 <inc_lock+0x118>)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	4413      	add	r3, r2
 800723e:	330c      	adds	r3, #12
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	e001      	b.n	800724c <inc_lock+0xfc>
 8007248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800724c:	4906      	ldr	r1, [pc, #24]	; (8007268 <inc_lock+0x118>)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	440b      	add	r3, r1
 8007254:	330c      	adds	r3, #12
 8007256:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	2400003c 	.word	0x2400003c

0800726c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3b01      	subs	r3, #1
 8007278:	607b      	str	r3, [r7, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d825      	bhi.n	80072cc <dec_lock+0x60>
		n = Files[i].ctr;
 8007280:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <dec_lock+0x74>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	4413      	add	r3, r2
 8007288:	330c      	adds	r3, #12
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800728e:	89fb      	ldrh	r3, [r7, #14]
 8007290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007294:	d101      	bne.n	800729a <dec_lock+0x2e>
 8007296:	2300      	movs	r3, #0
 8007298:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800729a:	89fb      	ldrh	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <dec_lock+0x3a>
 80072a0:	89fb      	ldrh	r3, [r7, #14]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80072a6:	4a0e      	ldr	r2, [pc, #56]	; (80072e0 <dec_lock+0x74>)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	4413      	add	r3, r2
 80072ae:	330c      	adds	r3, #12
 80072b0:	89fa      	ldrh	r2, [r7, #14]
 80072b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80072b4:	89fb      	ldrh	r3, [r7, #14]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <dec_lock+0x5a>
 80072ba:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <dec_lock+0x74>)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	4413      	add	r3, r2
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	737b      	strb	r3, [r7, #13]
 80072ca:	e001      	b.n	80072d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80072cc:	2302      	movs	r3, #2
 80072ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80072d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	2400003c 	.word	0x2400003c

080072e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e010      	b.n	8007314 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80072f2:	4a0d      	ldr	r2, [pc, #52]	; (8007328 <clear_lock+0x44>)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	4413      	add	r3, r2
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d105      	bne.n	800730e <clear_lock+0x2a>
 8007302:	4a09      	ldr	r2, [pc, #36]	; (8007328 <clear_lock+0x44>)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	4413      	add	r3, r2
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3301      	adds	r3, #1
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d9eb      	bls.n	80072f2 <clear_lock+0xe>
	}
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	2400003c 	.word	0x2400003c

0800732c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	78db      	ldrb	r3, [r3, #3]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d034      	beq.n	80073aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7858      	ldrb	r0, [r3, #1]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007350:	2301      	movs	r3, #1
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	f7ff fd40 	bl	8006dd8 <disk_write>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <sync_window+0x38>
			res = FR_DISK_ERR;
 800735e:	2301      	movs	r3, #1
 8007360:	73fb      	strb	r3, [r7, #15]
 8007362:	e022      	b.n	80073aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	1ad2      	subs	r2, r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	429a      	cmp	r2, r3
 8007378:	d217      	bcs.n	80073aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	789b      	ldrb	r3, [r3, #2]
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	e010      	b.n	80073a4 <sync_window+0x78>
					wsect += fs->fsize;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4413      	add	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7858      	ldrb	r0, [r3, #1]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007396:	2301      	movs	r3, #1
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	f7ff fd1d 	bl	8006dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d8eb      	bhi.n	8007382 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d01b      	beq.n	8007404 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ffad 	bl	800732c <sync_window>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d113      	bne.n	8007404 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7858      	ldrb	r0, [r3, #1]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073e6:	2301      	movs	r3, #1
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	f7ff fcd5 	bl	8006d98 <disk_read>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80073f4:	f04f 33ff 	mov.w	r3, #4294967295
 80073f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff ff87 	bl	800732c <sync_window>
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d158      	bne.n	80074da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b03      	cmp	r3, #3
 800742e:	d148      	bne.n	80074c2 <sync_fs+0xb2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	791b      	ldrb	r3, [r3, #4]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d144      	bne.n	80074c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3330      	adds	r3, #48	; 0x30
 800743c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff fda9 	bl	8006f9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3330      	adds	r3, #48	; 0x30
 800744c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007450:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff fd38 	bl	8006eca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3330      	adds	r3, #48	; 0x30
 800745e:	4921      	ldr	r1, [pc, #132]	; (80074e4 <sync_fs+0xd4>)
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fd4d 	bl	8006f00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3330      	adds	r3, #48	; 0x30
 800746a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800746e:	491e      	ldr	r1, [pc, #120]	; (80074e8 <sync_fs+0xd8>)
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fd45 	bl	8006f00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3330      	adds	r3, #48	; 0x30
 800747a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f7ff fd3b 	bl	8006f00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3330      	adds	r3, #48	; 0x30
 800748e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f7ff fd31 	bl	8006f00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	7858      	ldrb	r0, [r3, #1]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b6:	2301      	movs	r3, #1
 80074b8:	f7ff fc8e 	bl	8006dd8 <disk_write>
			fs->fsi_flag = 0;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2200      	movs	r2, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fca4 	bl	8006e18 <disk_ioctl>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <sync_fs+0xca>
 80074d6:	2301      	movs	r3, #1
 80074d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	41615252 	.word	0x41615252
 80074e8:	61417272 	.word	0x61417272

080074ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	3b02      	subs	r3, #2
 80074fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	3b02      	subs	r3, #2
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d301      	bcc.n	800750c <clust2sect+0x20>
 8007508:	2300      	movs	r3, #0
 800750a:	e008      	b.n	800751e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	895b      	ldrh	r3, [r3, #10]
 8007510:	461a      	mov	r2, r3
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	fb03 f202 	mul.w	r2, r3, r2
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751c:	4413      	add	r3, r2
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b086      	sub	sp, #24
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d904      	bls.n	800754a <get_fat+0x20>
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d302      	bcc.n	8007550 <get_fat+0x26>
		val = 1;	/* Internal error */
 800754a:	2301      	movs	r3, #1
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	e08f      	b.n	8007670 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007550:	f04f 33ff 	mov.w	r3, #4294967295
 8007554:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b03      	cmp	r3, #3
 800755c:	d062      	beq.n	8007624 <get_fat+0xfa>
 800755e:	2b03      	cmp	r3, #3
 8007560:	dc7c      	bgt.n	800765c <get_fat+0x132>
 8007562:	2b01      	cmp	r3, #1
 8007564:	d002      	beq.n	800756c <get_fat+0x42>
 8007566:	2b02      	cmp	r3, #2
 8007568:	d042      	beq.n	80075f0 <get_fat+0xc6>
 800756a:	e077      	b.n	800765c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	085b      	lsrs	r3, r3, #1
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6a1a      	ldr	r2, [r3, #32]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	0a5b      	lsrs	r3, r3, #9
 8007582:	4413      	add	r3, r2
 8007584:	4619      	mov	r1, r3
 8007586:	6938      	ldr	r0, [r7, #16]
 8007588:	f7ff ff14 	bl	80073b4 <move_window>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d167      	bne.n	8007662 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	60fa      	str	r2, [r7, #12]
 8007598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	4413      	add	r3, r2
 80075a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6a1a      	ldr	r2, [r3, #32]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	0a5b      	lsrs	r3, r3, #9
 80075ae:	4413      	add	r3, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	6938      	ldr	r0, [r7, #16]
 80075b4:	f7ff fefe 	bl	80073b4 <move_window>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d153      	bne.n	8007666 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075cc:	021b      	lsls	r3, r3, #8
 80075ce:	461a      	mov	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <get_fat+0xbc>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	091b      	lsrs	r3, r3, #4
 80075e4:	e002      	b.n	80075ec <get_fat+0xc2>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ec:	617b      	str	r3, [r7, #20]
			break;
 80075ee:	e03f      	b.n	8007670 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	6a1a      	ldr	r2, [r3, #32]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	4413      	add	r3, r2
 80075fa:	4619      	mov	r1, r3
 80075fc:	6938      	ldr	r0, [r7, #16]
 80075fe:	f7ff fed9 	bl	80073b4 <move_window>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d130      	bne.n	800766a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007616:	4413      	add	r3, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fc1b 	bl	8006e54 <ld_word>
 800761e:	4603      	mov	r3, r0
 8007620:	617b      	str	r3, [r7, #20]
			break;
 8007622:	e025      	b.n	8007670 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6a1a      	ldr	r2, [r3, #32]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	09db      	lsrs	r3, r3, #7
 800762c:	4413      	add	r3, r2
 800762e:	4619      	mov	r1, r3
 8007630:	6938      	ldr	r0, [r7, #16]
 8007632:	f7ff febf 	bl	80073b4 <move_window>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d118      	bne.n	800766e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800764a:	4413      	add	r3, r2
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff fc19 	bl	8006e84 <ld_dword>
 8007652:	4603      	mov	r3, r0
 8007654:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007658:	617b      	str	r3, [r7, #20]
			break;
 800765a:	e009      	b.n	8007670 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800765c:	2301      	movs	r3, #1
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e006      	b.n	8007670 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007662:	bf00      	nop
 8007664:	e004      	b.n	8007670 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007666:	bf00      	nop
 8007668:	e002      	b.n	8007670 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800766a:	bf00      	nop
 800766c:	e000      	b.n	8007670 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800766e:	bf00      	nop
		}
	}

	return val;
 8007670:	697b      	ldr	r3, [r7, #20]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800767a:	b590      	push	{r4, r7, lr}
 800767c:	b089      	sub	sp, #36	; 0x24
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007686:	2302      	movs	r3, #2
 8007688:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b01      	cmp	r3, #1
 800768e:	f240 80d2 	bls.w	8007836 <put_fat+0x1bc>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	f080 80cc 	bcs.w	8007836 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	f000 8096 	beq.w	80077d4 <put_fat+0x15a>
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	f300 80cd 	bgt.w	8007848 <put_fat+0x1ce>
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d002      	beq.n	80076b8 <put_fat+0x3e>
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d06e      	beq.n	8007794 <put_fat+0x11a>
 80076b6:	e0c7      	b.n	8007848 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	4413      	add	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a1a      	ldr	r2, [r3, #32]
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	0a5b      	lsrs	r3, r3, #9
 80076ce:	4413      	add	r3, r2
 80076d0:	4619      	mov	r1, r3
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff fe6e 	bl	80073b4 <move_window>
 80076d8:	4603      	mov	r3, r0
 80076da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076dc:	7ffb      	ldrb	r3, [r7, #31]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f040 80ab 	bne.w	800783a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	1c59      	adds	r1, r3, #1
 80076ee:	61b9      	str	r1, [r7, #24]
 80076f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f4:	4413      	add	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <put_fat+0xa4>
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	b25b      	sxtb	r3, r3
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	b25a      	sxtb	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	b25b      	sxtb	r3, r3
 8007716:	4313      	orrs	r3, r2
 8007718:	b25b      	sxtb	r3, r3
 800771a:	b2db      	uxtb	r3, r3
 800771c:	e001      	b.n	8007722 <put_fat+0xa8>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a1a      	ldr	r2, [r3, #32]
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	0a5b      	lsrs	r3, r3, #9
 8007734:	4413      	add	r3, r2
 8007736:	4619      	mov	r1, r3
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff fe3b 	bl	80073b4 <move_window>
 800773e:	4603      	mov	r3, r0
 8007740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007742:	7ffb      	ldrb	r3, [r7, #31]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d17a      	bne.n	800783e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007754:	4413      	add	r3, r2
 8007756:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <put_fat+0xf0>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	091b      	lsrs	r3, r3, #4
 8007766:	b2db      	uxtb	r3, r3
 8007768:	e00e      	b.n	8007788 <put_fat+0x10e>
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	b25b      	sxtb	r3, r3
 8007770:	f023 030f 	bic.w	r3, r3, #15
 8007774:	b25a      	sxtb	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	0a1b      	lsrs	r3, r3, #8
 800777a:	b25b      	sxtb	r3, r3
 800777c:	f003 030f 	and.w	r3, r3, #15
 8007780:	b25b      	sxtb	r3, r3
 8007782:	4313      	orrs	r3, r2
 8007784:	b25b      	sxtb	r3, r3
 8007786:	b2db      	uxtb	r3, r3
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	70da      	strb	r2, [r3, #3]
			break;
 8007792:	e059      	b.n	8007848 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a1a      	ldr	r2, [r3, #32]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	0a1b      	lsrs	r3, r3, #8
 800779c:	4413      	add	r3, r2
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff fe07 	bl	80073b4 <move_window>
 80077a6:	4603      	mov	r3, r0
 80077a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077aa:	7ffb      	ldrb	r3, [r7, #31]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d148      	bne.n	8007842 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80077be:	4413      	add	r3, r2
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	b292      	uxth	r2, r2
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff fb7f 	bl	8006eca <st_word>
			fs->wflag = 1;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	70da      	strb	r2, [r3, #3]
			break;
 80077d2:	e039      	b.n	8007848 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a1a      	ldr	r2, [r3, #32]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	09db      	lsrs	r3, r3, #7
 80077dc:	4413      	add	r3, r2
 80077de:	4619      	mov	r1, r3
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff fde7 	bl	80073b4 <move_window>
 80077e6:	4603      	mov	r3, r0
 80077e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077ea:	7ffb      	ldrb	r3, [r7, #31]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d12a      	bne.n	8007846 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007804:	4413      	add	r3, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f7ff fb3c 	bl	8006e84 <ld_dword>
 800780c:	4603      	mov	r3, r0
 800780e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007812:	4323      	orrs	r3, r4
 8007814:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007824:	4413      	add	r3, r2
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff fb69 	bl	8006f00 <st_dword>
			fs->wflag = 1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	70da      	strb	r2, [r3, #3]
			break;
 8007834:	e008      	b.n	8007848 <put_fat+0x1ce>
		}
	}
 8007836:	bf00      	nop
 8007838:	e006      	b.n	8007848 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800783a:	bf00      	nop
 800783c:	e004      	b.n	8007848 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800783e:	bf00      	nop
 8007840:	e002      	b.n	8007848 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007842:	bf00      	nop
 8007844:	e000      	b.n	8007848 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007846:	bf00      	nop
	return res;
 8007848:	7ffb      	ldrb	r3, [r7, #31]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3724      	adds	r7, #36	; 0x24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd90      	pop	{r4, r7, pc}

08007852 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b088      	sub	sp, #32
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d904      	bls.n	8007878 <remove_chain+0x26>
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	429a      	cmp	r2, r3
 8007876:	d301      	bcc.n	800787c <remove_chain+0x2a>
 8007878:	2302      	movs	r3, #2
 800787a:	e04b      	b.n	8007914 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00c      	beq.n	800789c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007882:	f04f 32ff 	mov.w	r2, #4294967295
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	69b8      	ldr	r0, [r7, #24]
 800788a:	f7ff fef6 	bl	800767a <put_fat>
 800788e:	4603      	mov	r3, r0
 8007890:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007892:	7ffb      	ldrb	r3, [r7, #31]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <remove_chain+0x4a>
 8007898:	7ffb      	ldrb	r3, [r7, #31]
 800789a:	e03b      	b.n	8007914 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff fe43 	bl	800752a <get_fat>
 80078a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d031      	beq.n	8007910 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <remove_chain+0x64>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e02e      	b.n	8007914 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d101      	bne.n	80078c2 <remove_chain+0x70>
 80078be:	2301      	movs	r3, #1
 80078c0:	e028      	b.n	8007914 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80078c2:	2200      	movs	r2, #0
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	69b8      	ldr	r0, [r7, #24]
 80078c8:	f7ff fed7 	bl	800767a <put_fat>
 80078cc:	4603      	mov	r3, r0
 80078ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80078d0:	7ffb      	ldrb	r3, [r7, #31]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <remove_chain+0x88>
 80078d6:	7ffb      	ldrb	r3, [r7, #31]
 80078d8:	e01c      	b.n	8007914 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	3b02      	subs	r3, #2
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d20b      	bcs.n	8007900 <remove_chain+0xae>
			fs->free_clst++;
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	d3c6      	bcc.n	800789c <remove_chain+0x4a>
 800790e:	e000      	b.n	8007912 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007910:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3720      	adds	r7, #32
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10d      	bne.n	800794e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <create_chain+0x2c>
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	429a      	cmp	r2, r3
 8007946:	d31b      	bcc.n	8007980 <create_chain+0x64>
 8007948:	2301      	movs	r3, #1
 800794a:	61bb      	str	r3, [r7, #24]
 800794c:	e018      	b.n	8007980 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff fdea 	bl	800752a <get_fat>
 8007956:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d801      	bhi.n	8007962 <create_chain+0x46>
 800795e:	2301      	movs	r3, #1
 8007960:	e070      	b.n	8007a44 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007968:	d101      	bne.n	800796e <create_chain+0x52>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	e06a      	b.n	8007a44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	429a      	cmp	r2, r3
 8007976:	d201      	bcs.n	800797c <create_chain+0x60>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	e063      	b.n	8007a44 <create_chain+0x128>
		scl = clst;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	3301      	adds	r3, #1
 8007988:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	429a      	cmp	r2, r3
 8007992:	d307      	bcc.n	80079a4 <create_chain+0x88>
				ncl = 2;
 8007994:	2302      	movs	r3, #2
 8007996:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	429a      	cmp	r2, r3
 800799e:	d901      	bls.n	80079a4 <create_chain+0x88>
 80079a0:	2300      	movs	r3, #0
 80079a2:	e04f      	b.n	8007a44 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80079a4:	69f9      	ldr	r1, [r7, #28]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff fdbf 	bl	800752a <get_fat>
 80079ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00e      	beq.n	80079d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d003      	beq.n	80079c2 <create_chain+0xa6>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d101      	bne.n	80079c6 <create_chain+0xaa>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	e03e      	b.n	8007a44 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d1da      	bne.n	8007984 <create_chain+0x68>
 80079ce:	2300      	movs	r3, #0
 80079d0:	e038      	b.n	8007a44 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80079d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80079d4:	f04f 32ff 	mov.w	r2, #4294967295
 80079d8:	69f9      	ldr	r1, [r7, #28]
 80079da:	6938      	ldr	r0, [r7, #16]
 80079dc:	f7ff fe4d 	bl	800767a <put_fat>
 80079e0:	4603      	mov	r3, r0
 80079e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d109      	bne.n	80079fe <create_chain+0xe2>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d006      	beq.n	80079fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80079f0:	69fa      	ldr	r2, [r7, #28]
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6938      	ldr	r0, [r7, #16]
 80079f6:	f7ff fe40 	bl	800767a <put_fat>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d116      	bne.n	8007a32 <create_chain+0x116>
		fs->last_clst = ncl;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	691a      	ldr	r2, [r3, #16]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	3b02      	subs	r3, #2
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d804      	bhi.n	8007a22 <create_chain+0x106>
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	1e5a      	subs	r2, r3, #1
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	791b      	ldrb	r3, [r3, #4]
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	711a      	strb	r2, [r3, #4]
 8007a30:	e007      	b.n	8007a42 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d102      	bne.n	8007a3e <create_chain+0x122>
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	e000      	b.n	8007a40 <create_chain+0x124>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007a42:	69fb      	ldr	r3, [r7, #28]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3720      	adds	r7, #32
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	3304      	adds	r3, #4
 8007a62:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	0a5b      	lsrs	r3, r3, #9
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	8952      	ldrh	r2, [r2, #10]
 8007a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a70:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1d1a      	adds	r2, r3, #4
 8007a76:	613a      	str	r2, [r7, #16]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <clmt_clust+0x3a>
 8007a82:	2300      	movs	r3, #0
 8007a84:	e010      	b.n	8007aa8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d307      	bcc.n	8007a9e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a9c:	e7e9      	b.n	8007a72 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007a9e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	4413      	add	r3, r2
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aca:	d204      	bcs.n	8007ad6 <dir_sdi+0x22>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	f003 031f 	and.w	r3, r3, #31
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <dir_sdi+0x26>
		return FR_INT_ERR;
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e063      	b.n	8007ba2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <dir_sdi+0x46>
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d902      	bls.n	8007afa <dir_sdi+0x46>
		clst = fs->dirbase;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10c      	bne.n	8007b1a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	095b      	lsrs	r3, r3, #5
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	8912      	ldrh	r2, [r2, #8]
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d301      	bcc.n	8007b10 <dir_sdi+0x5c>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e048      	b.n	8007ba2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	61da      	str	r2, [r3, #28]
 8007b18:	e029      	b.n	8007b6e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	895b      	ldrh	r3, [r3, #10]
 8007b1e:	025b      	lsls	r3, r3, #9
 8007b20:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b22:	e019      	b.n	8007b58 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6979      	ldr	r1, [r7, #20]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fcfe 	bl	800752a <get_fat>
 8007b2e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d101      	bne.n	8007b3c <dir_sdi+0x88>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e032      	b.n	8007ba2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d904      	bls.n	8007b4c <dir_sdi+0x98>
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d301      	bcc.n	8007b50 <dir_sdi+0x9c>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e028      	b.n	8007ba2 <dir_sdi+0xee>
			ofs -= csz;
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d2e1      	bcs.n	8007b24 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007b60:	6979      	ldr	r1, [r7, #20]
 8007b62:	6938      	ldr	r0, [r7, #16]
 8007b64:	f7ff fcc2 	bl	80074ec <clust2sect>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <dir_sdi+0xcc>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	e010      	b.n	8007ba2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	0a5b      	lsrs	r3, r3, #9
 8007b88:	441a      	add	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	441a      	add	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	3320      	adds	r3, #32
 8007bc0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <dir_next+0x28>
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bd0:	d301      	bcc.n	8007bd6 <dir_next+0x2c>
 8007bd2:	2304      	movs	r3, #4
 8007bd4:	e0aa      	b.n	8007d2c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f040 8098 	bne.w	8007d12 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	095b      	lsrs	r3, r3, #5
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	8912      	ldrh	r2, [r2, #8]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	f0c0 8088 	bcc.w	8007d12 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	61da      	str	r2, [r3, #28]
 8007c08:	2304      	movs	r3, #4
 8007c0a:	e08f      	b.n	8007d2c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	0a5b      	lsrs	r3, r3, #9
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	8952      	ldrh	r2, [r2, #10]
 8007c14:	3a01      	subs	r2, #1
 8007c16:	4013      	ands	r3, r2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d17a      	bne.n	8007d12 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	4619      	mov	r1, r3
 8007c24:	4610      	mov	r0, r2
 8007c26:	f7ff fc80 	bl	800752a <get_fat>
 8007c2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d801      	bhi.n	8007c36 <dir_next+0x8c>
 8007c32:	2302      	movs	r3, #2
 8007c34:	e07a      	b.n	8007d2c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d101      	bne.n	8007c42 <dir_next+0x98>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e074      	b.n	8007d2c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d358      	bcc.n	8007cfe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d104      	bne.n	8007c5c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	61da      	str	r2, [r3, #28]
 8007c58:	2304      	movs	r3, #4
 8007c5a:	e067      	b.n	8007d2c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	4619      	mov	r1, r3
 8007c64:	4610      	mov	r0, r2
 8007c66:	f7ff fe59 	bl	800791c <create_chain>
 8007c6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <dir_next+0xcc>
 8007c72:	2307      	movs	r3, #7
 8007c74:	e05a      	b.n	8007d2c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <dir_next+0xd6>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e055      	b.n	8007d2c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c86:	d101      	bne.n	8007c8c <dir_next+0xe2>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e04f      	b.n	8007d2c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff fb4d 	bl	800732c <sync_window>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <dir_next+0xf2>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e047      	b.n	8007d2c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3330      	adds	r3, #48	; 0x30
 8007ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff f977 	bl	8006f9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007cac:	2300      	movs	r3, #0
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	6979      	ldr	r1, [r7, #20]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff fc1a 	bl	80074ec <clust2sect>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8007cbe:	e012      	b.n	8007ce6 <dir_next+0x13c>
						fs->wflag = 1;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff fb30 	bl	800732c <sync_window>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <dir_next+0x12c>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e02a      	b.n	8007d2c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	895b      	ldrh	r3, [r3, #10]
 8007cea:	461a      	mov	r2, r3
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d3e6      	bcc.n	8007cc0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad2      	subs	r2, r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d04:	6979      	ldr	r1, [r7, #20]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff fbf0 	bl	80074ec <clust2sect>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d24:	441a      	add	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007d44:	2100      	movs	r1, #0
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff feb4 	bl	8007ab4 <dir_sdi>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d12b      	bne.n	8007dae <dir_alloc+0x7a>
		n = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff fb27 	bl	80073b4 <move_window>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d11d      	bne.n	8007dac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2be5      	cmp	r3, #229	; 0xe5
 8007d78:	d004      	beq.n	8007d84 <dir_alloc+0x50>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d107      	bne.n	8007d94 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	3301      	adds	r3, #1
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d102      	bne.n	8007d98 <dir_alloc+0x64>
 8007d92:	e00c      	b.n	8007dae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007d94:	2300      	movs	r3, #0
 8007d96:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007d98:	2101      	movs	r1, #1
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff ff05 	bl	8007baa <dir_next>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0d7      	beq.n	8007d5a <dir_alloc+0x26>
 8007daa:	e000      	b.n	8007dae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007dac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d101      	bne.n	8007db8 <dir_alloc+0x84>
 8007db4:	2307      	movs	r3, #7
 8007db6:	75fb      	strb	r3, [r7, #23]
	return res;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	331a      	adds	r3, #26
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff f83f 	bl	8006e54 <ld_word>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d109      	bne.n	8007df6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	3314      	adds	r3, #20
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff f834 	bl	8006e54 <ld_word>
 8007dec:	4603      	mov	r3, r0
 8007dee:	041b      	lsls	r3, r3, #16
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007df6:	68fb      	ldr	r3, [r7, #12]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	331a      	adds	r3, #26
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	b292      	uxth	r2, r2
 8007e14:	4611      	mov	r1, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff f857 	bl	8006eca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d109      	bne.n	8007e38 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f103 0214 	add.w	r2, r3, #20
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	0c1b      	lsrs	r3, r3, #16
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	4619      	mov	r1, r3
 8007e32:	4610      	mov	r0, r2
 8007e34:	f7ff f849 	bl	8006eca <st_word>
	}
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007e4e:	2100      	movs	r1, #0
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff fe2f 	bl	8007ab4 <dir_sdi>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <dir_find+0x24>
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	e03e      	b.n	8007ee2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6938      	ldr	r0, [r7, #16]
 8007e6c:	f7ff faa2 	bl	80073b4 <move_window>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d12f      	bne.n	8007eda <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <dir_find+0x4e>
 8007e88:	2304      	movs	r3, #4
 8007e8a:	75fb      	strb	r3, [r7, #23]
 8007e8c:	e028      	b.n	8007ee0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	330b      	adds	r3, #11
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	330b      	adds	r3, #11
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <dir_find+0x86>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a18      	ldr	r0, [r3, #32]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3324      	adds	r3, #36	; 0x24
 8007eb8:	220b      	movs	r2, #11
 8007eba:	4619      	mov	r1, r3
 8007ebc:	f7ff f888 	bl	8006fd0 <mem_cmp>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00b      	beq.n	8007ede <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff fe6e 	bl	8007baa <dir_next>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0c5      	beq.n	8007e64 <dir_find+0x24>
 8007ed8:	e002      	b.n	8007ee0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ede:	bf00      	nop

	return res;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007ef8:	2101      	movs	r1, #1
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7ff ff1a 	bl	8007d34 <dir_alloc>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d11c      	bne.n	8007f44 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68b8      	ldr	r0, [r7, #8]
 8007f12:	f7ff fa4f 	bl	80073b4 <move_window>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d111      	bne.n	8007f44 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	2220      	movs	r2, #32
 8007f26:	2100      	movs	r1, #0
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff f836 	bl	8006f9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a18      	ldr	r0, [r3, #32]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3324      	adds	r3, #36	; 0x24
 8007f36:	220b      	movs	r2, #11
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f7ff f80d 	bl	8006f58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2201      	movs	r2, #1
 8007f42:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3324      	adds	r3, #36	; 0x24
 8007f64:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007f66:	220b      	movs	r2, #11
 8007f68:	2120      	movs	r1, #32
 8007f6a:	68b8      	ldr	r0, [r7, #8]
 8007f6c:	f7ff f815 	bl	8006f9a <mem_set>
	si = i = 0; ni = 8;
 8007f70:	2300      	movs	r3, #0
 8007f72:	613b      	str	r3, [r7, #16]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	2308      	movs	r3, #8
 8007f7a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	61fa      	str	r2, [r7, #28]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f8a:	7efb      	ldrb	r3, [r7, #27]
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d94e      	bls.n	800802e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007f90:	7efb      	ldrb	r3, [r7, #27]
 8007f92:	2b2f      	cmp	r3, #47	; 0x2f
 8007f94:	d006      	beq.n	8007fa4 <create_name+0x54>
 8007f96:	7efb      	ldrb	r3, [r7, #27]
 8007f98:	2b5c      	cmp	r3, #92	; 0x5c
 8007f9a:	d110      	bne.n	8007fbe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007f9c:	e002      	b.n	8007fa4 <create_name+0x54>
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	4413      	add	r3, r2
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b2f      	cmp	r3, #47	; 0x2f
 8007fae:	d0f6      	beq.n	8007f9e <create_name+0x4e>
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b5c      	cmp	r3, #92	; 0x5c
 8007fba:	d0f0      	beq.n	8007f9e <create_name+0x4e>
			break;
 8007fbc:	e038      	b.n	8008030 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007fbe:	7efb      	ldrb	r3, [r7, #27]
 8007fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8007fc2:	d003      	beq.n	8007fcc <create_name+0x7c>
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d30c      	bcc.n	8007fe6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2b0b      	cmp	r3, #11
 8007fd0:	d002      	beq.n	8007fd8 <create_name+0x88>
 8007fd2:	7efb      	ldrb	r3, [r7, #27]
 8007fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8007fd6:	d001      	beq.n	8007fdc <create_name+0x8c>
 8007fd8:	2306      	movs	r3, #6
 8007fda:	e044      	b.n	8008066 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007fdc:	2308      	movs	r3, #8
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	230b      	movs	r3, #11
 8007fe2:	617b      	str	r3, [r7, #20]
			continue;
 8007fe4:	e022      	b.n	800802c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007fe6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	da04      	bge.n	8007ff8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007fee:	7efb      	ldrb	r3, [r7, #27]
 8007ff0:	3b80      	subs	r3, #128	; 0x80
 8007ff2:	4a1f      	ldr	r2, [pc, #124]	; (8008070 <create_name+0x120>)
 8007ff4:	5cd3      	ldrb	r3, [r2, r3]
 8007ff6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007ff8:	7efb      	ldrb	r3, [r7, #27]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	481d      	ldr	r0, [pc, #116]	; (8008074 <create_name+0x124>)
 8007ffe:	f7ff f80e 	bl	800701e <chk_chr>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <create_name+0xbc>
 8008008:	2306      	movs	r3, #6
 800800a:	e02c      	b.n	8008066 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800800c:	7efb      	ldrb	r3, [r7, #27]
 800800e:	2b60      	cmp	r3, #96	; 0x60
 8008010:	d905      	bls.n	800801e <create_name+0xce>
 8008012:	7efb      	ldrb	r3, [r7, #27]
 8008014:	2b7a      	cmp	r3, #122	; 0x7a
 8008016:	d802      	bhi.n	800801e <create_name+0xce>
 8008018:	7efb      	ldrb	r3, [r7, #27]
 800801a:	3b20      	subs	r3, #32
 800801c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	613a      	str	r2, [r7, #16]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	4413      	add	r3, r2
 8008028:	7efa      	ldrb	r2, [r7, #27]
 800802a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800802c:	e7a6      	b.n	8007f7c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800802e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	441a      	add	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <create_name+0xf4>
 8008040:	2306      	movs	r3, #6
 8008042:	e010      	b.n	8008066 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2be5      	cmp	r3, #229	; 0xe5
 800804a:	d102      	bne.n	8008052 <create_name+0x102>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2205      	movs	r2, #5
 8008050:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008052:	7efb      	ldrb	r3, [r7, #27]
 8008054:	2b20      	cmp	r3, #32
 8008056:	d801      	bhi.n	800805c <create_name+0x10c>
 8008058:	2204      	movs	r2, #4
 800805a:	e000      	b.n	800805e <create_name+0x10e>
 800805c:	2200      	movs	r2, #0
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	330b      	adds	r3, #11
 8008062:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008064:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008066:	4618      	mov	r0, r3
 8008068:	3720      	adds	r7, #32
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	080099ec 	.word	0x080099ec
 8008074:	08009984 	.word	0x08009984

08008078 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800808c:	e002      	b.n	8008094 <follow_path+0x1c>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	3301      	adds	r3, #1
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b2f      	cmp	r3, #47	; 0x2f
 800809a:	d0f8      	beq.n	800808e <follow_path+0x16>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b5c      	cmp	r3, #92	; 0x5c
 80080a2:	d0f4      	beq.n	800808e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	2200      	movs	r2, #0
 80080a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b1f      	cmp	r3, #31
 80080b0:	d80a      	bhi.n	80080c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2280      	movs	r2, #128	; 0x80
 80080b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80080ba:	2100      	movs	r1, #0
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff fcf9 	bl	8007ab4 <dir_sdi>
 80080c2:	4603      	mov	r3, r0
 80080c4:	75fb      	strb	r3, [r7, #23]
 80080c6:	e043      	b.n	8008150 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080c8:	463b      	mov	r3, r7
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff ff3f 	bl	8007f50 <create_name>
 80080d2:	4603      	mov	r3, r0
 80080d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d134      	bne.n	8008146 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff feaf 	bl	8007e40 <dir_find>
 80080e2:	4603      	mov	r3, r0
 80080e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d127      	bne.n	800814a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d122      	bne.n	800814a <follow_path+0xd2>
 8008104:	2305      	movs	r3, #5
 8008106:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008108:	e01f      	b.n	800814a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800810a:	7afb      	ldrb	r3, [r7, #11]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d11c      	bne.n	800814e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	799b      	ldrb	r3, [r3, #6]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b00      	cmp	r3, #0
 800811e:	d102      	bne.n	8008126 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008120:	2305      	movs	r3, #5
 8008122:	75fb      	strb	r3, [r7, #23]
 8008124:	e014      	b.n	8008150 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008134:	4413      	add	r3, r2
 8008136:	4619      	mov	r1, r3
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f7ff fe42 	bl	8007dc2 <ld_clust>
 800813e:	4602      	mov	r2, r0
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008144:	e7c0      	b.n	80080c8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008146:	bf00      	nop
 8008148:	e002      	b.n	8008150 <follow_path+0xd8>
				break;
 800814a:	bf00      	nop
 800814c:	e000      	b.n	8008150 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800814e:	bf00      	nop
			}
		}
	}

	return res;
 8008150:	7dfb      	ldrb	r3, [r7, #23]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800815a:	b480      	push	{r7}
 800815c:	b087      	sub	sp, #28
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008162:	f04f 33ff 	mov.w	r3, #4294967295
 8008166:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d031      	beq.n	80081d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	e002      	b.n	800817e <get_ldnumber+0x24>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	3301      	adds	r3, #1
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b20      	cmp	r3, #32
 8008184:	d903      	bls.n	800818e <get_ldnumber+0x34>
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b3a      	cmp	r3, #58	; 0x3a
 800818c:	d1f4      	bne.n	8008178 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b3a      	cmp	r3, #58	; 0x3a
 8008194:	d11c      	bne.n	80081d0 <get_ldnumber+0x76>
			tp = *path;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	60fa      	str	r2, [r7, #12]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	3b30      	subs	r3, #48	; 0x30
 80081a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b09      	cmp	r3, #9
 80081ac:	d80e      	bhi.n	80081cc <get_ldnumber+0x72>
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d10a      	bne.n	80081cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d107      	bne.n	80081cc <get_ldnumber+0x72>
					vol = (int)i;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	3301      	adds	r3, #1
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	e002      	b.n	80081d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80081d0:	2300      	movs	r3, #0
 80081d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80081d4:	693b      	ldr	r3, [r7, #16]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	70da      	strb	r2, [r3, #3]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295
 80081fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff f8d8 	bl	80073b4 <move_window>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <check_fs+0x2a>
 800820a:	2304      	movs	r3, #4
 800820c:	e038      	b.n	8008280 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3330      	adds	r3, #48	; 0x30
 8008212:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fe1c 	bl	8006e54 <ld_word>
 800821c:	4603      	mov	r3, r0
 800821e:	461a      	mov	r2, r3
 8008220:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008224:	429a      	cmp	r2, r3
 8008226:	d001      	beq.n	800822c <check_fs+0x48>
 8008228:	2303      	movs	r3, #3
 800822a:	e029      	b.n	8008280 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008232:	2be9      	cmp	r3, #233	; 0xe9
 8008234:	d009      	beq.n	800824a <check_fs+0x66>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800823c:	2beb      	cmp	r3, #235	; 0xeb
 800823e:	d11e      	bne.n	800827e <check_fs+0x9a>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008246:	2b90      	cmp	r3, #144	; 0x90
 8008248:	d119      	bne.n	800827e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3330      	adds	r3, #48	; 0x30
 800824e:	3336      	adds	r3, #54	; 0x36
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fe17 	bl	8006e84 <ld_dword>
 8008256:	4603      	mov	r3, r0
 8008258:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800825c:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <check_fs+0xa4>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d101      	bne.n	8008266 <check_fs+0x82>
 8008262:	2300      	movs	r3, #0
 8008264:	e00c      	b.n	8008280 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3330      	adds	r3, #48	; 0x30
 800826a:	3352      	adds	r3, #82	; 0x52
 800826c:	4618      	mov	r0, r3
 800826e:	f7fe fe09 	bl	8006e84 <ld_dword>
 8008272:	4603      	mov	r3, r0
 8008274:	4a05      	ldr	r2, [pc, #20]	; (800828c <check_fs+0xa8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d101      	bne.n	800827e <check_fs+0x9a>
 800827a:	2300      	movs	r3, #0
 800827c:	e000      	b.n	8008280 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800827e:	2302      	movs	r3, #2
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	00544146 	.word	0x00544146
 800828c:	33544146 	.word	0x33544146

08008290 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b096      	sub	sp, #88	; 0x58
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	4613      	mov	r3, r2
 800829c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2200      	movs	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff ff58 	bl	800815a <get_ldnumber>
 80082aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80082ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	da01      	bge.n	80082b6 <find_volume+0x26>
 80082b2:	230b      	movs	r3, #11
 80082b4:	e22e      	b.n	8008714 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80082b6:	4aa8      	ldr	r2, [pc, #672]	; (8008558 <find_volume+0x2c8>)
 80082b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <find_volume+0x3a>
 80082c6:	230c      	movs	r3, #12
 80082c8:	e224      	b.n	8008714 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01a      	beq.n	8008316 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe fd17 	bl	8006d18 <disk_status>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80082f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10c      	bne.n	8008316 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <find_volume+0x82>
 8008302:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008306:	f003 0304 	and.w	r3, r3, #4
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800830e:	230a      	movs	r3, #10
 8008310:	e200      	b.n	8008714 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008312:	2300      	movs	r3, #0
 8008314:	e1fe      	b.n	8008714 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	2200      	movs	r2, #0
 800831a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800831c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831e:	b2da      	uxtb	r2, r3
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fd0f 	bl	8006d4c <disk_initialize>
 800832e:	4603      	mov	r3, r0
 8008330:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008334:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008340:	2303      	movs	r3, #3
 8008342:	e1e7      	b.n	8008714 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008344:	79fb      	ldrb	r3, [r7, #7]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <find_volume+0xca>
 800834a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008356:	230a      	movs	r3, #10
 8008358:	e1dc      	b.n	8008714 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800835a:	2300      	movs	r3, #0
 800835c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800835e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008362:	f7ff ff3f 	bl	80081e4 <check_fs>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800836c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008370:	2b02      	cmp	r3, #2
 8008372:	d14b      	bne.n	800840c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008374:	2300      	movs	r3, #0
 8008376:	643b      	str	r3, [r7, #64]	; 0x40
 8008378:	e01f      	b.n	80083ba <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008388:	4413      	add	r3, r2
 800838a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	3304      	adds	r3, #4
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d006      	beq.n	80083a4 <find_volume+0x114>
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	3308      	adds	r3, #8
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fd72 	bl	8006e84 <ld_dword>
 80083a0:	4602      	mov	r2, r0
 80083a2:	e000      	b.n	80083a6 <find_volume+0x116>
 80083a4:	2200      	movs	r2, #0
 80083a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80083ae:	440b      	add	r3, r1
 80083b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083b6:	3301      	adds	r3, #1
 80083b8:	643b      	str	r3, [r7, #64]	; 0x40
 80083ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d9dc      	bls.n	800837a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80083c0:	2300      	movs	r3, #0
 80083c2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80083c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <find_volume+0x140>
 80083ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083cc:	3b01      	subs	r3, #1
 80083ce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80083d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80083d8:	4413      	add	r3, r2
 80083da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80083de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80083e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <find_volume+0x162>
 80083e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083ea:	f7ff fefb 	bl	80081e4 <check_fs>
 80083ee:	4603      	mov	r3, r0
 80083f0:	e000      	b.n	80083f4 <find_volume+0x164>
 80083f2:	2303      	movs	r3, #3
 80083f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80083f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d905      	bls.n	800840c <find_volume+0x17c>
 8008400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008402:	3301      	adds	r3, #1
 8008404:	643b      	str	r3, [r7, #64]	; 0x40
 8008406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008408:	2b03      	cmp	r3, #3
 800840a:	d9e1      	bls.n	80083d0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800840c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008410:	2b04      	cmp	r3, #4
 8008412:	d101      	bne.n	8008418 <find_volume+0x188>
 8008414:	2301      	movs	r3, #1
 8008416:	e17d      	b.n	8008714 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800841c:	2b01      	cmp	r3, #1
 800841e:	d901      	bls.n	8008424 <find_volume+0x194>
 8008420:	230d      	movs	r3, #13
 8008422:	e177      	b.n	8008714 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	3330      	adds	r3, #48	; 0x30
 8008428:	330b      	adds	r3, #11
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fd12 	bl	8006e54 <ld_word>
 8008430:	4603      	mov	r3, r0
 8008432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008436:	d001      	beq.n	800843c <find_volume+0x1ac>
 8008438:	230d      	movs	r3, #13
 800843a:	e16b      	b.n	8008714 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	3330      	adds	r3, #48	; 0x30
 8008440:	3316      	adds	r3, #22
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fd06 	bl	8006e54 <ld_word>
 8008448:	4603      	mov	r3, r0
 800844a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800844c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d106      	bne.n	8008460 <find_volume+0x1d0>
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	3330      	adds	r3, #48	; 0x30
 8008456:	3324      	adds	r3, #36	; 0x24
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe fd13 	bl	8006e84 <ld_dword>
 800845e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008464:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008468:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	789b      	ldrb	r3, [r3, #2]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d005      	beq.n	8008484 <find_volume+0x1f4>
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	789b      	ldrb	r3, [r3, #2]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d001      	beq.n	8008484 <find_volume+0x1f4>
 8008480:	230d      	movs	r3, #13
 8008482:	e147      	b.n	8008714 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	789b      	ldrb	r3, [r3, #2]
 8008488:	461a      	mov	r2, r3
 800848a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848c:	fb02 f303 	mul.w	r3, r2, r3
 8008490:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008498:	b29a      	uxth	r2, r3
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	895b      	ldrh	r3, [r3, #10]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d008      	beq.n	80084b8 <find_volume+0x228>
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	895b      	ldrh	r3, [r3, #10]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	895b      	ldrh	r3, [r3, #10]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	4013      	ands	r3, r2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <find_volume+0x22c>
 80084b8:	230d      	movs	r3, #13
 80084ba:	e12b      	b.n	8008714 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	3330      	adds	r3, #48	; 0x30
 80084c0:	3311      	adds	r3, #17
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fcc6 	bl	8006e54 <ld_word>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461a      	mov	r2, r3
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	891b      	ldrh	r3, [r3, #8]
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <find_volume+0x252>
 80084de:	230d      	movs	r3, #13
 80084e0:	e118      	b.n	8008714 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	3330      	adds	r3, #48	; 0x30
 80084e6:	3313      	adds	r3, #19
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fcb3 	bl	8006e54 <ld_word>
 80084ee:	4603      	mov	r3, r0
 80084f0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80084f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d106      	bne.n	8008506 <find_volume+0x276>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	3330      	adds	r3, #48	; 0x30
 80084fc:	3320      	adds	r3, #32
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe fcc0 	bl	8006e84 <ld_dword>
 8008504:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	3330      	adds	r3, #48	; 0x30
 800850a:	330e      	adds	r3, #14
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe fca1 	bl	8006e54 <ld_word>
 8008512:	4603      	mov	r3, r0
 8008514:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008516:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <find_volume+0x290>
 800851c:	230d      	movs	r3, #13
 800851e:	e0f9      	b.n	8008714 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008520:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008524:	4413      	add	r3, r2
 8008526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008528:	8912      	ldrh	r2, [r2, #8]
 800852a:	0912      	lsrs	r2, r2, #4
 800852c:	b292      	uxth	r2, r2
 800852e:	4413      	add	r3, r2
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	429a      	cmp	r2, r3
 8008538:	d201      	bcs.n	800853e <find_volume+0x2ae>
 800853a:	230d      	movs	r3, #13
 800853c:	e0ea      	b.n	8008714 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800853e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008546:	8952      	ldrh	r2, [r2, #10]
 8008548:	fbb3 f3f2 	udiv	r3, r3, r2
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	d103      	bne.n	800855c <find_volume+0x2cc>
 8008554:	230d      	movs	r3, #13
 8008556:	e0dd      	b.n	8008714 <find_volume+0x484>
 8008558:	24000034 	.word	0x24000034
		fmt = FS_FAT32;
 800855c:	2303      	movs	r3, #3
 800855e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008568:	4293      	cmp	r3, r2
 800856a:	d802      	bhi.n	8008572 <find_volume+0x2e2>
 800856c:	2302      	movs	r3, #2
 800856e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008578:	4293      	cmp	r3, r2
 800857a:	d802      	bhi.n	8008582 <find_volume+0x2f2>
 800857c:	2301      	movs	r3, #1
 800857e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	1c9a      	adds	r2, r3, #2
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800858e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008590:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008594:	441a      	add	r2, r3
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800859a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	441a      	add	r2, r3
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80085a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d11e      	bne.n	80085ea <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	3330      	adds	r3, #48	; 0x30
 80085b0:	332a      	adds	r3, #42	; 0x2a
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe fc4e 	bl	8006e54 <ld_word>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <find_volume+0x332>
 80085be:	230d      	movs	r3, #13
 80085c0:	e0a8      	b.n	8008714 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	891b      	ldrh	r3, [r3, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <find_volume+0x33e>
 80085ca:	230d      	movs	r3, #13
 80085cc:	e0a2      	b.n	8008714 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	3330      	adds	r3, #48	; 0x30
 80085d2:	332c      	adds	r3, #44	; 0x2c
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe fc55 	bl	8006e84 <ld_dword>
 80085da:	4602      	mov	r2, r0
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	647b      	str	r3, [r7, #68]	; 0x44
 80085e8:	e01f      	b.n	800862a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	891b      	ldrh	r3, [r3, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <find_volume+0x366>
 80085f2:	230d      	movs	r3, #13
 80085f4:	e08e      	b.n	8008714 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	6a1a      	ldr	r2, [r3, #32]
 80085fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085fc:	441a      	add	r2, r3
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008602:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008606:	2b02      	cmp	r3, #2
 8008608:	d103      	bne.n	8008612 <find_volume+0x382>
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	e00a      	b.n	8008628 <find_volume+0x398>
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	695a      	ldr	r2, [r3, #20]
 8008616:	4613      	mov	r3, r2
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	4413      	add	r3, r2
 800861c:	085a      	lsrs	r2, r3, #1
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008628:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008630:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008634:	0a5b      	lsrs	r3, r3, #9
 8008636:	429a      	cmp	r2, r3
 8008638:	d201      	bcs.n	800863e <find_volume+0x3ae>
 800863a:	230d      	movs	r3, #13
 800863c:	e06a      	b.n	8008714 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	f04f 32ff 	mov.w	r2, #4294967295
 8008644:	611a      	str	r2, [r3, #16]
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	691a      	ldr	r2, [r3, #16]
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	2280      	movs	r2, #128	; 0x80
 8008652:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008658:	2b03      	cmp	r3, #3
 800865a:	d149      	bne.n	80086f0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	3330      	adds	r3, #48	; 0x30
 8008660:	3330      	adds	r3, #48	; 0x30
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fbf6 	bl	8006e54 <ld_word>
 8008668:	4603      	mov	r3, r0
 800866a:	2b01      	cmp	r3, #1
 800866c:	d140      	bne.n	80086f0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800866e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008670:	3301      	adds	r3, #1
 8008672:	4619      	mov	r1, r3
 8008674:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008676:	f7fe fe9d 	bl	80073b4 <move_window>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d137      	bne.n	80086f0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	2200      	movs	r2, #0
 8008684:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	3330      	adds	r3, #48	; 0x30
 800868a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fbe0 	bl	8006e54 <ld_word>
 8008694:	4603      	mov	r3, r0
 8008696:	461a      	mov	r2, r3
 8008698:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800869c:	429a      	cmp	r2, r3
 800869e:	d127      	bne.n	80086f0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	3330      	adds	r3, #48	; 0x30
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe fbed 	bl	8006e84 <ld_dword>
 80086aa:	4603      	mov	r3, r0
 80086ac:	4a1b      	ldr	r2, [pc, #108]	; (800871c <find_volume+0x48c>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d11e      	bne.n	80086f0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	3330      	adds	r3, #48	; 0x30
 80086b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fbe2 	bl	8006e84 <ld_dword>
 80086c0:	4603      	mov	r3, r0
 80086c2:	4a17      	ldr	r2, [pc, #92]	; (8008720 <find_volume+0x490>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d113      	bne.n	80086f0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	3330      	adds	r3, #48	; 0x30
 80086cc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fbd7 	bl	8006e84 <ld_dword>
 80086d6:	4602      	mov	r2, r0
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	3330      	adds	r3, #48	; 0x30
 80086e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe fbcd 	bl	8006e84 <ld_dword>
 80086ea:	4602      	mov	r2, r0
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80086f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <find_volume+0x494>)
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	3301      	adds	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	4b08      	ldr	r3, [pc, #32]	; (8008724 <find_volume+0x494>)
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <find_volume+0x494>)
 8008706:	881a      	ldrh	r2, [r3, #0]
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800870c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800870e:	f7fe fde9 	bl	80072e4 <clear_lock>
#endif
	return FR_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3758      	adds	r7, #88	; 0x58
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	41615252 	.word	0x41615252
 8008720:	61417272 	.word	0x61417272
 8008724:	24000038 	.word	0x24000038

08008728 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008732:	2309      	movs	r3, #9
 8008734:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01c      	beq.n	8008776 <validate+0x4e>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d018      	beq.n	8008776 <validate+0x4e>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d013      	beq.n	8008776 <validate+0x4e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	889a      	ldrh	r2, [r3, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	88db      	ldrh	r3, [r3, #6]
 8008758:	429a      	cmp	r2, r3
 800875a:	d10c      	bne.n	8008776 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fad8 	bl	8006d18 <disk_status>
 8008768:	4603      	mov	r3, r0
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <validate+0x4e>
			res = FR_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <validate+0x5a>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	e000      	b.n	8008784 <validate+0x5c>
 8008782:	2300      	movs	r3, #0
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	6013      	str	r3, [r2, #0]
	return res;
 8008788:	7bfb      	ldrb	r3, [r7, #15]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80087a6:	f107 0310 	add.w	r3, r7, #16
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff fcd5 	bl	800815a <get_ldnumber>
 80087b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da01      	bge.n	80087bc <f_mount+0x28>
 80087b8:	230b      	movs	r3, #11
 80087ba:	e02b      	b.n	8008814 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80087bc:	4a17      	ldr	r2, [pc, #92]	; (800881c <f_mount+0x88>)
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d005      	beq.n	80087d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80087cc:	69b8      	ldr	r0, [r7, #24]
 80087ce:	f7fe fd89 	bl	80072e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2200      	movs	r2, #0
 80087d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	490d      	ldr	r1, [pc, #52]	; (800881c <f_mount+0x88>)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <f_mount+0x66>
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d001      	beq.n	80087fe <f_mount+0x6a>
 80087fa:	2300      	movs	r3, #0
 80087fc:	e00a      	b.n	8008814 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80087fe:	f107 010c 	add.w	r1, r7, #12
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	2200      	movs	r2, #0
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff fd41 	bl	8008290 <find_volume>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008812:	7dfb      	ldrb	r3, [r7, #23]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3720      	adds	r7, #32
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	24000034 	.word	0x24000034

08008820 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b098      	sub	sp, #96	; 0x60
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4613      	mov	r3, r2
 800882c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <f_open+0x18>
 8008834:	2309      	movs	r3, #9
 8008836:	e1ad      	b.n	8008b94 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008838:	79fb      	ldrb	r3, [r7, #7]
 800883a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800883e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008840:	79fa      	ldrb	r2, [r7, #7]
 8008842:	f107 0110 	add.w	r1, r7, #16
 8008846:	f107 0308 	add.w	r3, r7, #8
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fd20 	bl	8008290 <find_volume>
 8008850:	4603      	mov	r3, r0
 8008852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800885a:	2b00      	cmp	r3, #0
 800885c:	f040 8191 	bne.w	8008b82 <f_open+0x362>
		dj.obj.fs = fs;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	f107 0314 	add.w	r3, r7, #20
 800886a:	4611      	mov	r1, r2
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff fc03 	bl	8008078 <follow_path>
 8008872:	4603      	mov	r3, r0
 8008874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800887c:	2b00      	cmp	r3, #0
 800887e:	d11a      	bne.n	80088b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008880:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008884:	b25b      	sxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	da03      	bge.n	8008892 <f_open+0x72>
				res = FR_INVALID_NAME;
 800888a:	2306      	movs	r3, #6
 800888c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008890:	e011      	b.n	80088b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	f023 0301 	bic.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	bf14      	ite	ne
 800889c:	2301      	movne	r3, #1
 800889e:	2300      	moveq	r3, #0
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	f107 0314 	add.w	r3, r7, #20
 80088a8:	4611      	mov	r1, r2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fbd2 	bl	8007054 <chk_lock>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	f003 031c 	and.w	r3, r3, #28
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d07f      	beq.n	80089c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80088c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d017      	beq.n	80088f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80088c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	d10e      	bne.n	80088ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80088d0:	f7fe fc1c 	bl	800710c <enq_lock>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d006      	beq.n	80088e8 <f_open+0xc8>
 80088da:	f107 0314 	add.w	r3, r7, #20
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff fb03 	bl	8007eea <dir_register>
 80088e4:	4603      	mov	r3, r0
 80088e6:	e000      	b.n	80088ea <f_open+0xca>
 80088e8:	2312      	movs	r3, #18
 80088ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	f043 0308 	orr.w	r3, r3, #8
 80088f4:	71fb      	strb	r3, [r7, #7]
 80088f6:	e010      	b.n	800891a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80088f8:	7ebb      	ldrb	r3, [r7, #26]
 80088fa:	f003 0311 	and.w	r3, r3, #17
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <f_open+0xea>
					res = FR_DENIED;
 8008902:	2307      	movs	r3, #7
 8008904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008908:	e007      	b.n	800891a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <f_open+0xfa>
 8008914:	2308      	movs	r3, #8
 8008916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800891a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800891e:	2b00      	cmp	r3, #0
 8008920:	d168      	bne.n	80089f4 <f_open+0x1d4>
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	f003 0308 	and.w	r3, r3, #8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d063      	beq.n	80089f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800892c:	f7fd ffb6 	bl	800689c <get_fattime>
 8008930:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	330e      	adds	r3, #14
 8008936:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008938:	4618      	mov	r0, r3
 800893a:	f7fe fae1 	bl	8006f00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	3316      	adds	r3, #22
 8008942:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe fadb 	bl	8006f00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	330b      	adds	r3, #11
 800894e:	2220      	movs	r2, #32
 8008950:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008956:	4611      	mov	r1, r2
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fa32 	bl	8007dc2 <ld_clust>
 800895e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008964:	2200      	movs	r2, #0
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff fa4a 	bl	8007e00 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	331c      	adds	r3, #28
 8008970:	2100      	movs	r1, #0
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fac4 	bl	8006f00 <st_dword>
					fs->wflag = 1;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2201      	movs	r2, #1
 800897c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800897e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d037      	beq.n	80089f4 <f_open+0x1d4>
						dw = fs->winsect;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800898a:	f107 0314 	add.w	r3, r7, #20
 800898e:	2200      	movs	r2, #0
 8008990:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe ff5d 	bl	8007852 <remove_chain>
 8008998:	4603      	mov	r3, r0
 800899a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800899e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d126      	bne.n	80089f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fd02 	bl	80073b4 <move_window>
 80089b0:	4603      	mov	r3, r0
 80089b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089ba:	3a01      	subs	r2, #1
 80089bc:	60da      	str	r2, [r3, #12]
 80089be:	e019      	b.n	80089f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80089c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d115      	bne.n	80089f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80089c8:	7ebb      	ldrb	r3, [r7, #26]
 80089ca:	f003 0310 	and.w	r3, r3, #16
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <f_open+0x1ba>
					res = FR_NO_FILE;
 80089d2:	2304      	movs	r3, #4
 80089d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80089d8:	e00c      	b.n	80089f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <f_open+0x1d4>
 80089e4:	7ebb      	ldrb	r3, [r7, #26]
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <f_open+0x1d4>
						res = FR_DENIED;
 80089ee:	2307      	movs	r3, #7
 80089f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80089f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d128      	bne.n	8008a4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80089fc:	79fb      	ldrb	r3, [r7, #7]
 80089fe:	f003 0308 	and.w	r3, r3, #8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	f023 0301 	bic.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	bf14      	ite	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	2300      	moveq	r3, #0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f107 0314 	add.w	r3, r7, #20
 8008a32:	4611      	mov	r1, r2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fe fb8b 	bl	8007150 <inc_lock>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <f_open+0x22e>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f040 8095 	bne.w	8008b82 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff f9af 	bl	8007dc2 <ld_clust>
 8008a64:	4602      	mov	r2, r0
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	331c      	adds	r3, #28
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fa08 	bl	8006e84 <ld_dword>
 8008a74:	4602      	mov	r2, r0
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	88da      	ldrh	r2, [r3, #6]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	79fa      	ldrb	r2, [r7, #7]
 8008a92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3330      	adds	r3, #48	; 0x30
 8008aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe fa72 	bl	8006f9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d060      	beq.n	8008b82 <f_open+0x362>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d05c      	beq.n	8008b82 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	895b      	ldrh	r3, [r3, #10]
 8008ad4:	025b      	lsls	r3, r3, #9
 8008ad6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ae4:	e016      	b.n	8008b14 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fd1d 	bl	800752a <get_fat>
 8008af0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d802      	bhi.n	8008afe <f_open+0x2de>
 8008af8:	2302      	movs	r3, #2
 8008afa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b04:	d102      	bne.n	8008b0c <f_open+0x2ec>
 8008b06:	2301      	movs	r3, #1
 8008b08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	657b      	str	r3, [r7, #84]	; 0x54
 8008b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d103      	bne.n	8008b24 <f_open+0x304>
 8008b1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d8e0      	bhi.n	8008ae6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008b2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d127      	bne.n	8008b82 <f_open+0x362>
 8008b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d022      	beq.n	8008b82 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fcd3 	bl	80074ec <clust2sect>
 8008b46:	6478      	str	r0, [r7, #68]	; 0x44
 8008b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d103      	bne.n	8008b56 <f_open+0x336>
						res = FR_INT_ERR;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b54:	e015      	b.n	8008b82 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b58:	0a5a      	lsrs	r2, r3, #9
 8008b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5c:	441a      	add	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	7858      	ldrb	r0, [r3, #1]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a1a      	ldr	r2, [r3, #32]
 8008b70:	2301      	movs	r3, #1
 8008b72:	f7fe f911 	bl	8006d98 <disk_read>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <f_open+0x362>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <f_open+0x370>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3760      	adds	r7, #96	; 0x60
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08c      	sub	sp, #48	; 0x30
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f107 0210 	add.w	r2, r7, #16
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fdb3 	bl	8008728 <validate>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d107      	bne.n	8008be0 <f_write+0x44>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	7d5b      	ldrb	r3, [r3, #21]
 8008bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <f_write+0x4a>
 8008be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008be4:	e14b      	b.n	8008e7e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	7d1b      	ldrb	r3, [r3, #20]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <f_write+0x5a>
 8008bf2:	2307      	movs	r3, #7
 8008bf4:	e143      	b.n	8008e7e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	699a      	ldr	r2, [r3, #24]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	441a      	add	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	f080 812d 	bcs.w	8008e62 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c10:	e127      	b.n	8008e62 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f040 80e3 	bne.w	8008de6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	0a5b      	lsrs	r3, r3, #9
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	8952      	ldrh	r2, [r2, #10]
 8008c2a:	3a01      	subs	r2, #1
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d143      	bne.n	8008cbe <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10c      	bne.n	8008c58 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d11a      	bne.n	8008c80 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fe64 	bl	800791c <create_chain>
 8008c54:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c56:	e013      	b.n	8008c80 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d007      	beq.n	8008c70 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	4619      	mov	r1, r3
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f7fe fef0 	bl	8007a4c <clmt_clust>
 8008c6c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c6e:	e007      	b.n	8008c80 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f7fe fe4f 	bl	800791c <create_chain>
 8008c7e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 80f2 	beq.w	8008e6c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d104      	bne.n	8008c98 <f_write+0xfc>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2202      	movs	r2, #2
 8008c92:	755a      	strb	r2, [r3, #21]
 8008c94:	2302      	movs	r3, #2
 8008c96:	e0f2      	b.n	8008e7e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d104      	bne.n	8008caa <f_write+0x10e>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	755a      	strb	r2, [r3, #21]
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e0e9      	b.n	8008e7e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d102      	bne.n	8008cbe <f_write+0x122>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cbc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	7d1b      	ldrb	r3, [r3, #20]
 8008cc2:	b25b      	sxtb	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	da18      	bge.n	8008cfa <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	7858      	ldrb	r0, [r3, #1]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1a      	ldr	r2, [r3, #32]
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f7fe f87e 	bl	8006dd8 <disk_write>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <f_write+0x150>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	755a      	strb	r2, [r3, #21]
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e0c8      	b.n	8008e7e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	7d1b      	ldrb	r3, [r3, #20]
 8008cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fe fbf2 	bl	80074ec <clust2sect>
 8008d08:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <f_write+0x17e>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2202      	movs	r2, #2
 8008d14:	755a      	strb	r2, [r3, #21]
 8008d16:	2302      	movs	r3, #2
 8008d18:	e0b1      	b.n	8008e7e <f_write+0x2e2>
			sect += csect;
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	4413      	add	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	0a5b      	lsrs	r3, r3, #9
 8008d26:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d03c      	beq.n	8008da8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	4413      	add	r3, r2
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	8952      	ldrh	r2, [r2, #10]
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d905      	bls.n	8008d48 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	895b      	ldrh	r3, [r3, #10]
 8008d40:	461a      	mov	r2, r3
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	7858      	ldrb	r0, [r3, #1]
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	69f9      	ldr	r1, [r7, #28]
 8008d52:	f7fe f841 	bl	8006dd8 <disk_write>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <f_write+0x1ca>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	755a      	strb	r2, [r3, #21]
 8008d62:	2301      	movs	r3, #1
 8008d64:	e08b      	b.n	8008e7e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a1a      	ldr	r2, [r3, #32]
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	6a3a      	ldr	r2, [r7, #32]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d915      	bls.n	8008da0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a1a      	ldr	r2, [r3, #32]
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	025b      	lsls	r3, r3, #9
 8008d84:	69fa      	ldr	r2, [r7, #28]
 8008d86:	4413      	add	r3, r2
 8008d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f7fe f8e3 	bl	8006f58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	7d1b      	ldrb	r3, [r3, #20]
 8008d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	025b      	lsls	r3, r3, #9
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008da6:	e03f      	b.n	8008e28 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d016      	beq.n	8008de0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	699a      	ldr	r2, [r3, #24]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d210      	bcs.n	8008de0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	7858      	ldrb	r0, [r3, #1]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dc8:	2301      	movs	r3, #1
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	f7fd ffe4 	bl	8006d98 <disk_read>
 8008dd0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d004      	beq.n	8008de0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	755a      	strb	r2, [r3, #21]
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e04e      	b.n	8008e7e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d901      	bls.n	8008e00 <f_write+0x264>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	4413      	add	r3, r2
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	69f9      	ldr	r1, [r7, #28]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe f89f 	bl	8006f58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	7d1b      	ldrb	r3, [r3, #20]
 8008e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	4413      	add	r3, r2
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	441a      	add	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	619a      	str	r2, [r3, #24]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	68da      	ldr	r2, [r3, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	bf38      	it	cc
 8008e48:	461a      	movcc	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	60da      	str	r2, [r3, #12]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	441a      	add	r2, r3
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f47f aed4 	bne.w	8008c12 <f_write+0x76>
 8008e6a:	e000      	b.n	8008e6e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e6c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	7d1b      	ldrb	r3, [r3, #20]
 8008e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3730      	adds	r7, #48	; 0x30
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f107 0208 	add.w	r2, r7, #8
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fc46 	bl	8008728 <validate>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d168      	bne.n	8008f78 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	7d1b      	ldrb	r3, [r3, #20]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d062      	beq.n	8008f78 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7d1b      	ldrb	r3, [r3, #20]
 8008eb6:	b25b      	sxtb	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	da15      	bge.n	8008ee8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	7858      	ldrb	r0, [r3, #1]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1a      	ldr	r2, [r3, #32]
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f7fd ff84 	bl	8006dd8 <disk_write>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <f_sync+0x54>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e04f      	b.n	8008f7a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	7d1b      	ldrb	r3, [r3, #20]
 8008ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ee8:	f7fd fcd8 	bl	800689c <get_fattime>
 8008eec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fe fa5c 	bl	80073b4 <move_window>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d138      	bne.n	8008f78 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	330b      	adds	r3, #11
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	330b      	adds	r3, #11
 8008f16:	f042 0220 	orr.w	r2, r2, #32
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6818      	ldr	r0, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	461a      	mov	r2, r3
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	f7fe ff69 	bl	8007e00 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f103 021c 	add.w	r2, r3, #28
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	f7fd ffe0 	bl	8006f00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3316      	adds	r3, #22
 8008f44:	6939      	ldr	r1, [r7, #16]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fd ffda 	bl	8006f00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3312      	adds	r3, #18
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fd ffb9 	bl	8006eca <st_word>
					fs->wflag = 1;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe fa55 	bl	8007410 <sync_fs>
 8008f66:	4603      	mov	r3, r0
 8008f68:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7d1b      	ldrb	r3, [r3, #20]
 8008f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff ff7b 	bl	8008e86 <f_sync>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d118      	bne.n	8008fcc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f107 0208 	add.w	r2, r7, #8
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff fbc0 	bl	8008728 <validate>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10c      	bne.n	8008fcc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe f958 	bl	800726c <dec_lock>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8008fd8:	b590      	push	{r4, r7, lr}
 8008fda:	b09d      	sub	sp, #116	; 0x74
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8008fe8:	2301      	movs	r3, #1
 8008fea:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8008fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ff0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8008ff2:	f107 030c 	add.w	r3, r7, #12
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff f8af 	bl	800815a <get_ldnumber>
 8008ffc:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009000:	2b00      	cmp	r3, #0
 8009002:	da02      	bge.n	800900a <f_mkfs+0x32>
 8009004:	230b      	movs	r3, #11
 8009006:	f000 bc0d 	b.w	8009824 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800900a:	4a94      	ldr	r2, [pc, #592]	; (800925c <f_mkfs+0x284>)
 800900c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <f_mkfs+0x4a>
 8009016:	4a91      	ldr	r2, [pc, #580]	; (800925c <f_mkfs+0x284>)
 8009018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8009022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009024:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8009028:	2300      	movs	r3, #0
 800902a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800902e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009032:	4618      	mov	r0, r3
 8009034:	f7fd fe8a 	bl	8006d4c <disk_initialize>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800903e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <f_mkfs+0x76>
 800904a:	2303      	movs	r3, #3
 800904c:	e3ea      	b.n	8009824 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800904e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <f_mkfs+0x86>
 800905a:	230a      	movs	r3, #10
 800905c:	e3e2      	b.n	8009824 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800905e:	f107 0214 	add.w	r2, r7, #20
 8009062:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009066:	2103      	movs	r1, #3
 8009068:	4618      	mov	r0, r3
 800906a:	f7fd fed5 	bl	8006e18 <disk_ioctl>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10c      	bne.n	800908e <f_mkfs+0xb6>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d009      	beq.n	800908e <f_mkfs+0xb6>
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009080:	d805      	bhi.n	800908e <f_mkfs+0xb6>
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	1e5a      	subs	r2, r3, #1
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	4013      	ands	r3, r2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d001      	beq.n	8009092 <f_mkfs+0xba>
 800908e:	2301      	movs	r3, #1
 8009090:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8009092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009096:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <f_mkfs+0xce>
 800909e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d309      	bcc.n	80090ba <f_mkfs+0xe2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090ac:	d805      	bhi.n	80090ba <f_mkfs+0xe2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	1e5a      	subs	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4013      	ands	r3, r2
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <f_mkfs+0xe6>
 80090ba:	2313      	movs	r3, #19
 80090bc:	e3b2      	b.n	8009824 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80090be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80090cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80090d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	fb02 f303 	mul.w	r3, r2, r3
 80090e0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <f_mkfs+0x114>
 80090e8:	230e      	movs	r3, #14
 80090ea:	e39b      	b.n	8009824 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80090ec:	f107 0210 	add.w	r2, r7, #16
 80090f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80090f4:	2101      	movs	r1, #1
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fd fe8e 	bl	8006e18 <disk_ioctl>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <f_mkfs+0x12e>
 8009102:	2301      	movs	r3, #1
 8009104:	e38e      	b.n	8009824 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009106:	7afb      	ldrb	r3, [r7, #11]
 8009108:	f003 0308 	and.w	r3, r3, #8
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <f_mkfs+0x13c>
 8009110:	2300      	movs	r3, #0
 8009112:	e000      	b.n	8009116 <f_mkfs+0x13e>
 8009114:	233f      	movs	r3, #63	; 0x3f
 8009116:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911c:	429a      	cmp	r2, r3
 800911e:	d901      	bls.n	8009124 <f_mkfs+0x14c>
 8009120:	230e      	movs	r3, #14
 8009122:	e37f      	b.n	8009824 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	2b7f      	cmp	r3, #127	; 0x7f
 8009130:	d801      	bhi.n	8009136 <f_mkfs+0x15e>
 8009132:	230e      	movs	r3, #14
 8009134:	e376      	b.n	8009824 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b80      	cmp	r3, #128	; 0x80
 800913a:	d901      	bls.n	8009140 <f_mkfs+0x168>
 800913c:	2313      	movs	r3, #19
 800913e:	e371      	b.n	8009824 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00d      	beq.n	8009166 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	f003 0307 	and.w	r3, r3, #7
 8009150:	2b02      	cmp	r3, #2
 8009152:	d004      	beq.n	800915e <f_mkfs+0x186>
 8009154:	7afb      	ldrb	r3, [r7, #11]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d103      	bne.n	8009166 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800915e:	2303      	movs	r3, #3
 8009160:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009164:	e009      	b.n	800917a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <f_mkfs+0x19c>
 8009170:	2313      	movs	r3, #19
 8009172:	e357      	b.n	8009824 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8009174:	2302      	movs	r3, #2
 8009176:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800917e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009182:	2b03      	cmp	r3, #3
 8009184:	d13c      	bne.n	8009200 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8009186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009188:	2b00      	cmp	r3, #0
 800918a:	d11b      	bne.n	80091c4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	0c5b      	lsrs	r3, r3, #17
 8009190:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009192:	2300      	movs	r3, #0
 8009194:	64bb      	str	r3, [r7, #72]	; 0x48
 8009196:	2301      	movs	r3, #1
 8009198:	653b      	str	r3, [r7, #80]	; 0x50
 800919a:	e005      	b.n	80091a8 <f_mkfs+0x1d0>
 800919c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800919e:	3301      	adds	r3, #1
 80091a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80091a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	653b      	str	r3, [r7, #80]	; 0x50
 80091a8:	4a2d      	ldr	r2, [pc, #180]	; (8009260 <f_mkfs+0x288>)
 80091aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d007      	beq.n	80091c4 <f_mkfs+0x1ec>
 80091b4:	4a2a      	ldr	r2, [pc, #168]	; (8009260 <f_mkfs+0x288>)
 80091b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091bc:	461a      	mov	r2, r3
 80091be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d2eb      	bcs.n	800919c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091cc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	3302      	adds	r3, #2
 80091d2:	009a      	lsls	r2, r3, #2
 80091d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091d6:	4413      	add	r3, r2
 80091d8:	1e5a      	subs	r2, r3, #1
 80091da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80091e2:	2320      	movs	r3, #32
 80091e4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80091e6:	2300      	movs	r3, #0
 80091e8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d903      	bls.n	80091fc <f_mkfs+0x224>
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	4a1b      	ldr	r2, [pc, #108]	; (8009264 <f_mkfs+0x28c>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d952      	bls.n	80092a2 <f_mkfs+0x2ca>
 80091fc:	230e      	movs	r3, #14
 80091fe:	e311      	b.n	8009824 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8009200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009202:	2b00      	cmp	r3, #0
 8009204:	d11b      	bne.n	800923e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	0b1b      	lsrs	r3, r3, #12
 800920a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800920c:	2300      	movs	r3, #0
 800920e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009210:	2301      	movs	r3, #1
 8009212:	653b      	str	r3, [r7, #80]	; 0x50
 8009214:	e005      	b.n	8009222 <f_mkfs+0x24a>
 8009216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009218:	3301      	adds	r3, #1
 800921a:	64bb      	str	r3, [r7, #72]	; 0x48
 800921c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	653b      	str	r3, [r7, #80]	; 0x50
 8009222:	4a11      	ldr	r2, [pc, #68]	; (8009268 <f_mkfs+0x290>)
 8009224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d007      	beq.n	800923e <f_mkfs+0x266>
 800922e:	4a0e      	ldr	r2, [pc, #56]	; (8009268 <f_mkfs+0x290>)
 8009230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009236:	461a      	mov	r2, r3
 8009238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800923a:	4293      	cmp	r3, r2
 800923c:	d2eb      	bcs.n	8009216 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009242:	fbb2 f3f3 	udiv	r3, r2, r3
 8009246:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800924e:	4293      	cmp	r3, r2
 8009250:	d90c      	bls.n	800926c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	3302      	adds	r3, #2
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800925a:	e012      	b.n	8009282 <f_mkfs+0x2aa>
 800925c:	24000034 	.word	0x24000034
 8009260:	08009a6c 	.word	0x08009a6c
 8009264:	0ffffff5 	.word	0x0ffffff5
 8009268:	08009a7c 	.word	0x08009a7c
				} else {
					fmt = FS_FAT12;
 800926c:	2301      	movs	r3, #1
 800926e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8009272:	6a3a      	ldr	r2, [r7, #32]
 8009274:	4613      	mov	r3, r2
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	4413      	add	r3, r2
 800927a:	3301      	adds	r3, #1
 800927c:	085b      	lsrs	r3, r3, #1
 800927e:	3303      	adds	r3, #3
 8009280:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8009282:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009286:	4413      	add	r3, r2
 8009288:	1e5a      	subs	r2, r3, #1
 800928a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800928c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009290:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8009292:	2301      	movs	r3, #1
 8009294:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8009296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800929c:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a0:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80092a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092a6:	4413      	add	r3, r2
 80092a8:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80092aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ae:	fb02 f203 	mul.w	r2, r2, r3
 80092b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092b4:	4413      	add	r3, r2
 80092b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092b8:	4413      	add	r3, r2
 80092ba:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	1e5a      	subs	r2, r3, #1
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	425b      	negs	r3, r3
 80092c8:	401a      	ands	r2, r3
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80092d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d108      	bne.n	80092ea <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80092d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092dc:	4413      	add	r3, r2
 80092de:	657b      	str	r3, [r7, #84]	; 0x54
 80092e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092e4:	4413      	add	r3, r2
 80092e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80092e8:	e006      	b.n	80092f8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80092ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092f4:	4413      	add	r3, r2
 80092f6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80092f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fa:	011a      	lsls	r2, r3, #4
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	441a      	add	r2, r3
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	1ad2      	subs	r2, r2, r3
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	429a      	cmp	r2, r3
 8009308:	d901      	bls.n	800930e <f_mkfs+0x336>
 800930a:	230e      	movs	r3, #14
 800930c:	e28a      	b.n	8009824 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009312:	1ad2      	subs	r2, r2, r3
 8009314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009318:	fb01 f303 	mul.w	r3, r1, r3
 800931c:	1ad2      	subs	r2, r2, r3
 800931e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009320:	1ad2      	subs	r2, r2, r3
 8009322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009324:	fbb2 f3f3 	udiv	r3, r2, r3
 8009328:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800932a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800932e:	2b03      	cmp	r3, #3
 8009330:	d10f      	bne.n	8009352 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009338:	4293      	cmp	r3, r2
 800933a:	d80a      	bhi.n	8009352 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d105      	bne.n	800934e <f_mkfs+0x376>
 8009342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	607b      	str	r3, [r7, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d144      	bne.n	80093d8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800934e:	230e      	movs	r3, #14
 8009350:	e268      	b.n	8009824 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8009352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009356:	2b02      	cmp	r3, #2
 8009358:	d133      	bne.n	80093c2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009360:	4293      	cmp	r3, r2
 8009362:	d91e      	bls.n	80093a2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d107      	bne.n	800937a <f_mkfs+0x3a2>
 800936a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d803      	bhi.n	800937a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8009372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	607b      	str	r3, [r7, #4]
 8009378:	e033      	b.n	80093e2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d003      	beq.n	800938c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8009384:	2303      	movs	r3, #3
 8009386:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800938a:	e02a      	b.n	80093e2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d105      	bne.n	800939e <f_mkfs+0x3c6>
 8009392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009394:	005b      	lsls	r3, r3, #1
 8009396:	607b      	str	r3, [r7, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b80      	cmp	r3, #128	; 0x80
 800939c:	d91e      	bls.n	80093dc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800939e:	230e      	movs	r3, #14
 80093a0:	e240      	b.n	8009824 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d80a      	bhi.n	80093c2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d105      	bne.n	80093be <f_mkfs+0x3e6>
 80093b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	607b      	str	r3, [r7, #4]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b80      	cmp	r3, #128	; 0x80
 80093bc:	d910      	bls.n	80093e0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80093be:	230e      	movs	r3, #14
 80093c0:	e230      	b.n	8009824 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80093c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d10c      	bne.n	80093e4 <f_mkfs+0x40c>
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d907      	bls.n	80093e4 <f_mkfs+0x40c>
 80093d4:	230e      	movs	r3, #14
 80093d6:	e225      	b.n	8009824 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80093d8:	bf00      	nop
 80093da:	e6ce      	b.n	800917a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80093dc:	bf00      	nop
 80093de:	e6cc      	b.n	800917a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80093e0:	bf00      	nop
			pau = au;
 80093e2:	e6ca      	b.n	800917a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80093e4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80093e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093e8:	461a      	mov	r2, r3
 80093ea:	2100      	movs	r1, #0
 80093ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ee:	f7fd fdd4 	bl	8006f9a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80093f2:	220b      	movs	r2, #11
 80093f4:	49bc      	ldr	r1, [pc, #752]	; (80096e8 <f_mkfs+0x710>)
 80093f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093f8:	f7fd fdae 	bl	8006f58 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	330b      	adds	r3, #11
 8009400:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009402:	4611      	mov	r1, r2
 8009404:	4618      	mov	r0, r3
 8009406:	f7fd fd60 	bl	8006eca <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	330d      	adds	r3, #13
 800940e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009410:	b2d2      	uxtb	r2, r2
 8009412:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	330e      	adds	r3, #14
 8009418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800941a:	b292      	uxth	r2, r2
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7fd fd53 	bl	8006eca <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	3310      	adds	r3, #16
 8009428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	f103 0211 	add.w	r2, r3, #17
 8009434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009438:	2b03      	cmp	r3, #3
 800943a:	d002      	beq.n	8009442 <f_mkfs+0x46a>
 800943c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800943e:	b29b      	uxth	r3, r3
 8009440:	e000      	b.n	8009444 <f_mkfs+0x46c>
 8009442:	2300      	movs	r3, #0
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f7fd fd3f 	bl	8006eca <st_word>
		if (sz_vol < 0x10000) {
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009452:	d208      	bcs.n	8009466 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	3313      	adds	r3, #19
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	b292      	uxth	r2, r2
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7fd fd33 	bl	8006eca <st_word>
 8009464:	e006      	b.n	8009474 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	3320      	adds	r3, #32
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4611      	mov	r1, r2
 800946e:	4618      	mov	r0, r3
 8009470:	f7fd fd46 	bl	8006f00 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	3315      	adds	r3, #21
 8009478:	22f8      	movs	r2, #248	; 0xf8
 800947a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	3318      	adds	r3, #24
 8009480:	213f      	movs	r1, #63	; 0x3f
 8009482:	4618      	mov	r0, r3
 8009484:	f7fd fd21 	bl	8006eca <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8009488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948a:	331a      	adds	r3, #26
 800948c:	21ff      	movs	r1, #255	; 0xff
 800948e:	4618      	mov	r0, r3
 8009490:	f7fd fd1b 	bl	8006eca <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8009494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009496:	331c      	adds	r3, #28
 8009498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800949a:	4618      	mov	r0, r3
 800949c:	f7fd fd30 	bl	8006f00 <st_dword>
		if (fmt == FS_FAT32) {
 80094a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d131      	bne.n	800950c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80094ae:	f7fd f9f5 	bl	800689c <get_fattime>
 80094b2:	4603      	mov	r3, r0
 80094b4:	4619      	mov	r1, r3
 80094b6:	4620      	mov	r0, r4
 80094b8:	f7fd fd22 	bl	8006f00 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	3324      	adds	r3, #36	; 0x24
 80094c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fd fd1c 	bl	8006f00 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	332c      	adds	r3, #44	; 0x2c
 80094cc:	2102      	movs	r1, #2
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fd fd16 	bl	8006f00 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	3330      	adds	r3, #48	; 0x30
 80094d8:	2101      	movs	r1, #1
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fd fcf5 	bl	8006eca <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80094e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e2:	3332      	adds	r3, #50	; 0x32
 80094e4:	2106      	movs	r1, #6
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fd fcef 	bl	8006eca <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	3340      	adds	r3, #64	; 0x40
 80094f0:	2280      	movs	r2, #128	; 0x80
 80094f2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	3342      	adds	r3, #66	; 0x42
 80094f8:	2229      	movs	r2, #41	; 0x29
 80094fa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	3347      	adds	r3, #71	; 0x47
 8009500:	2213      	movs	r2, #19
 8009502:	497a      	ldr	r1, [pc, #488]	; (80096ec <f_mkfs+0x714>)
 8009504:	4618      	mov	r0, r3
 8009506:	f7fd fd27 	bl	8006f58 <mem_cpy>
 800950a:	e020      	b.n	800954e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8009512:	f7fd f9c3 	bl	800689c <get_fattime>
 8009516:	4603      	mov	r3, r0
 8009518:	4619      	mov	r1, r3
 800951a:	4620      	mov	r0, r4
 800951c:	f7fd fcf0 	bl	8006f00 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	3316      	adds	r3, #22
 8009524:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009526:	b292      	uxth	r2, r2
 8009528:	4611      	mov	r1, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f7fd fccd 	bl	8006eca <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	3324      	adds	r3, #36	; 0x24
 8009534:	2280      	movs	r2, #128	; 0x80
 8009536:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	3326      	adds	r3, #38	; 0x26
 800953c:	2229      	movs	r2, #41	; 0x29
 800953e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	332b      	adds	r3, #43	; 0x2b
 8009544:	2213      	movs	r2, #19
 8009546:	496a      	ldr	r1, [pc, #424]	; (80096f0 <f_mkfs+0x718>)
 8009548:	4618      	mov	r0, r3
 800954a:	f7fd fd05 	bl	8006f58 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009554:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009558:	4618      	mov	r0, r3
 800955a:	f7fd fcb6 	bl	8006eca <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800955e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009562:	2301      	movs	r3, #1
 8009564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009568:	f7fd fc36 	bl	8006dd8 <disk_write>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <f_mkfs+0x59e>
 8009572:	2301      	movs	r3, #1
 8009574:	e156      	b.n	8009824 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8009576:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800957a:	2b03      	cmp	r3, #3
 800957c:	d140      	bne.n	8009600 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	1d9a      	adds	r2, r3, #6
 8009582:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009586:	2301      	movs	r3, #1
 8009588:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800958a:	f7fd fc25 	bl	8006dd8 <disk_write>
			mem_set(buf, 0, ss);
 800958e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009590:	461a      	mov	r2, r3
 8009592:	2100      	movs	r1, #0
 8009594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009596:	f7fd fd00 	bl	8006f9a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800959a:	4956      	ldr	r1, [pc, #344]	; (80096f4 <f_mkfs+0x71c>)
 800959c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800959e:	f7fd fcaf 	bl	8006f00 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80095a8:	4953      	ldr	r1, [pc, #332]	; (80096f8 <f_mkfs+0x720>)
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fd fca8 	bl	8006f00 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7fd fc9f 	bl	8006f00 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80095c8:	2102      	movs	r1, #2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fd fc98 	bl	8006f00 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fd fc75 	bl	8006eca <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	1dda      	adds	r2, r3, #7
 80095e4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80095e8:	2301      	movs	r3, #1
 80095ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095ec:	f7fd fbf4 	bl	8006dd8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80095f8:	2301      	movs	r3, #1
 80095fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095fc:	f7fd fbec 	bl	8006dd8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8009600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009602:	2100      	movs	r1, #0
 8009604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009606:	f7fd fcc8 	bl	8006f9a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800960a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800960c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800960e:	2300      	movs	r3, #0
 8009610:	64bb      	str	r3, [r7, #72]	; 0x48
 8009612:	e04b      	b.n	80096ac <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8009614:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009618:	2b03      	cmp	r3, #3
 800961a:	d113      	bne.n	8009644 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800961c:	f06f 0107 	mvn.w	r1, #7
 8009620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009622:	f7fd fc6d 	bl	8006f00 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	3304      	adds	r3, #4
 800962a:	f04f 31ff 	mov.w	r1, #4294967295
 800962e:	4618      	mov	r0, r3
 8009630:	f7fd fc66 	bl	8006f00 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	3308      	adds	r3, #8
 8009638:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800963c:	4618      	mov	r0, r3
 800963e:	f7fd fc5f 	bl	8006f00 <st_dword>
 8009642:	e00b      	b.n	800965c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8009644:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009648:	2b01      	cmp	r3, #1
 800964a:	d101      	bne.n	8009650 <f_mkfs+0x678>
 800964c:	4b2b      	ldr	r3, [pc, #172]	; (80096fc <f_mkfs+0x724>)
 800964e:	e001      	b.n	8009654 <f_mkfs+0x67c>
 8009650:	f06f 0307 	mvn.w	r3, #7
 8009654:	4619      	mov	r1, r3
 8009656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009658:	f7fd fc52 	bl	8006f00 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800965c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800965e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8009660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009664:	4293      	cmp	r3, r2
 8009666:	bf28      	it	cs
 8009668:	4613      	movcs	r3, r2
 800966a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800966c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009672:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009676:	f7fd fbaf 	bl	8006dd8 <disk_write>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <f_mkfs+0x6ac>
 8009680:	2301      	movs	r3, #1
 8009682:	e0cf      	b.n	8009824 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8009684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009686:	461a      	mov	r2, r3
 8009688:	2100      	movs	r1, #0
 800968a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800968c:	f7fd fc85 	bl	8006f9a <mem_set>
				sect += n; nsect -= n;
 8009690:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009694:	4413      	add	r3, r2
 8009696:	667b      	str	r3, [r7, #100]	; 0x64
 8009698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800969a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80096a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1dc      	bne.n	8009660 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80096a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096a8:	3301      	adds	r3, #1
 80096aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80096ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d3af      	bcc.n	8009614 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80096b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d101      	bne.n	80096c0 <f_mkfs+0x6e8>
 80096bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096be:	e000      	b.n	80096c2 <f_mkfs+0x6ea>
 80096c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c2:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80096c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	4293      	cmp	r3, r2
 80096ca:	bf28      	it	cs
 80096cc:	4613      	movcs	r3, r2
 80096ce:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80096d0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80096d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80096d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096da:	f7fd fb7d 	bl	8006dd8 <disk_write>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00d      	beq.n	8009700 <f_mkfs+0x728>
 80096e4:	2301      	movs	r3, #1
 80096e6:	e09d      	b.n	8009824 <f_mkfs+0x84c>
 80096e8:	08009994 	.word	0x08009994
 80096ec:	080099a0 	.word	0x080099a0
 80096f0:	080099b4 	.word	0x080099b4
 80096f4:	41615252 	.word	0x41615252
 80096f8:	61417272 	.word	0x61417272
 80096fc:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8009700:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009704:	4413      	add	r3, r2
 8009706:	667b      	str	r3, [r7, #100]	; 0x64
 8009708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800970a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8009710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1d6      	bne.n	80096c4 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8009716:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800971a:	2b03      	cmp	r3, #3
 800971c:	d103      	bne.n	8009726 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800971e:	230c      	movs	r3, #12
 8009720:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009724:	e010      	b.n	8009748 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800972c:	d303      	bcc.n	8009736 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800972e:	2306      	movs	r3, #6
 8009730:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009734:	e008      	b.n	8009748 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8009736:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800973a:	2b02      	cmp	r3, #2
 800973c:	d101      	bne.n	8009742 <f_mkfs+0x76a>
 800973e:	2304      	movs	r3, #4
 8009740:	e000      	b.n	8009744 <f_mkfs+0x76c>
 8009742:	2301      	movs	r3, #1
 8009744:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d15b      	bne.n	800980a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8009752:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009754:	461a      	mov	r2, r3
 8009756:	2100      	movs	r1, #0
 8009758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800975a:	f7fd fc1e 	bl	8006f9a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009764:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009768:	4618      	mov	r0, r3
 800976a:	f7fd fbae 	bl	8006eca <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009774:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	2200      	movs	r2, #0
 800977a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	3301      	adds	r3, #1
 8009780:	2201      	movs	r2, #1
 8009782:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	3302      	adds	r3, #2
 8009788:	2201      	movs	r2, #1
 800978a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	3303      	adds	r3, #3
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	3304      	adds	r3, #4
 8009798:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800979c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	441a      	add	r2, r3
 80097a4:	4b21      	ldr	r3, [pc, #132]	; (800982c <f_mkfs+0x854>)
 80097a6:	fba3 1302 	umull	r1, r3, r3, r2
 80097aa:	1ad2      	subs	r2, r2, r3
 80097ac:	0852      	lsrs	r2, r2, #1
 80097ae:	4413      	add	r3, r2
 80097b0:	0b5b      	lsrs	r3, r3, #13
 80097b2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	3305      	adds	r3, #5
 80097b8:	22fe      	movs	r2, #254	; 0xfe
 80097ba:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80097bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097be:	089b      	lsrs	r3, r3, #2
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	3306      	adds	r3, #6
 80097c6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80097ca:	b2d2      	uxtb	r2, r2
 80097cc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	3307      	adds	r3, #7
 80097d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097d4:	b2d2      	uxtb	r2, r2
 80097d6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	3308      	adds	r3, #8
 80097dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fd fb8e 	bl	8006f00 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	330c      	adds	r3, #12
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	4611      	mov	r1, r2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fd fb87 	bl	8006f00 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80097f2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80097f6:	2301      	movs	r3, #1
 80097f8:	2200      	movs	r2, #0
 80097fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097fc:	f7fd faec 	bl	8006dd8 <disk_write>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <f_mkfs+0x832>
 8009806:	2301      	movs	r3, #1
 8009808:	e00c      	b.n	8009824 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800980a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800980e:	2200      	movs	r2, #0
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f7fd fb00 	bl	8006e18 <disk_ioctl>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <f_mkfs+0x84a>
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <f_mkfs+0x84c>

	return FR_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3774      	adds	r7, #116	; 0x74
 8009828:	46bd      	mov	sp, r7
 800982a:	bd90      	pop	{r4, r7, pc}
 800982c:	0515565b 	.word	0x0515565b

08009830 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	4613      	mov	r3, r2
 800983c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800983e:	2301      	movs	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009842:	2300      	movs	r3, #0
 8009844:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009846:	4b1f      	ldr	r3, [pc, #124]	; (80098c4 <FATFS_LinkDriverEx+0x94>)
 8009848:	7a5b      	ldrb	r3, [r3, #9]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d131      	bne.n	80098b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009850:	4b1c      	ldr	r3, [pc, #112]	; (80098c4 <FATFS_LinkDriverEx+0x94>)
 8009852:	7a5b      	ldrb	r3, [r3, #9]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	461a      	mov	r2, r3
 8009858:	4b1a      	ldr	r3, [pc, #104]	; (80098c4 <FATFS_LinkDriverEx+0x94>)
 800985a:	2100      	movs	r1, #0
 800985c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800985e:	4b19      	ldr	r3, [pc, #100]	; (80098c4 <FATFS_LinkDriverEx+0x94>)
 8009860:	7a5b      	ldrb	r3, [r3, #9]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	4a17      	ldr	r2, [pc, #92]	; (80098c4 <FATFS_LinkDriverEx+0x94>)
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800986e:	4b15      	ldr	r3, [pc, #84]	; (80098c4 <FATFS_LinkDriverEx+0x94>)
 8009870:	7a5b      	ldrb	r3, [r3, #9]
 8009872:	b2db      	uxtb	r3, r3
 8009874:	461a      	mov	r2, r3
 8009876:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <FATFS_LinkDriverEx+0x94>)
 8009878:	4413      	add	r3, r2
 800987a:	79fa      	ldrb	r2, [r7, #7]
 800987c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800987e:	4b11      	ldr	r3, [pc, #68]	; (80098c4 <FATFS_LinkDriverEx+0x94>)
 8009880:	7a5b      	ldrb	r3, [r3, #9]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	b2d1      	uxtb	r1, r2
 8009888:	4a0e      	ldr	r2, [pc, #56]	; (80098c4 <FATFS_LinkDriverEx+0x94>)
 800988a:	7251      	strb	r1, [r2, #9]
 800988c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800988e:	7dbb      	ldrb	r3, [r7, #22]
 8009890:	3330      	adds	r3, #48	; 0x30
 8009892:	b2da      	uxtb	r2, r3
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	3301      	adds	r3, #1
 800989c:	223a      	movs	r2, #58	; 0x3a
 800989e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	3302      	adds	r3, #2
 80098a4:	222f      	movs	r2, #47	; 0x2f
 80098a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	3303      	adds	r3, #3
 80098ac:	2200      	movs	r2, #0
 80098ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	371c      	adds	r7, #28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	2400005c 	.word	0x2400005c

080098c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80098d2:	2200      	movs	r2, #0
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff ffaa 	bl	8009830 <FATFS_LinkDriverEx>
 80098dc:	4603      	mov	r3, r0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <__libc_init_array>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	4d0d      	ldr	r5, [pc, #52]	; (8009920 <__libc_init_array+0x38>)
 80098ec:	4c0d      	ldr	r4, [pc, #52]	; (8009924 <__libc_init_array+0x3c>)
 80098ee:	1b64      	subs	r4, r4, r5
 80098f0:	10a4      	asrs	r4, r4, #2
 80098f2:	2600      	movs	r6, #0
 80098f4:	42a6      	cmp	r6, r4
 80098f6:	d109      	bne.n	800990c <__libc_init_array+0x24>
 80098f8:	4d0b      	ldr	r5, [pc, #44]	; (8009928 <__libc_init_array+0x40>)
 80098fa:	4c0c      	ldr	r4, [pc, #48]	; (800992c <__libc_init_array+0x44>)
 80098fc:	f000 f820 	bl	8009940 <_init>
 8009900:	1b64      	subs	r4, r4, r5
 8009902:	10a4      	asrs	r4, r4, #2
 8009904:	2600      	movs	r6, #0
 8009906:	42a6      	cmp	r6, r4
 8009908:	d105      	bne.n	8009916 <__libc_init_array+0x2e>
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009910:	4798      	blx	r3
 8009912:	3601      	adds	r6, #1
 8009914:	e7ee      	b.n	80098f4 <__libc_init_array+0xc>
 8009916:	f855 3b04 	ldr.w	r3, [r5], #4
 800991a:	4798      	blx	r3
 800991c:	3601      	adds	r6, #1
 800991e:	e7f2      	b.n	8009906 <__libc_init_array+0x1e>
 8009920:	08009a8c 	.word	0x08009a8c
 8009924:	08009a8c 	.word	0x08009a8c
 8009928:	08009a8c 	.word	0x08009a8c
 800992c:	08009a90 	.word	0x08009a90

08009930 <memset>:
 8009930:	4402      	add	r2, r0
 8009932:	4603      	mov	r3, r0
 8009934:	4293      	cmp	r3, r2
 8009936:	d100      	bne.n	800993a <memset+0xa>
 8009938:	4770      	bx	lr
 800993a:	f803 1b01 	strb.w	r1, [r3], #1
 800993e:	e7f9      	b.n	8009934 <memset+0x4>

08009940 <_init>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr

0800994c <_fini>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr
